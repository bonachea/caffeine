var tipuesearch = {"pages":[{"title":" Caffeine ","text":"Caffeine Documentation Philosophy and Motivations Organization Warning Caffeine is early-stage developmental software with evolving interfaces and functionality. Documentation Welcome to the Caffeine documentation. FORD generates this documentation from inline comments, static analysis, and Markdown files.\nThe target audience for Caffeine is Fortran compiler developers.\nWith a fully Caffeinated compiler, Fortran programmers can produce parallel executable files from standard Fortran with no need to directly reference Caffeine or any lower-level communication software. Philosophy and Motivations Write as much of Caffeine as possible in Fortran: Writing the runtime library in the language of the users increases the likelihood of community contributions. Writing the runtime library in Fortran obviates the need to directly manipulate compiler descriptors throughout much of Caffeine and allows Caffeine's underlying C layer to receive the Fortran-standard CFI_cdesc_t descriptor, which will make it easier to support multiple compilers. Writing most of Caffeine in Fortran offers the potential exploiting Fortran's rich array syntax, concurrent loop iterations ( do concurrent ), pure procedures and related features. Currently, these play a role only in one place: C callbacks to user-provided, pure functions that can be invoked inside a do concurrent block during the execution of co_reduce . Define an interface that remains agnostic about the back-end communication library: Once multiple back ends are supported, Fortran developers would not have to rewrite or even recompile their programs in order to change back ends. Switching from GASNet-EX to MPI, for example, could become a link-time decision. Organization The tree below depicts a skeletal overview of Caffeine's directory structure. build / - build directory created by running . / install . sh |-- run - fpm . sh - shell script for rebuilding Caffeine or running examples or tests |-- * - temporary build files example / |-- hello . f90 - a Caffeinated \" Hello, world! \" program |-- support - test / - programs invoked by the test suite src / |-- prif . f90 - Module that defines all interfaces in PRIF |-- caffeine / |-- * _s . f90 - submodules containing procedure definitions |-- * . c - thin C functions wrapping networking middleware |-- * . h - corresponding C header files |-- * _h_m . f90 - a Fortran translation of a C header file |-- collective_subroutines / |-- co_ * _s . f90 - submodules containing procedure definitions test / |-- main . f90 - test suite driver created by make_vegetable_driver |-- * _test . f90 - unit tests Developer Info Lawrence Berkeley National Laboratory A U.S. Department of Energy National Laboratory Managed by the University of California","tags":"home","loc":"index.html"},{"title":"prif_coarray_handle – Caffeine ","text":"type, public :: prif_coarray_handle Inherits type~~prif_coarray_handle~~InheritsGraph type~prif_coarray_handle prif_coarray_handle type~handle_data handle_data type~prif_coarray_handle->type~handle_data info c_ptr c_ptr type~handle_data->c_ptr coarray_data, previous_handle, next_handle c_funptr c_funptr type~handle_data->c_funptr final_func Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\n    extends. Dashed arrows point from a derived type to the other\n    types it contains as a components, with a label listing the name(s) of\n    said component(s). Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables info Components Type Visibility Attributes Name Initial type( handle_data ), public, pointer :: info","tags":"","loc":"type/prif_coarray_handle.html"},{"title":"prif_critical_type – Caffeine ","text":"type, public :: prif_critical_type Contents Variables unimplemented_feature_placeholder Components Type Visibility Attributes Name Initial integer, public :: unimplemented_feature_placeholder = 0","tags":"","loc":"type/prif_critical_type.html"},{"title":"prif_event_type – Caffeine ","text":"type, public :: prif_event_type Contents Variables unimplemented_feature_placeholder Components Type Visibility Attributes Name Initial integer, public :: unimplemented_feature_placeholder = 0","tags":"","loc":"type/prif_event_type.html"},{"title":"prif_lock_type – Caffeine ","text":"type, public :: prif_lock_type Contents Variables unimplemented_feature_placeholder Components Type Visibility Attributes Name Initial integer, public :: unimplemented_feature_placeholder = 0","tags":"","loc":"type/prif_lock_type.html"},{"title":"prif_notify_type – Caffeine ","text":"type, public :: prif_notify_type Contents Variables unimplemented_feature_placeholder Components Type Visibility Attributes Name Initial integer, public :: unimplemented_feature_placeholder = 0","tags":"","loc":"type/prif_notify_type.html"},{"title":"prif_team_type – Caffeine ","text":"type, public :: prif_team_type Inherits type~~prif_team_type~~InheritsGraph type~prif_team_type prif_team_type type~team_data team_data type~prif_team_type->type~team_data info type~team_data->type~team_data parent_team c_ptr c_ptr type~team_data->c_ptr gex_team, heap_mspace type~handle_data handle_data type~team_data->type~handle_data coarrays type~handle_data->c_ptr coarray_data, previous_handle, next_handle c_funptr c_funptr type~handle_data->c_funptr final_func Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\n    extends. Dashed arrows point from a derived type to the other\n    types it contains as a components, with a label listing the name(s) of\n    said component(s). Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables info Components Type Visibility Attributes Name Initial type( team_data ), public, pointer :: info => null()","tags":"","loc":"type/prif_team_type.html"},{"title":"handle_data – Caffeine ","text":"type, private, bind(c) :: handle_data Inherits type~~handle_data~~InheritsGraph type~handle_data handle_data c_ptr c_ptr type~handle_data->c_ptr coarray_data, previous_handle, next_handle c_funptr c_funptr type~handle_data->c_funptr final_func Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\n    extends. Dashed arrows point from a derived type to the other\n    types it contains as a components, with a label listing the name(s) of\n    said component(s). Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Inherited by type~~handle_data~~InheritedByGraph type~handle_data handle_data type~prif_coarray_handle prif_coarray_handle type~prif_coarray_handle->type~handle_data info type~team_data team_data type~team_data->type~handle_data coarrays type~team_data->type~team_data parent_team type~prif_team_type prif_team_type type~prif_team_type->type~team_data info Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\n    extends. Dashed arrows point from a derived type to the other\n    types it contains as a components, with a label listing the name(s) of\n    said component(s). Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables coarray_data coarray_size corank element_size final_func lcobounds next_handle previous_handle ucobounds Components Type Visibility Attributes Name Initial type(c_ptr), private :: coarray_data integer(kind=c_size_t), private :: coarray_size integer(kind=c_int), private :: corank integer(kind=c_size_t), private :: element_size type(c_funptr), private :: final_func integer(kind=c_intmax_t), private :: lcobounds (15) type(c_ptr), private :: next_handle type(c_ptr), private :: previous_handle integer(kind=c_intmax_t), private :: ucobounds (15)","tags":"","loc":"type/handle_data.html"},{"title":"team_data – Caffeine ","text":"type, private :: team_data Inherits type~~team_data~~InheritsGraph type~team_data team_data type~team_data->type~team_data parent_team c_ptr c_ptr type~team_data->c_ptr gex_team, heap_mspace type~handle_data handle_data type~team_data->type~handle_data coarrays type~handle_data->c_ptr coarray_data, previous_handle, next_handle c_funptr c_funptr type~handle_data->c_funptr final_func Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\n    extends. Dashed arrows point from a derived type to the other\n    types it contains as a components, with a label listing the name(s) of\n    said component(s). Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Inherited by type~~team_data~~InheritedByGraph type~team_data team_data type~team_data->type~team_data parent_team type~prif_team_type prif_team_type type~prif_team_type->type~team_data info Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\n    extends. Dashed arrows point from a derived type to the other\n    types it contains as a components, with a label listing the name(s) of\n    said component(s). Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables coarrays gex_team heap_mspace heap_start parent_team Components Type Visibility Attributes Name Initial type( handle_data ), private, pointer :: coarrays => null() type(c_ptr), private :: gex_team type(c_ptr), private :: heap_mspace integer(kind=c_intptr_t), private :: heap_start type( team_data ), private, pointer :: parent_team => null()","tags":"","loc":"type/team_data.html"},{"title":"c_bool_operation – Caffeine","text":"abstract interface pure function c_bool_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name logical(kind=c_bool), intent(in) :: lhs logical(kind=c_bool), intent(in) :: rhs Return Value logical(kind=c_bool)","tags":"","loc":"interface/c_bool_operation.html"},{"title":"c_char_operation – Caffeine","text":"abstract interface function c_char_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name character(kind=c_char,len=*), intent(in) :: lhs character(kind=c_char,len=*), intent(in) :: rhs Return Value character(kind=c_char,len=:),allocatable","tags":"","loc":"interface/c_char_operation.html"},{"title":"c_double_complex_operation – Caffeine","text":"abstract interface pure function c_double_complex_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name complex(kind=c_double), intent(in) :: lhs complex(kind=c_double), intent(in) :: rhs Return Value complex(kind=c_double)","tags":"","loc":"interface/c_double_complex_operation.html"},{"title":"c_double_operation – Caffeine","text":"abstract interface pure function c_double_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name real(kind=c_double), intent(in) :: lhs real(kind=c_double), intent(in) :: rhs Return Value real(kind=c_double)","tags":"","loc":"interface/c_double_operation.html"},{"title":"c_float_complex_operation – Caffeine","text":"abstract interface pure function c_float_complex_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name complex(kind=c_float), intent(in) :: lhs complex(kind=c_float), intent(in) :: rhs Return Value complex(kind=c_float)","tags":"","loc":"interface/c_float_complex_operation.html"},{"title":"c_float_operation – Caffeine","text":"abstract interface pure function c_float_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name real(kind=c_float), intent(in) :: lhs real(kind=c_float), intent(in) :: rhs Return Value real(kind=c_float)","tags":"","loc":"interface/c_float_operation.html"},{"title":"c_int32_t_operation – Caffeine","text":"abstract interface pure function c_int32_t_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name integer(kind=c_int32_t), intent(in) :: lhs integer(kind=c_int32_t), intent(in) :: rhs Return Value integer(kind=c_int32_t)","tags":"","loc":"interface/c_int32_t_operation.html"},{"title":"c_int64_t_operation – Caffeine","text":"abstract interface pure function c_int64_t_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name integer(kind=c_int64_t), intent(in) :: lhs integer(kind=c_int64_t), intent(in) :: rhs Return Value integer(kind=c_int64_t)","tags":"","loc":"interface/c_int64_t_operation.html"},{"title":"prif_alias_create – Caffeine","text":"interface Calls interface~~prif_alias_create~~CallsGraph interface~prif_alias_create prif_alias_create proc~prif_alias_create prif_alias_create interface~prif_alias_create->proc~prif_alias_create proc~unimplemented unimplemented proc~prif_alias_create->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_alias_create(source_handle, alias_lcobounds, alias_ucobounds, alias_handle) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: source_handle integer(kind=c_intmax_t), intent(in) :: alias_lcobounds (:) integer(kind=c_intmax_t), intent(in) :: alias_ucobounds (:) type( prif_coarray_handle ), intent(out) :: alias_handle","tags":"","loc":"interface/prif_alias_create.html"},{"title":"prif_alias_destroy – Caffeine","text":"interface Calls interface~~prif_alias_destroy~~CallsGraph interface~prif_alias_destroy prif_alias_destroy proc~prif_alias_destroy prif_alias_destroy interface~prif_alias_destroy->proc~prif_alias_destroy proc~unimplemented unimplemented proc~prif_alias_destroy->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_alias_destroy(alias_handle) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: alias_handle","tags":"","loc":"interface/prif_alias_destroy.html"},{"title":"prif_allocate – Caffeine","text":"interface Calls interface~~prif_allocate~~CallsGraph interface~prif_allocate prif_allocate proc~prif_allocate prif_allocate interface~prif_allocate->proc~prif_allocate interface~caf_allocate caf_allocate proc~prif_allocate->interface~caf_allocate Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_allocate(size_in_bytes, allocated_memory, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_size_t) :: size_in_bytes type(c_ptr), intent(out) :: allocated_memory integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_allocate.html"},{"title":"prif_allocate_coarray – Caffeine","text":"interface Calls interface~~prif_allocate_coarray~~CallsGraph interface~prif_allocate_coarray prif_allocate_coarray proc~prif_allocate_coarray prif_allocate_coarray interface~prif_allocate_coarray->proc~prif_allocate_coarray interface~caf_this_image caf_this_image proc~prif_allocate_coarray->interface~caf_this_image proc~as_c_ptr as_c_ptr proc~prif_allocate_coarray->proc~as_c_ptr interface~prif_co_sum prif_co_sum proc~prif_allocate_coarray->interface~prif_co_sum proc~as_int as_int proc~prif_allocate_coarray->proc~as_int interface~caf_allocate caf_allocate proc~prif_allocate_coarray->interface~caf_allocate proc~add_to_team_list add_to_team_list proc~prif_allocate_coarray->proc~add_to_team_list proc~prif_co_sum prif_co_sum interface~prif_co_sum->proc~prif_co_sum proc~optional_value optional_value proc~prif_co_sum->proc~optional_value interface~caf_co_sum caf_co_sum proc~prif_co_sum->interface~caf_co_sum Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_allocate_coarray(lcobounds, ucobounds, lbounds, ubounds, element_size, final_func, coarray_handle, allocated_memory, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_intmax_t), intent(in), dimension(:) :: lcobounds integer(kind=c_intmax_t), intent(in), dimension(:) :: ucobounds integer(kind=c_intmax_t), intent(in), dimension(:) :: lbounds integer(kind=c_intmax_t), intent(in), dimension(:) :: ubounds integer(kind=c_size_t), intent(in) :: element_size type(c_funptr), intent(in) :: final_func type( prif_coarray_handle ), intent(out) :: coarray_handle type(c_ptr), intent(out) :: allocated_memory integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_allocate_coarray.html"},{"title":"prif_atomic_add – Caffeine","text":"interface Calls interface~~prif_atomic_add~~CallsGraph interface~prif_atomic_add prif_atomic_add proc~prif_atomic_add prif_atomic_add interface~prif_atomic_add->proc~prif_atomic_add proc~unimplemented unimplemented proc~prif_atomic_add->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_atomic_add(image_num, coarray_handle, offset, value, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"interface/prif_atomic_add.html"},{"title":"prif_atomic_add_indirect – Caffeine","text":"interface Calls interface~~prif_atomic_add_indirect~~CallsGraph interface~prif_atomic_add_indirect prif_atomic_add_indirect proc~prif_atomic_add_indirect prif_atomic_add_indirect interface~prif_atomic_add_indirect->proc~prif_atomic_add_indirect proc~unimplemented unimplemented proc~prif_atomic_add_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_atomic_add_indirect(image_num, atom_remote_ptr, value, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"interface/prif_atomic_add_indirect.html"},{"title":"prif_atomic_and – Caffeine","text":"interface Calls interface~~prif_atomic_and~~CallsGraph interface~prif_atomic_and prif_atomic_and proc~prif_atomic_and prif_atomic_and interface~prif_atomic_and->proc~prif_atomic_and proc~unimplemented unimplemented proc~prif_atomic_and->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_atomic_and(image_num, coarray_handle, offset, value, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"interface/prif_atomic_and.html"},{"title":"prif_atomic_and_indirect – Caffeine","text":"interface Calls interface~~prif_atomic_and_indirect~~CallsGraph interface~prif_atomic_and_indirect prif_atomic_and_indirect proc~prif_atomic_and_indirect prif_atomic_and_indirect interface~prif_atomic_and_indirect->proc~prif_atomic_and_indirect proc~unimplemented unimplemented proc~prif_atomic_and_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_atomic_and_indirect(image_num, atom_remote_ptr, value, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"interface/prif_atomic_and_indirect.html"},{"title":"prif_atomic_cas_int – Caffeine","text":"interface Calls interface~~prif_atomic_cas_int~~CallsGraph interface~prif_atomic_cas_int prif_atomic_cas_int proc~prif_atomic_cas_int prif_atomic_cas_int interface~prif_atomic_cas_int->proc~prif_atomic_cas_int proc~unimplemented unimplemented proc~prif_atomic_cas_int->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_atomic_cas_int(image_num, coarray_handle, offset, old, compare, new, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=prif_atomic_int_kind), intent(out) :: old integer(kind=prif_atomic_int_kind), intent(in) :: compare integer(kind=prif_atomic_int_kind), intent(in) :: new integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"interface/prif_atomic_cas_int.html"},{"title":"prif_atomic_cas_int_indirect – Caffeine","text":"interface Calls interface~~prif_atomic_cas_int_indirect~~CallsGraph interface~prif_atomic_cas_int_indirect prif_atomic_cas_int_indirect proc~prif_atomic_cas_int_indirect prif_atomic_cas_int_indirect interface~prif_atomic_cas_int_indirect->proc~prif_atomic_cas_int_indirect proc~unimplemented unimplemented proc~prif_atomic_cas_int_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_atomic_cas_int_indirect(image_num, atom_remote_ptr, old, compare, new, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=prif_atomic_int_kind), intent(out) :: old integer(kind=prif_atomic_int_kind), intent(in) :: compare integer(kind=prif_atomic_int_kind), intent(in) :: new integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"interface/prif_atomic_cas_int_indirect.html"},{"title":"prif_atomic_cas_logical – Caffeine","text":"interface Calls interface~~prif_atomic_cas_logical~~CallsGraph interface~prif_atomic_cas_logical prif_atomic_cas_logical proc~prif_atomic_cas_logical prif_atomic_cas_logical interface~prif_atomic_cas_logical->proc~prif_atomic_cas_logical proc~unimplemented unimplemented proc~prif_atomic_cas_logical->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_atomic_cas_logical(image_num, coarray_handle, offset, old, compare, new, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset logical(kind=prif_atomic_logical_kind), intent(out) :: old logical(kind=prif_atomic_logical_kind), intent(in) :: compare logical(kind=prif_atomic_logical_kind), intent(in) :: new integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"interface/prif_atomic_cas_logical.html"},{"title":"prif_atomic_cas_logical_indirect – Caffeine","text":"interface Calls interface~~prif_atomic_cas_logical_indirect~~CallsGraph interface~prif_atomic_cas_logical_indirect prif_atomic_cas_logical_indirect proc~prif_atomic_cas_logical_indirect prif_atomic_cas_logical_indirect interface~prif_atomic_cas_logical_indirect->proc~prif_atomic_cas_logical_indirect proc~unimplemented unimplemented proc~prif_atomic_cas_logical_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_atomic_cas_logical_indirect(image_num, atom_remote_ptr, old, compare, new, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr logical(kind=prif_atomic_logical_kind), intent(out) :: old logical(kind=prif_atomic_logical_kind), intent(in) :: compare logical(kind=prif_atomic_logical_kind), intent(in) :: new integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"interface/prif_atomic_cas_logical_indirect.html"},{"title":"prif_atomic_define_int – Caffeine","text":"interface Calls interface~~prif_atomic_define_int~~CallsGraph interface~prif_atomic_define_int prif_atomic_define_int proc~prif_atomic_define_int prif_atomic_define_int interface~prif_atomic_define_int->proc~prif_atomic_define_int proc~unimplemented unimplemented proc~prif_atomic_define_int->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_atomic_define_int(image_num, coarray_handle, offset, value, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"interface/prif_atomic_define_int.html"},{"title":"prif_atomic_define_int_indirect – Caffeine","text":"interface Calls interface~~prif_atomic_define_int_indirect~~CallsGraph interface~prif_atomic_define_int_indirect prif_atomic_define_int_indirect proc~prif_atomic_define_int_indirect prif_atomic_define_int_indirect interface~prif_atomic_define_int_indirect->proc~prif_atomic_define_int_indirect proc~unimplemented unimplemented proc~prif_atomic_define_int_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_atomic_define_int_indirect(image_num, atom_remote_ptr, value, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"interface/prif_atomic_define_int_indirect.html"},{"title":"prif_atomic_define_logical – Caffeine","text":"interface Calls interface~~prif_atomic_define_logical~~CallsGraph interface~prif_atomic_define_logical prif_atomic_define_logical proc~prif_atomic_define_logical prif_atomic_define_logical interface~prif_atomic_define_logical->proc~prif_atomic_define_logical proc~unimplemented unimplemented proc~prif_atomic_define_logical->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_atomic_define_logical(image_num, coarray_handle, offset, value, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset logical(kind=prif_atomic_logical_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"interface/prif_atomic_define_logical.html"},{"title":"prif_atomic_define_logical_indirect – Caffeine","text":"interface Calls interface~~prif_atomic_define_logical_indirect~~CallsGraph interface~prif_atomic_define_logical_indirect prif_atomic_define_logical_indirect proc~prif_atomic_define_logical_indirect prif_atomic_define_logical_indirect interface~prif_atomic_define_logical_indirect->proc~prif_atomic_define_logical_indirect proc~unimplemented unimplemented proc~prif_atomic_define_logical_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_atomic_define_logical_indirect(image_num, atom_remote_ptr, value, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr logical(kind=prif_atomic_logical_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"interface/prif_atomic_define_logical_indirect.html"},{"title":"prif_atomic_fetch_add – Caffeine","text":"interface Calls interface~~prif_atomic_fetch_add~~CallsGraph interface~prif_atomic_fetch_add prif_atomic_fetch_add proc~prif_atomic_fetch_add prif_atomic_fetch_add interface~prif_atomic_fetch_add->proc~prif_atomic_fetch_add proc~unimplemented unimplemented proc~prif_atomic_fetch_add->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_atomic_fetch_add(image_num, coarray_handle, offset, value, old, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=prif_atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"interface/prif_atomic_fetch_add.html"},{"title":"prif_atomic_fetch_add_indirect – Caffeine","text":"interface Calls interface~~prif_atomic_fetch_add_indirect~~CallsGraph interface~prif_atomic_fetch_add_indirect prif_atomic_fetch_add_indirect proc~prif_atomic_fetch_add_indirect prif_atomic_fetch_add_indirect interface~prif_atomic_fetch_add_indirect->proc~prif_atomic_fetch_add_indirect proc~unimplemented unimplemented proc~prif_atomic_fetch_add_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_atomic_fetch_add_indirect(image_num, atom_remote_ptr, value, old, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=prif_atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"interface/prif_atomic_fetch_add_indirect.html"},{"title":"prif_atomic_fetch_and – Caffeine","text":"interface Calls interface~~prif_atomic_fetch_and~~CallsGraph interface~prif_atomic_fetch_and prif_atomic_fetch_and proc~prif_atomic_fetch_and prif_atomic_fetch_and interface~prif_atomic_fetch_and->proc~prif_atomic_fetch_and proc~unimplemented unimplemented proc~prif_atomic_fetch_and->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_atomic_fetch_and(image_num, coarray_handle, offset, value, old, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=prif_atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"interface/prif_atomic_fetch_and.html"},{"title":"prif_atomic_fetch_and_indirect – Caffeine","text":"interface Calls interface~~prif_atomic_fetch_and_indirect~~CallsGraph interface~prif_atomic_fetch_and_indirect prif_atomic_fetch_and_indirect proc~prif_atomic_fetch_and_indirect prif_atomic_fetch_and_indirect interface~prif_atomic_fetch_and_indirect->proc~prif_atomic_fetch_and_indirect proc~unimplemented unimplemented proc~prif_atomic_fetch_and_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_atomic_fetch_and_indirect(image_num, atom_remote_ptr, value, old, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=prif_atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"interface/prif_atomic_fetch_and_indirect.html"},{"title":"prif_atomic_fetch_or – Caffeine","text":"interface Calls interface~~prif_atomic_fetch_or~~CallsGraph interface~prif_atomic_fetch_or prif_atomic_fetch_or proc~prif_atomic_fetch_or prif_atomic_fetch_or interface~prif_atomic_fetch_or->proc~prif_atomic_fetch_or proc~unimplemented unimplemented proc~prif_atomic_fetch_or->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_atomic_fetch_or(image_num, coarray_handle, offset, value, old, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=prif_atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"interface/prif_atomic_fetch_or.html"},{"title":"prif_atomic_fetch_or_indirect – Caffeine","text":"interface Calls interface~~prif_atomic_fetch_or_indirect~~CallsGraph interface~prif_atomic_fetch_or_indirect prif_atomic_fetch_or_indirect proc~prif_atomic_fetch_or_indirect prif_atomic_fetch_or_indirect interface~prif_atomic_fetch_or_indirect->proc~prif_atomic_fetch_or_indirect proc~unimplemented unimplemented proc~prif_atomic_fetch_or_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_atomic_fetch_or_indirect(image_num, atom_remote_ptr, value, old, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=prif_atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"interface/prif_atomic_fetch_or_indirect.html"},{"title":"prif_atomic_fetch_xor – Caffeine","text":"interface Calls interface~~prif_atomic_fetch_xor~~CallsGraph interface~prif_atomic_fetch_xor prif_atomic_fetch_xor proc~prif_atomic_fetch_xor prif_atomic_fetch_xor interface~prif_atomic_fetch_xor->proc~prif_atomic_fetch_xor proc~unimplemented unimplemented proc~prif_atomic_fetch_xor->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_atomic_fetch_xor(image_num, coarray_handle, offset, value, old, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=prif_atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"interface/prif_atomic_fetch_xor.html"},{"title":"prif_atomic_fetch_xor_indirect – Caffeine","text":"interface Calls interface~~prif_atomic_fetch_xor_indirect~~CallsGraph interface~prif_atomic_fetch_xor_indirect prif_atomic_fetch_xor_indirect proc~prif_atomic_fetch_xor_indirect prif_atomic_fetch_xor_indirect interface~prif_atomic_fetch_xor_indirect->proc~prif_atomic_fetch_xor_indirect proc~unimplemented unimplemented proc~prif_atomic_fetch_xor_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_atomic_fetch_xor_indirect(image_num, atom_remote_ptr, value, old, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=prif_atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"interface/prif_atomic_fetch_xor_indirect.html"},{"title":"prif_atomic_or – Caffeine","text":"interface Calls interface~~prif_atomic_or~~CallsGraph interface~prif_atomic_or prif_atomic_or proc~prif_atomic_or prif_atomic_or interface~prif_atomic_or->proc~prif_atomic_or proc~unimplemented unimplemented proc~prif_atomic_or->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_atomic_or(image_num, coarray_handle, offset, value, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"interface/prif_atomic_or.html"},{"title":"prif_atomic_or_indirect – Caffeine","text":"interface Calls interface~~prif_atomic_or_indirect~~CallsGraph interface~prif_atomic_or_indirect prif_atomic_or_indirect proc~prif_atomic_or_indirect prif_atomic_or_indirect interface~prif_atomic_or_indirect->proc~prif_atomic_or_indirect proc~unimplemented unimplemented proc~prif_atomic_or_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_atomic_or_indirect(image_num, atom_remote_ptr, value, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"interface/prif_atomic_or_indirect.html"},{"title":"prif_atomic_ref_int – Caffeine","text":"interface Calls interface~~prif_atomic_ref_int~~CallsGraph interface~prif_atomic_ref_int prif_atomic_ref_int proc~prif_atomic_ref_int prif_atomic_ref_int interface~prif_atomic_ref_int->proc~prif_atomic_ref_int proc~unimplemented unimplemented proc~prif_atomic_ref_int->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_atomic_ref_int(image_num, coarray_handle, offset, value, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=prif_atomic_int_kind), intent(out) :: value integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"interface/prif_atomic_ref_int.html"},{"title":"prif_atomic_ref_int_indirect – Caffeine","text":"interface Calls interface~~prif_atomic_ref_int_indirect~~CallsGraph interface~prif_atomic_ref_int_indirect prif_atomic_ref_int_indirect proc~prif_atomic_ref_int_indirect prif_atomic_ref_int_indirect interface~prif_atomic_ref_int_indirect->proc~prif_atomic_ref_int_indirect proc~unimplemented unimplemented proc~prif_atomic_ref_int_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_atomic_ref_int_indirect(image_num, atom_remote_ptr, value, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=prif_atomic_int_kind), intent(out) :: value integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"interface/prif_atomic_ref_int_indirect.html"},{"title":"prif_atomic_ref_logical – Caffeine","text":"interface Calls interface~~prif_atomic_ref_logical~~CallsGraph interface~prif_atomic_ref_logical prif_atomic_ref_logical proc~prif_atomic_ref_logical prif_atomic_ref_logical interface~prif_atomic_ref_logical->proc~prif_atomic_ref_logical proc~unimplemented unimplemented proc~prif_atomic_ref_logical->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_atomic_ref_logical(image_num, coarray_handle, offset, value, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset logical(kind=prif_atomic_logical_kind), intent(out) :: value integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"interface/prif_atomic_ref_logical.html"},{"title":"prif_atomic_ref_logical_indirect – Caffeine","text":"interface Calls interface~~prif_atomic_ref_logical_indirect~~CallsGraph interface~prif_atomic_ref_logical_indirect prif_atomic_ref_logical_indirect proc~prif_atomic_ref_logical_indirect prif_atomic_ref_logical_indirect interface~prif_atomic_ref_logical_indirect->proc~prif_atomic_ref_logical_indirect proc~unimplemented unimplemented proc~prif_atomic_ref_logical_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_atomic_ref_logical_indirect(image_num, atom_remote_ptr, value, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr logical(kind=prif_atomic_logical_kind), intent(out) :: value integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"interface/prif_atomic_ref_logical_indirect.html"},{"title":"prif_atomic_xor – Caffeine","text":"interface Calls interface~~prif_atomic_xor~~CallsGraph interface~prif_atomic_xor prif_atomic_xor proc~prif_atomic_xor prif_atomic_xor interface~prif_atomic_xor->proc~prif_atomic_xor proc~unimplemented unimplemented proc~prif_atomic_xor->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_atomic_xor(image_num, coarray_handle, offset, value, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"interface/prif_atomic_xor.html"},{"title":"prif_atomic_xor_indirect – Caffeine","text":"interface Calls interface~~prif_atomic_xor_indirect~~CallsGraph interface~prif_atomic_xor_indirect prif_atomic_xor_indirect proc~prif_atomic_xor_indirect prif_atomic_xor_indirect interface~prif_atomic_xor_indirect->proc~prif_atomic_xor_indirect proc~unimplemented unimplemented proc~prif_atomic_xor_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_atomic_xor_indirect(image_num, atom_remote_ptr, value, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"interface/prif_atomic_xor_indirect.html"},{"title":"prif_change_team – Caffeine","text":"interface Calls interface~~prif_change_team~~CallsGraph interface~prif_change_team prif_change_team proc~prif_change_team prif_change_team interface~prif_change_team->proc~prif_change_team proc~unimplemented unimplemented proc~prif_change_team->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_change_team(team, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in) :: team integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_change_team.html"},{"title":"prif_co_broadcast – Caffeine","text":"interface Calls interface~~prif_co_broadcast~~CallsGraph interface~prif_co_broadcast prif_co_broadcast proc~prif_co_broadcast prif_co_broadcast interface~prif_co_broadcast->proc~prif_co_broadcast interface~caf_co_broadcast caf_co_broadcast proc~prif_co_broadcast->interface~caf_co_broadcast Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_co_broadcast(a, source_image, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer(kind=c_int), intent(in) :: source_image integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_co_broadcast.html"},{"title":"prif_co_max – Caffeine","text":"interface Calls interface~~prif_co_max~~CallsGraph interface~prif_co_max prif_co_max proc~prif_co_max prif_co_max interface~prif_co_max->proc~prif_co_max interface~caf_co_max caf_co_max proc~prif_co_max->interface~caf_co_max interface~prif_co_reduce prif_co_reduce proc~prif_co_max->interface~prif_co_reduce interface~caf_is_f_string caf_is_f_string proc~prif_co_max->interface~caf_is_f_string proc~optional_value optional_value proc~prif_co_max->proc~optional_value interface~caf_numeric_type caf_numeric_type proc~prif_co_max->interface~caf_numeric_type interface~prif_error_stop prif_error_stop proc~prif_co_max->interface~prif_error_stop proc~prif_co_reduce prif_co_reduce interface~prif_co_reduce->proc~prif_co_reduce proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_co_reduce->interface~caf_is_f_string proc~prif_co_reduce->proc~optional_value proc~prif_co_reduce->interface~prif_error_stop interface~caf_co_reduce caf_co_reduce proc~prif_co_reduce->interface~caf_co_reduce interface~caf_same_cfi_type caf_same_cfi_type proc~prif_co_reduce->interface~caf_same_cfi_type interface~caf_elem_len caf_elem_len proc~prif_co_reduce->interface~caf_elem_len interface~assert assert proc~prif_co_reduce->interface~assert proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string proc~assert assert interface~assert->proc~assert proc~assert->interface~prif_error_stop Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_co_max(a, result_image, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer(kind=c_int), intent(in), optional :: result_image integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_co_max.html"},{"title":"prif_co_min – Caffeine","text":"interface Calls interface~~prif_co_min~~CallsGraph interface~prif_co_min prif_co_min proc~prif_co_min prif_co_min interface~prif_co_min->proc~prif_co_min interface~prif_co_reduce prif_co_reduce proc~prif_co_min->interface~prif_co_reduce interface~caf_co_min caf_co_min proc~prif_co_min->interface~caf_co_min interface~caf_is_f_string caf_is_f_string proc~prif_co_min->interface~caf_is_f_string proc~optional_value optional_value proc~prif_co_min->proc~optional_value interface~caf_numeric_type caf_numeric_type proc~prif_co_min->interface~caf_numeric_type interface~prif_error_stop prif_error_stop proc~prif_co_min->interface~prif_error_stop proc~prif_co_reduce prif_co_reduce interface~prif_co_reduce->proc~prif_co_reduce proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_co_reduce->interface~caf_is_f_string proc~prif_co_reduce->proc~optional_value proc~prif_co_reduce->interface~prif_error_stop interface~caf_co_reduce caf_co_reduce proc~prif_co_reduce->interface~caf_co_reduce interface~caf_same_cfi_type caf_same_cfi_type proc~prif_co_reduce->interface~caf_same_cfi_type interface~caf_elem_len caf_elem_len proc~prif_co_reduce->interface~caf_elem_len interface~assert assert proc~prif_co_reduce->interface~assert proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string proc~assert assert interface~assert->proc~assert proc~assert->interface~prif_error_stop Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_co_min(a, result_image, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer(kind=c_int), intent(in), optional :: result_image integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_co_min.html"},{"title":"prif_co_reduce – Caffeine","text":"interface Calls interface~~prif_co_reduce~~CallsGraph interface~prif_co_reduce prif_co_reduce proc~prif_co_reduce prif_co_reduce interface~prif_co_reduce->proc~prif_co_reduce interface~caf_co_reduce caf_co_reduce proc~prif_co_reduce->interface~caf_co_reduce interface~caf_is_f_string caf_is_f_string proc~prif_co_reduce->interface~caf_is_f_string interface~caf_same_cfi_type caf_same_cfi_type proc~prif_co_reduce->interface~caf_same_cfi_type proc~optional_value optional_value proc~prif_co_reduce->proc~optional_value interface~assert assert proc~prif_co_reduce->interface~assert interface~caf_elem_len caf_elem_len proc~prif_co_reduce->interface~caf_elem_len interface~prif_error_stop prif_error_stop proc~prif_co_reduce->interface~prif_error_stop proc~assert assert interface~assert->proc~assert proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~assert->interface~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by interface~~prif_co_reduce~~CalledByGraph interface~prif_co_reduce prif_co_reduce proc~prif_co_max prif_co_max proc~prif_co_max->interface~prif_co_reduce proc~prif_co_min prif_co_min proc~prif_co_min->interface~prif_co_reduce interface~prif_co_max prif_co_max interface~prif_co_max->proc~prif_co_max interface~prif_co_min prif_co_min interface~prif_co_min->proc~prif_co_min Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_co_reduce(a, operation, result_image, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) type(c_funptr), value :: operation integer(kind=c_int), intent(in), optional :: result_image integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_co_reduce.html"},{"title":"prif_co_sum – Caffeine","text":"interface Calls interface~~prif_co_sum~~CallsGraph interface~prif_co_sum prif_co_sum proc~prif_co_sum prif_co_sum interface~prif_co_sum->proc~prif_co_sum proc~optional_value optional_value proc~prif_co_sum->proc~optional_value interface~caf_co_sum caf_co_sum proc~prif_co_sum->interface~caf_co_sum Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by interface~~prif_co_sum~~CalledByGraph interface~prif_co_sum prif_co_sum proc~prif_allocate_coarray prif_allocate_coarray proc~prif_allocate_coarray->interface~prif_co_sum interface~prif_allocate_coarray prif_allocate_coarray interface~prif_allocate_coarray->proc~prif_allocate_coarray Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_co_sum(a, result_image, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer(kind=c_int), intent(in), optional :: result_image integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_co_sum.html"},{"title":"prif_coshape – Caffeine","text":"interface Calls interface~~prif_coshape~~CallsGraph interface~prif_coshape prif_coshape proc~prif_coshape prif_coshape interface~prif_coshape->proc~prif_coshape proc~unimplemented unimplemented proc~prif_coshape->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_coshape(coarray_handle, sizes) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(out) :: sizes (:)","tags":"","loc":"interface/prif_coshape.html"},{"title":"prif_critical – Caffeine","text":"interface Calls interface~~prif_critical~~CallsGraph interface~prif_critical prif_critical proc~prif_critical prif_critical interface~prif_critical->proc~prif_critical proc~unimplemented unimplemented proc~prif_critical->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_critical(critical_coarray, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: critical_coarray integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_critical.html"},{"title":"prif_deallocate – Caffeine","text":"interface Calls interface~~prif_deallocate~~CallsGraph interface~prif_deallocate prif_deallocate proc~prif_deallocate prif_deallocate interface~prif_deallocate->proc~prif_deallocate interface~caf_deallocate caf_deallocate proc~prif_deallocate->interface~caf_deallocate Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_deallocate(mem, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in) :: mem integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_deallocate.html"},{"title":"prif_deallocate_coarray – Caffeine","text":"interface Calls interface~~prif_deallocate_coarray~~CallsGraph interface~prif_deallocate_coarray prif_deallocate_coarray proc~prif_deallocate_coarray prif_deallocate_coarray interface~prif_deallocate_coarray->proc~prif_deallocate_coarray interface~caf_deallocate caf_deallocate proc~prif_deallocate_coarray->interface~caf_deallocate interface~caf_this_image caf_this_image proc~prif_deallocate_coarray->interface~caf_this_image proc~remove_from_team_list remove_from_team_list proc~prif_deallocate_coarray->proc~remove_from_team_list interface~prif_sync_all prif_sync_all proc~prif_deallocate_coarray->interface~prif_sync_all interface~prif_error_stop prif_error_stop proc~prif_deallocate_coarray->interface~prif_error_stop proc~prif_sync_all prif_sync_all interface~prif_sync_all->proc~prif_sync_all proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop interface~caf_sync_all caf_sync_all proc~prif_sync_all->interface~caf_sync_all proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_deallocate_coarray(coarray_handles, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handles (:) integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_deallocate_coarray.html"},{"title":"prif_end_critical – Caffeine","text":"interface Calls interface~~prif_end_critical~~CallsGraph interface~prif_end_critical prif_end_critical proc~prif_end_critical prif_end_critical interface~prif_end_critical->proc~prif_end_critical proc~unimplemented unimplemented proc~prif_end_critical->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_end_critical(critical_coarray) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: critical_coarray","tags":"","loc":"interface/prif_end_critical.html"},{"title":"prif_end_team – Caffeine","text":"interface Calls interface~~prif_end_team~~CallsGraph interface~prif_end_team prif_end_team proc~prif_end_team prif_end_team interface~prif_end_team->proc~prif_end_team proc~unimplemented unimplemented proc~prif_end_team->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_end_team(stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_end_team.html"},{"title":"prif_error_stop – Caffeine","text":"interface Calls interface~~prif_error_stop~~CallsGraph interface~prif_error_stop prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by interface~~prif_error_stop~~CalledByGraph interface~prif_error_stop prif_error_stop proc~assert assert proc~assert->interface~prif_error_stop proc~prif_co_min prif_co_min proc~prif_co_min->interface~prif_error_stop interface~prif_co_reduce prif_co_reduce proc~prif_co_min->interface~prif_co_reduce proc~unimplemented unimplemented proc~unimplemented->interface~prif_error_stop proc~prif_co_max prif_co_max proc~prif_co_max->interface~prif_error_stop proc~prif_co_max->interface~prif_co_reduce proc~prif_co_reduce prif_co_reduce proc~prif_co_reduce->interface~prif_error_stop interface~assert assert proc~prif_co_reduce->interface~assert proc~prif_deallocate_coarray prif_deallocate_coarray proc~prif_deallocate_coarray->interface~prif_error_stop proc~prif_atomic_define_int prif_atomic_define_int proc~prif_atomic_define_int->proc~unimplemented proc~prif_atomic_ref_logical prif_atomic_ref_logical proc~prif_atomic_ref_logical->proc~unimplemented proc~prif_notify_wait prif_notify_wait proc~prif_notify_wait->proc~unimplemented proc~prif_end_team prif_end_team proc~prif_end_team->proc~unimplemented proc~prif_get_team prif_get_team proc~prif_get_team->proc~unimplemented proc~prif_sync_team prif_sync_team proc~prif_sync_team->proc~unimplemented interface~prif_co_max prif_co_max interface~prif_co_max->proc~prif_co_max proc~prif_atomic_and_indirect prif_atomic_and_indirect proc~prif_atomic_and_indirect->proc~unimplemented proc~prif_atomic_fetch_xor_indirect prif_atomic_fetch_xor_indirect proc~prif_atomic_fetch_xor_indirect->proc~unimplemented proc~prif_size_bytes prif_size_bytes proc~prif_size_bytes->proc~unimplemented interface~prif_deallocate_coarray prif_deallocate_coarray interface~prif_deallocate_coarray->proc~prif_deallocate_coarray proc~prif_atomic_fetch_and prif_atomic_fetch_and proc~prif_atomic_fetch_and->proc~unimplemented proc~prif_failed_images prif_failed_images proc~prif_failed_images->proc~unimplemented proc~prif_put_strided_with_notify prif_put_strided_with_notify proc~prif_put_strided_with_notify->proc~unimplemented proc~prif_ucobound_with_dim prif_ucobound_with_dim proc~prif_ucobound_with_dim->proc~unimplemented proc~prif_atomic_define_int_indirect prif_atomic_define_int_indirect proc~prif_atomic_define_int_indirect->proc~unimplemented proc~prif_atomic_ref_logical_indirect prif_atomic_ref_logical_indirect proc~prif_atomic_ref_logical_indirect->proc~unimplemented proc~prif_num_images_with_team prif_num_images_with_team proc~prif_num_images_with_team->proc~unimplemented proc~prif_event_post prif_event_post proc~prif_event_post->proc~unimplemented proc~prif_put_indirect_with_notify_indirect prif_put_indirect_with_notify_indirect proc~prif_put_indirect_with_notify_indirect->proc~unimplemented proc~prif_team_number prif_team_number proc~prif_team_number->proc~unimplemented proc~prif_atomic_cas_int prif_atomic_cas_int proc~prif_atomic_cas_int->proc~unimplemented proc~prif_atomic_or prif_atomic_or proc~prif_atomic_or->proc~unimplemented proc~prif_lcobound_no_dim prif_lcobound_no_dim proc~prif_lcobound_no_dim->proc~unimplemented interface~prif_co_min prif_co_min interface~prif_co_min->proc~prif_co_min proc~prif_alias_create prif_alias_create proc~prif_alias_create->proc~unimplemented proc~prif_atomic_fetch_and_indirect prif_atomic_fetch_and_indirect proc~prif_atomic_fetch_and_indirect->proc~unimplemented proc~prif_form_team prif_form_team proc~prif_form_team->proc~unimplemented proc~prif_put_strided_with_notify_indirect prif_put_strided_with_notify_indirect proc~prif_put_strided_with_notify_indirect->proc~unimplemented proc~prif_unlock prif_unlock proc~prif_unlock->proc~unimplemented proc~prif_num_images_with_team_number prif_num_images_with_team_number proc~prif_num_images_with_team_number->proc~unimplemented proc~prif_atomic_define_logical prif_atomic_define_logical proc~prif_atomic_define_logical->proc~unimplemented proc~prif_atomic_xor prif_atomic_xor proc~prif_atomic_xor->proc~unimplemented proc~prif_get_context_data prif_get_context_data proc~prif_get_context_data->proc~unimplemented proc~prif_event_post_indirect prif_event_post_indirect proc~prif_event_post_indirect->proc~unimplemented proc~prif_image_index_with_team prif_image_index_with_team proc~prif_image_index_with_team->proc~unimplemented proc~prif_put_strided prif_put_strided proc~prif_put_strided->proc~unimplemented proc~prif_atomic_cas_int_indirect prif_atomic_cas_int_indirect proc~prif_atomic_cas_int_indirect->proc~unimplemented proc~prif_atomic_or_indirect prif_atomic_or_indirect proc~prif_atomic_or_indirect->proc~unimplemented proc~prif_lcobound_with_dim prif_lcobound_with_dim proc~prif_lcobound_with_dim->proc~unimplemented proc~prif_stopped_images prif_stopped_images proc~prif_stopped_images->proc~unimplemented proc~prif_atomic_add prif_atomic_add proc~prif_atomic_add->proc~unimplemented proc~prif_atomic_fetch_or prif_atomic_fetch_or proc~prif_atomic_fetch_or->proc~unimplemented proc~prif_put_with_notify prif_put_with_notify proc~prif_put_with_notify->proc~unimplemented proc~prif_unlock_indirect prif_unlock_indirect proc~prif_unlock_indirect->proc~unimplemented proc~prif_atomic_define_logical_indirect prif_atomic_define_logical_indirect proc~prif_atomic_define_logical_indirect->proc~unimplemented proc~prif_atomic_xor_indirect prif_atomic_xor_indirect proc~prif_atomic_xor_indirect->proc~unimplemented proc~prif_event_query prif_event_query proc~prif_event_query->proc~unimplemented proc~prif_image_index_with_team_number prif_image_index_with_team_number proc~prif_image_index_with_team_number->proc~unimplemented proc~prif_put_strided_indirect prif_put_strided_indirect proc~prif_put_strided_indirect->proc~unimplemented proc~prif_this_image_with_coarray prif_this_image_with_coarray proc~prif_this_image_with_coarray->proc~unimplemented proc~prif_alias_destroy prif_alias_destroy proc~prif_alias_destroy->proc~unimplemented proc~prif_atomic_cas_logical prif_atomic_cas_logical proc~prif_atomic_cas_logical->proc~unimplemented proc~prif_atomic_ref_int prif_atomic_ref_int proc~prif_atomic_ref_int->proc~unimplemented proc~prif_coshape prif_coshape proc~prif_coshape->proc~unimplemented proc~prif_lock prif_lock proc~prif_lock->proc~unimplemented proc~prif_get_strided prif_get_strided proc~prif_get_strided->proc~unimplemented proc~prif_sync_images prif_sync_images proc~prif_sync_images->proc~unimplemented proc~prif_atomic_add_indirect prif_atomic_add_indirect proc~prif_atomic_add_indirect->proc~unimplemented proc~prif_atomic_fetch_or_indirect prif_atomic_fetch_or_indirect proc~prif_atomic_fetch_or_indirect->proc~unimplemented interface~prif_co_reduce->proc~prif_co_reduce proc~prif_put_with_notify_indirect prif_put_with_notify_indirect proc~prif_put_with_notify_indirect->proc~unimplemented proc~prif_atomic_fetch_add prif_atomic_fetch_add proc~prif_atomic_fetch_add->proc~unimplemented proc~prif_change_team prif_change_team proc~prif_change_team->proc~unimplemented proc~prif_event_wait prif_event_wait proc~prif_event_wait->proc~unimplemented proc~prif_image_status prif_image_status proc~prif_image_status->proc~unimplemented proc~prif_put_strided_indirect_with_notify prif_put_strided_indirect_with_notify proc~prif_put_strided_indirect_with_notify->proc~unimplemented proc~prif_this_image_with_dim prif_this_image_with_dim proc~prif_this_image_with_dim->proc~unimplemented proc~prif_atomic_cas_logical_indirect prif_atomic_cas_logical_indirect proc~prif_atomic_cas_logical_indirect->proc~unimplemented proc~prif_atomic_ref_int_indirect prif_atomic_ref_int_indirect proc~prif_atomic_ref_int_indirect->proc~unimplemented proc~prif_critical prif_critical proc~prif_critical->proc~unimplemented proc~prif_lock_indirect prif_lock_indirect proc~prif_lock_indirect->proc~unimplemented proc~prif_end_critical prif_end_critical proc~prif_end_critical->proc~unimplemented proc~prif_get_strided_indirect prif_get_strided_indirect proc~prif_get_strided_indirect->proc~unimplemented proc~prif_sync_memory prif_sync_memory proc~prif_sync_memory->proc~unimplemented proc~prif_atomic_and prif_atomic_and proc~prif_atomic_and->proc~unimplemented proc~prif_atomic_fetch_xor prif_atomic_fetch_xor proc~prif_atomic_fetch_xor->proc~unimplemented proc~prif_set_context_data prif_set_context_data proc~prif_set_context_data->proc~unimplemented proc~prif_atomic_fetch_add_indirect prif_atomic_fetch_add_indirect proc~prif_atomic_fetch_add_indirect->proc~unimplemented proc~prif_put_indirect_with_notify prif_put_indirect_with_notify proc~prif_put_indirect_with_notify->proc~unimplemented interface~assert->proc~assert proc~prif_fail_image prif_fail_image proc~prif_fail_image->proc~unimplemented proc~prif_put_strided_indirect_with_notify_indirect prif_put_strided_indirect_with_notify_indirect proc~prif_put_strided_indirect_with_notify_indirect->proc~unimplemented proc~prif_ucobound_no_dim prif_ucobound_no_dim proc~prif_ucobound_no_dim->proc~unimplemented interface~prif_size_bytes prif_size_bytes interface~prif_size_bytes->proc~prif_size_bytes interface~prif_atomic_fetch_and prif_atomic_fetch_and interface~prif_atomic_fetch_and->proc~prif_atomic_fetch_and interface~prif_failed_images prif_failed_images interface~prif_failed_images->proc~prif_failed_images interface~prif_put_strided_with_notify prif_put_strided_with_notify interface~prif_put_strided_with_notify->proc~prif_put_strided_with_notify interface~prif_ucobound_with_dim prif_ucobound_with_dim interface~prif_ucobound_with_dim->proc~prif_ucobound_with_dim interface~prif_lcobound_no_dim prif_lcobound_no_dim interface~prif_lcobound_no_dim->proc~prif_lcobound_no_dim interface~prif_atomic_define_int_indirect prif_atomic_define_int_indirect interface~prif_atomic_define_int_indirect->proc~prif_atomic_define_int_indirect interface~prif_atomic_ref_logical_indirect prif_atomic_ref_logical_indirect interface~prif_atomic_ref_logical_indirect->proc~prif_atomic_ref_logical_indirect interface~prif_num_images_with_team prif_num_images_with_team interface~prif_num_images_with_team->proc~prif_num_images_with_team interface~prif_event_post prif_event_post interface~prif_event_post->proc~prif_event_post interface~prif_put_indirect_with_notify_indirect prif_put_indirect_with_notify_indirect interface~prif_put_indirect_with_notify_indirect->proc~prif_put_indirect_with_notify_indirect interface~prif_team_number prif_team_number interface~prif_team_number->proc~prif_team_number interface~prif_atomic_cas_int prif_atomic_cas_int interface~prif_atomic_cas_int->proc~prif_atomic_cas_int interface~prif_atomic_or prif_atomic_or interface~prif_atomic_or->proc~prif_atomic_or interface~prif_atomic_fetch_and_indirect prif_atomic_fetch_and_indirect interface~prif_atomic_fetch_and_indirect->proc~prif_atomic_fetch_and_indirect interface~prif_alias_destroy prif_alias_destroy interface~prif_alias_destroy->proc~prif_alias_destroy interface~prif_form_team prif_form_team interface~prif_form_team->proc~prif_form_team interface~prif_put_strided_with_notify_indirect prif_put_strided_with_notify_indirect interface~prif_put_strided_with_notify_indirect->proc~prif_put_strided_with_notify_indirect interface~prif_unlock prif_unlock interface~prif_unlock->proc~prif_unlock interface~prif_num_images_with_team_number prif_num_images_with_team_number interface~prif_num_images_with_team_number->proc~prif_num_images_with_team_number interface~prif_atomic_define_logical prif_atomic_define_logical interface~prif_atomic_define_logical->proc~prif_atomic_define_logical interface~prif_atomic_xor prif_atomic_xor interface~prif_atomic_xor->proc~prif_atomic_xor interface~prif_event_post_indirect prif_event_post_indirect interface~prif_event_post_indirect->proc~prif_event_post_indirect interface~prif_image_index_with_team prif_image_index_with_team interface~prif_image_index_with_team->proc~prif_image_index_with_team interface~prif_put_strided prif_put_strided interface~prif_put_strided->proc~prif_put_strided interface~prif_atomic_cas_int_indirect prif_atomic_cas_int_indirect interface~prif_atomic_cas_int_indirect->proc~prif_atomic_cas_int_indirect interface~prif_atomic_or_indirect prif_atomic_or_indirect interface~prif_atomic_or_indirect->proc~prif_atomic_or_indirect interface~prif_lcobound_with_dim prif_lcobound_with_dim interface~prif_lcobound_with_dim->proc~prif_lcobound_with_dim interface~prif_stopped_images prif_stopped_images interface~prif_stopped_images->proc~prif_stopped_images interface~prif_end_critical prif_end_critical interface~prif_end_critical->proc~prif_end_critical interface~prif_atomic_fetch_or prif_atomic_fetch_or interface~prif_atomic_fetch_or->proc~prif_atomic_fetch_or interface~prif_put_with_notify prif_put_with_notify interface~prif_put_with_notify->proc~prif_put_with_notify interface~prif_unlock_indirect prif_unlock_indirect interface~prif_unlock_indirect->proc~prif_unlock_indirect interface~prif_coshape prif_coshape interface~prif_coshape->proc~prif_coshape interface~prif_atomic_define_logical_indirect prif_atomic_define_logical_indirect interface~prif_atomic_define_logical_indirect->proc~prif_atomic_define_logical_indirect interface~prif_atomic_xor_indirect prif_atomic_xor_indirect interface~prif_atomic_xor_indirect->proc~prif_atomic_xor_indirect interface~prif_alias_create prif_alias_create interface~prif_alias_create->proc~prif_alias_create interface~prif_event_query prif_event_query interface~prif_event_query->proc~prif_event_query interface~prif_image_index_with_team_number prif_image_index_with_team_number interface~prif_image_index_with_team_number->proc~prif_image_index_with_team_number interface~prif_put_strided_indirect prif_put_strided_indirect interface~prif_put_strided_indirect->proc~prif_put_strided_indirect interface~prif_this_image_with_coarray prif_this_image_with_coarray interface~prif_this_image_with_coarray->proc~prif_this_image_with_coarray interface~prif_atomic_cas_logical prif_atomic_cas_logical interface~prif_atomic_cas_logical->proc~prif_atomic_cas_logical interface~prif_atomic_ref_int prif_atomic_ref_int interface~prif_atomic_ref_int->proc~prif_atomic_ref_int interface~prif_lock prif_lock interface~prif_lock->proc~prif_lock interface~prif_get_strided prif_get_strided interface~prif_get_strided->proc~prif_get_strided interface~prif_sync_images prif_sync_images interface~prif_sync_images->proc~prif_sync_images interface~prif_atomic_add_indirect prif_atomic_add_indirect interface~prif_atomic_add_indirect->proc~prif_atomic_add_indirect interface~prif_atomic_fetch_or_indirect prif_atomic_fetch_or_indirect interface~prif_atomic_fetch_or_indirect->proc~prif_atomic_fetch_or_indirect interface~prif_get_context_data prif_get_context_data interface~prif_get_context_data->proc~prif_get_context_data interface~prif_put_with_notify_indirect prif_put_with_notify_indirect interface~prif_put_with_notify_indirect->proc~prif_put_with_notify_indirect interface~prif_atomic_add prif_atomic_add interface~prif_atomic_add->proc~prif_atomic_add interface~prif_atomic_fetch_add prif_atomic_fetch_add interface~prif_atomic_fetch_add->proc~prif_atomic_fetch_add interface~prif_change_team prif_change_team interface~prif_change_team->proc~prif_change_team interface~prif_put_indirect_with_notify prif_put_indirect_with_notify interface~prif_put_indirect_with_notify->proc~prif_put_indirect_with_notify interface~prif_event_wait prif_event_wait interface~prif_event_wait->proc~prif_event_wait interface~prif_image_status prif_image_status interface~prif_image_status->proc~prif_image_status interface~prif_put_strided_indirect_with_notify prif_put_strided_indirect_with_notify interface~prif_put_strided_indirect_with_notify->proc~prif_put_strided_indirect_with_notify interface~prif_this_image_with_dim prif_this_image_with_dim interface~prif_this_image_with_dim->proc~prif_this_image_with_dim proc~base_pointer base_pointer proc~base_pointer->interface~assert interface~prif_atomic_cas_logical_indirect prif_atomic_cas_logical_indirect interface~prif_atomic_cas_logical_indirect->proc~prif_atomic_cas_logical_indirect interface~prif_atomic_ref_int_indirect prif_atomic_ref_int_indirect interface~prif_atomic_ref_int_indirect->proc~prif_atomic_ref_int_indirect interface~prif_critical prif_critical interface~prif_critical->proc~prif_critical interface~prif_lock_indirect prif_lock_indirect interface~prif_lock_indirect->proc~prif_lock_indirect interface~prif_get_strided_indirect prif_get_strided_indirect interface~prif_get_strided_indirect->proc~prif_get_strided_indirect interface~prif_sync_memory prif_sync_memory interface~prif_sync_memory->proc~prif_sync_memory interface~prif_atomic_and prif_atomic_and interface~prif_atomic_and->proc~prif_atomic_and interface~prif_atomic_fetch_xor prif_atomic_fetch_xor interface~prif_atomic_fetch_xor->proc~prif_atomic_fetch_xor interface~prif_set_context_data prif_set_context_data interface~prif_set_context_data->proc~prif_set_context_data interface~prif_atomic_fetch_add_indirect prif_atomic_fetch_add_indirect interface~prif_atomic_fetch_add_indirect->proc~prif_atomic_fetch_add_indirect interface~prif_fail_image prif_fail_image interface~prif_fail_image->proc~prif_fail_image interface~prif_put_strided_indirect_with_notify_indirect prif_put_strided_indirect_with_notify_indirect interface~prif_put_strided_indirect_with_notify_indirect->proc~prif_put_strided_indirect_with_notify_indirect interface~prif_ucobound_no_dim prif_ucobound_no_dim interface~prif_ucobound_no_dim->proc~prif_ucobound_no_dim interface~prif_atomic_define_int prif_atomic_define_int interface~prif_atomic_define_int->proc~prif_atomic_define_int interface~prif_notify_wait prif_notify_wait interface~prif_notify_wait->proc~prif_notify_wait interface~prif_atomic_ref_logical prif_atomic_ref_logical interface~prif_atomic_ref_logical->proc~prif_atomic_ref_logical interface~prif_get_team prif_get_team interface~prif_get_team->proc~prif_get_team interface~prif_end_team prif_end_team interface~prif_end_team->proc~prif_end_team interface~prif_sync_team prif_sync_team interface~prif_sync_team->proc~prif_sync_team interface~prif_atomic_and_indirect prif_atomic_and_indirect interface~prif_atomic_and_indirect->proc~prif_atomic_and_indirect interface~prif_atomic_fetch_xor_indirect prif_atomic_fetch_xor_indirect interface~prif_atomic_fetch_xor_indirect->proc~prif_atomic_fetch_xor_indirect proc~prif_get prif_get proc~prif_get->proc~base_pointer proc~prif_put prif_put proc~prif_put->proc~base_pointer interface~prif_get prif_get interface~prif_get->proc~prif_get interface~prif_put prif_put interface~prif_put->proc~prif_put Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public pure module module subroutine prif_error_stop(quiet, stop_code_int, stop_code_char) Implementation → Arguments Type Intent Optional Attributes Name logical(kind=c_bool), intent(in) :: quiet integer(kind=c_int), intent(in), optional :: stop_code_int character(len=*), intent(in), optional :: stop_code_char","tags":"","loc":"interface/prif_error_stop.html"},{"title":"prif_event_post – Caffeine","text":"interface Calls interface~~prif_event_post~~CallsGraph interface~prif_event_post prif_event_post proc~prif_event_post prif_event_post interface~prif_event_post->proc~prif_event_post proc~unimplemented unimplemented proc~prif_event_post->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_event_post(image_num, coarray_handle, offset, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_event_post.html"},{"title":"prif_event_post_indirect – Caffeine","text":"interface Calls interface~~prif_event_post_indirect~~CallsGraph interface~prif_event_post_indirect prif_event_post_indirect proc~prif_event_post_indirect prif_event_post_indirect interface~prif_event_post_indirect->proc~prif_event_post_indirect proc~unimplemented unimplemented proc~prif_event_post_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_event_post_indirect(image_num, event_var_ptr, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: event_var_ptr integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_event_post_indirect.html"},{"title":"prif_event_query – Caffeine","text":"interface Calls interface~~prif_event_query~~CallsGraph interface~prif_event_query prif_event_query proc~prif_event_query prif_event_query interface~prif_event_query->proc~prif_event_query proc~unimplemented unimplemented proc~prif_event_query->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_event_query(event_var_ptr, count, stat) Implementation → Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in) :: event_var_ptr integer(kind=c_intmax_t), intent(out) :: count integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"interface/prif_event_query.html"},{"title":"prif_event_wait – Caffeine","text":"interface Calls interface~~prif_event_wait~~CallsGraph interface~prif_event_wait prif_event_wait proc~prif_event_wait prif_event_wait interface~prif_event_wait->proc~prif_event_wait proc~unimplemented unimplemented proc~prif_event_wait->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_event_wait(event_var_ptr, until_count, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in) :: event_var_ptr integer(kind=c_intmax_t), intent(in), optional :: until_count integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_event_wait.html"},{"title":"prif_fail_image – Caffeine","text":"interface Calls interface~~prif_fail_image~~CallsGraph interface~prif_fail_image prif_fail_image proc~prif_fail_image prif_fail_image interface~prif_fail_image->proc~prif_fail_image proc~unimplemented unimplemented proc~prif_fail_image->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_fail_image() Implementation → Arguments None","tags":"","loc":"interface/prif_fail_image.html"},{"title":"prif_failed_images – Caffeine","text":"interface Calls interface~~prif_failed_images~~CallsGraph interface~prif_failed_images prif_failed_images proc~prif_failed_images prif_failed_images interface~prif_failed_images->proc~prif_failed_images proc~unimplemented unimplemented proc~prif_failed_images->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_failed_images(team, failed_images) Implementation → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in), optional :: team integer(kind=c_int), intent(out), allocatable :: failed_images (:)","tags":"","loc":"interface/prif_failed_images.html"},{"title":"prif_form_team – Caffeine","text":"interface Calls interface~~prif_form_team~~CallsGraph interface~prif_form_team prif_form_team proc~prif_form_team prif_form_team interface~prif_form_team->proc~prif_form_team proc~unimplemented unimplemented proc~prif_form_team->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_form_team(team_number, team, new_index, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_intmax_t), intent(in) :: team_number type( prif_team_type ), intent(out) :: team integer(kind=c_int), intent(in), optional :: new_index integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_form_team.html"},{"title":"prif_get – Caffeine","text":"interface Calls interface~~prif_get~~CallsGraph interface~prif_get prif_get proc~prif_get prif_get interface~prif_get->proc~prif_get proc~base_pointer base_pointer proc~prif_get->proc~base_pointer interface~prif_get_indirect prif_get_indirect proc~prif_get->interface~prif_get_indirect interface~prif_num_images prif_num_images proc~base_pointer->interface~prif_num_images interface~caf_convert_base_addr caf_convert_base_addr proc~base_pointer->interface~caf_convert_base_addr interface~assert assert proc~base_pointer->interface~assert proc~prif_get_indirect prif_get_indirect interface~prif_get_indirect->proc~prif_get_indirect proc~prif_num_images prif_num_images interface~prif_num_images->proc~prif_num_images interface~caf_get caf_get proc~prif_get_indirect->interface~caf_get proc~assert assert interface~assert->proc~assert interface~caf_num_images caf_num_images proc~prif_num_images->interface~caf_num_images interface~prif_error_stop prif_error_stop proc~assert->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_get(image_num, coarray_handle, offset, current_image_buffer, size_in_bytes, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_size_t), intent(in) :: size_in_bytes integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_get.html"},{"title":"prif_get_context_data – Caffeine","text":"interface Calls interface~~prif_get_context_data~~CallsGraph interface~prif_get_context_data prif_get_context_data proc~prif_get_context_data prif_get_context_data interface~prif_get_context_data->proc~prif_get_context_data proc~unimplemented unimplemented proc~prif_get_context_data->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_get_context_data(coarray_handle, context_data) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle type(c_ptr), intent(out) :: context_data","tags":"","loc":"interface/prif_get_context_data.html"},{"title":"prif_get_indirect – Caffeine","text":"interface Calls interface~~prif_get_indirect~~CallsGraph interface~prif_get_indirect prif_get_indirect proc~prif_get_indirect prif_get_indirect interface~prif_get_indirect->proc~prif_get_indirect interface~caf_get caf_get proc~prif_get_indirect->interface~caf_get Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by interface~~prif_get_indirect~~CalledByGraph interface~prif_get_indirect prif_get_indirect proc~prif_get prif_get proc~prif_get->interface~prif_get_indirect interface~prif_get prif_get interface~prif_get->proc~prif_get Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_get_indirect(image_num, remote_ptr, current_image_buffer, size_in_bytes, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: remote_ptr type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_size_t), intent(in) :: size_in_bytes integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_get_indirect.html"},{"title":"prif_get_strided – Caffeine","text":"interface Calls interface~~prif_get_strided~~CallsGraph interface~prif_get_strided prif_get_strided proc~prif_get_strided prif_get_strided interface~prif_get_strided->proc~prif_get_strided proc~unimplemented unimplemented proc~prif_get_strided->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_get_strided(image_num, coarray_handle, offset, remote_stride, current_image_buffer, current_image_stride, element_size, extent, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=c_ptrdiff_t), intent(in) :: remote_stride (:) type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_ptrdiff_t), intent(in) :: current_image_stride (:) integer(kind=c_size_t), intent(in) :: element_size integer(kind=c_size_t), intent(in) :: extent (:) integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_get_strided.html"},{"title":"prif_get_strided_indirect – Caffeine","text":"interface Calls interface~~prif_get_strided_indirect~~CallsGraph interface~prif_get_strided_indirect prif_get_strided_indirect proc~prif_get_strided_indirect prif_get_strided_indirect interface~prif_get_strided_indirect->proc~prif_get_strided_indirect proc~unimplemented unimplemented proc~prif_get_strided_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_get_strided_indirect(image_num, remote_ptr, remote_stride, current_image_buffer, current_image_stride, element_size, extent, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: remote_ptr integer(kind=c_ptrdiff_t), intent(in) :: remote_stride (:) type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_ptrdiff_t), intent(in) :: current_image_stride (:) integer(kind=c_size_t), intent(in) :: element_size integer(kind=c_size_t), intent(in) :: extent (:) integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_get_strided_indirect.html"},{"title":"prif_get_team – Caffeine","text":"interface Calls interface~~prif_get_team~~CallsGraph interface~prif_get_team prif_get_team proc~prif_get_team prif_get_team interface~prif_get_team->proc~prif_get_team proc~unimplemented unimplemented proc~prif_get_team->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_get_team(level, team) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in), optional :: level type( prif_team_type ), intent(out) :: team","tags":"","loc":"interface/prif_get_team.html"},{"title":"prif_image_index – Caffeine","text":"interface Calls interface~~prif_image_index~~CallsGraph interface~prif_image_index prif_image_index proc~prif_image_index prif_image_index interface~prif_image_index->proc~prif_image_index interface~prif_num_images prif_num_images proc~prif_image_index->interface~prif_num_images proc~prif_num_images prif_num_images interface~prif_num_images->proc~prif_num_images interface~caf_num_images caf_num_images proc~prif_num_images->interface~caf_num_images Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_image_index(coarray_handle, sub, image_index) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_intmax_t), intent(in) :: sub (:) integer(kind=c_int), intent(out) :: image_index","tags":"","loc":"interface/prif_image_index.html"},{"title":"prif_image_index_with_team – Caffeine","text":"interface Calls interface~~prif_image_index_with_team~~CallsGraph interface~prif_image_index_with_team prif_image_index_with_team proc~prif_image_index_with_team prif_image_index_with_team interface~prif_image_index_with_team->proc~prif_image_index_with_team proc~unimplemented unimplemented proc~prif_image_index_with_team->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_image_index_with_team(coarray_handle, sub, team, image_index) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_intmax_t), intent(in) :: sub (:) type( prif_team_type ), intent(in) :: team integer(kind=c_int), intent(out) :: image_index","tags":"","loc":"interface/prif_image_index_with_team.html"},{"title":"prif_image_index_with_team_number – Caffeine","text":"interface Calls interface~~prif_image_index_with_team_number~~CallsGraph interface~prif_image_index_with_team_number prif_image_index_with_team_number proc~prif_image_index_with_team_number prif_image_index_with_team_number interface~prif_image_index_with_team_number->proc~prif_image_index_with_team_number proc~unimplemented unimplemented proc~prif_image_index_with_team_number->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_image_index_with_team_number(coarray_handle, sub, team_number, image_index) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_intmax_t), intent(in) :: sub (:) integer(kind=c_int), intent(in) :: team_number integer(kind=c_int), intent(out) :: image_index","tags":"","loc":"interface/prif_image_index_with_team_number.html"},{"title":"prif_image_status – Caffeine","text":"interface Calls interface~~prif_image_status~~CallsGraph interface~prif_image_status prif_image_status proc~prif_image_status prif_image_status interface~prif_image_status->proc~prif_image_status proc~unimplemented unimplemented proc~prif_image_status->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public impure elemental module module subroutine prif_image_status(image, team, image_status) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image type( prif_team_type ), intent(in), optional :: team integer(kind=c_int), intent(out) :: image_status","tags":"","loc":"interface/prif_image_status.html"},{"title":"prif_init – Caffeine","text":"interface Calls interface~~prif_init~~CallsGraph interface~prif_init prif_init proc~prif_init prif_init interface~prif_init->proc~prif_init interface~caf_caffeinate caf_caffeinate proc~prif_init->interface~caf_caffeinate Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_init(stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(out) :: stat","tags":"","loc":"interface/prif_init.html"},{"title":"prif_lcobound_no_dim – Caffeine","text":"interface Calls interface~~prif_lcobound_no_dim~~CallsGraph interface~prif_lcobound_no_dim prif_lcobound_no_dim proc~prif_lcobound_no_dim prif_lcobound_no_dim interface~prif_lcobound_no_dim->proc~prif_lcobound_no_dim proc~unimplemented unimplemented proc~prif_lcobound_no_dim->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_lcobound_no_dim(coarray_handle, lcobounds) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_intmax_t), intent(out) :: lcobounds (:)","tags":"","loc":"interface/prif_lcobound_no_dim.html"},{"title":"prif_lcobound_with_dim – Caffeine","text":"interface Calls interface~~prif_lcobound_with_dim~~CallsGraph interface~prif_lcobound_with_dim prif_lcobound_with_dim proc~prif_lcobound_with_dim prif_lcobound_with_dim interface~prif_lcobound_with_dim->proc~prif_lcobound_with_dim proc~unimplemented unimplemented proc~prif_lcobound_with_dim->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_lcobound_with_dim(coarray_handle, dim, lcobound) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_int), intent(in) :: dim integer(kind=c_intmax_t), intent(out) :: lcobound","tags":"","loc":"interface/prif_lcobound_with_dim.html"},{"title":"prif_lock – Caffeine","text":"interface Calls interface~~prif_lock~~CallsGraph interface~prif_lock prif_lock proc~prif_lock prif_lock interface~prif_lock->proc~prif_lock proc~unimplemented unimplemented proc~prif_lock->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_lock(image_num, coarray_handle, offset, acquired_lock, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset logical(kind=c_bool), intent(out), optional :: acquired_lock integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_lock.html"},{"title":"prif_lock_indirect – Caffeine","text":"interface Calls interface~~prif_lock_indirect~~CallsGraph interface~prif_lock_indirect prif_lock_indirect proc~prif_lock_indirect prif_lock_indirect interface~prif_lock_indirect->proc~prif_lock_indirect proc~unimplemented unimplemented proc~prif_lock_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_lock_indirect(image_num, lock_var_ptr, acquired_lock, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: lock_var_ptr logical(kind=c_bool), intent(out), optional :: acquired_lock integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_lock_indirect.html"},{"title":"prif_notify_wait – Caffeine","text":"interface Calls interface~~prif_notify_wait~~CallsGraph interface~prif_notify_wait prif_notify_wait proc~prif_notify_wait prif_notify_wait interface~prif_notify_wait->proc~prif_notify_wait proc~unimplemented unimplemented proc~prif_notify_wait->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_notify_wait(notify_var_ptr, until_count, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in) :: notify_var_ptr integer(kind=c_intmax_t), intent(in), optional :: until_count integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_notify_wait.html"},{"title":"prif_num_images – Caffeine","text":"interface Calls interface~~prif_num_images~~CallsGraph interface~prif_num_images prif_num_images proc~prif_num_images prif_num_images interface~prif_num_images->proc~prif_num_images interface~caf_num_images caf_num_images proc~prif_num_images->interface~caf_num_images Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by interface~~prif_num_images~~CalledByGraph interface~prif_num_images prif_num_images proc~base_pointer base_pointer proc~base_pointer->interface~prif_num_images proc~prif_image_index prif_image_index proc~prif_image_index->interface~prif_num_images proc~prif_get prif_get proc~prif_get->proc~base_pointer proc~prif_put prif_put proc~prif_put->proc~base_pointer interface~prif_image_index prif_image_index interface~prif_image_index->proc~prif_image_index interface~prif_get prif_get interface~prif_get->proc~prif_get interface~prif_put prif_put interface~prif_put->proc~prif_put Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_num_images(num_images) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(out) :: num_images","tags":"","loc":"interface/prif_num_images.html"},{"title":"prif_num_images_with_team – Caffeine","text":"interface Calls interface~~prif_num_images_with_team~~CallsGraph interface~prif_num_images_with_team prif_num_images_with_team proc~prif_num_images_with_team prif_num_images_with_team interface~prif_num_images_with_team->proc~prif_num_images_with_team proc~unimplemented unimplemented proc~prif_num_images_with_team->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_num_images_with_team(team, num_images) Implementation → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in) :: team integer(kind=c_int), intent(out) :: num_images","tags":"","loc":"interface/prif_num_images_with_team.html"},{"title":"prif_num_images_with_team_number – Caffeine","text":"interface Calls interface~~prif_num_images_with_team_number~~CallsGraph interface~prif_num_images_with_team_number prif_num_images_with_team_number proc~prif_num_images_with_team_number prif_num_images_with_team_number interface~prif_num_images_with_team_number->proc~prif_num_images_with_team_number proc~unimplemented unimplemented proc~prif_num_images_with_team_number->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_num_images_with_team_number(team_number, num_images) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_intmax_t), intent(in) :: team_number integer(kind=c_int), intent(out) :: num_images","tags":"","loc":"interface/prif_num_images_with_team_number.html"},{"title":"prif_put – Caffeine","text":"interface Calls interface~~prif_put~~CallsGraph interface~prif_put prif_put proc~prif_put prif_put interface~prif_put->proc~prif_put proc~base_pointer base_pointer proc~prif_put->proc~base_pointer interface~prif_put_indirect prif_put_indirect proc~prif_put->interface~prif_put_indirect interface~prif_num_images prif_num_images proc~base_pointer->interface~prif_num_images interface~caf_convert_base_addr caf_convert_base_addr proc~base_pointer->interface~caf_convert_base_addr interface~assert assert proc~base_pointer->interface~assert proc~prif_put_indirect prif_put_indirect interface~prif_put_indirect->proc~prif_put_indirect proc~prif_num_images prif_num_images interface~prif_num_images->proc~prif_num_images interface~caf_put caf_put proc~prif_put_indirect->interface~caf_put proc~assert assert interface~assert->proc~assert interface~caf_num_images caf_num_images proc~prif_num_images->interface~caf_num_images interface~prif_error_stop prif_error_stop proc~assert->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_put(image_num, coarray_handle, offset, current_image_buffer, size_in_bytes, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_size_t), intent(in) :: size_in_bytes integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_put.html"},{"title":"prif_put_indirect – Caffeine","text":"interface Calls interface~~prif_put_indirect~~CallsGraph interface~prif_put_indirect prif_put_indirect proc~prif_put_indirect prif_put_indirect interface~prif_put_indirect->proc~prif_put_indirect interface~caf_put caf_put proc~prif_put_indirect->interface~caf_put Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by interface~~prif_put_indirect~~CalledByGraph interface~prif_put_indirect prif_put_indirect proc~prif_put prif_put proc~prif_put->interface~prif_put_indirect interface~prif_put prif_put interface~prif_put->proc~prif_put Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_put_indirect(image_num, remote_ptr, current_image_buffer, size_in_bytes, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: remote_ptr type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_size_t), intent(in) :: size_in_bytes integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_put_indirect.html"},{"title":"prif_put_indirect_with_notify – Caffeine","text":"interface Calls interface~~prif_put_indirect_with_notify~~CallsGraph interface~prif_put_indirect_with_notify prif_put_indirect_with_notify proc~prif_put_indirect_with_notify prif_put_indirect_with_notify interface~prif_put_indirect_with_notify->proc~prif_put_indirect_with_notify proc~unimplemented unimplemented proc~prif_put_indirect_with_notify->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_put_indirect_with_notify(image_num, remote_ptr, current_image_buffer, size_in_bytes, notify_coarray_handle, notify_offset, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: remote_ptr type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_size_t), intent(in) :: size_in_bytes type( prif_coarray_handle ), intent(in) :: notify_coarray_handle integer(kind=c_size_t), intent(in) :: notify_offset integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_put_indirect_with_notify.html"},{"title":"prif_put_indirect_with_notify_indirect – Caffeine","text":"interface Calls interface~~prif_put_indirect_with_notify_indirect~~CallsGraph interface~prif_put_indirect_with_notify_indirect prif_put_indirect_with_notify_indirect proc~prif_put_indirect_with_notify_indirect prif_put_indirect_with_notify_indirect interface~prif_put_indirect_with_notify_indirect->proc~prif_put_indirect_with_notify_indirect proc~unimplemented unimplemented proc~prif_put_indirect_with_notify_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_put_indirect_with_notify_indirect(image_num, remote_ptr, current_image_buffer, size_in_bytes, notify_ptr, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: remote_ptr type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_size_t), intent(in) :: size_in_bytes integer(kind=c_intptr_t), intent(in) :: notify_ptr integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_put_indirect_with_notify_indirect.html"},{"title":"prif_put_strided – Caffeine","text":"interface Calls interface~~prif_put_strided~~CallsGraph interface~prif_put_strided prif_put_strided proc~prif_put_strided prif_put_strided interface~prif_put_strided->proc~prif_put_strided proc~unimplemented unimplemented proc~prif_put_strided->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_put_strided(image_num, coarray_handle, offset, remote_stride, current_image_buffer, current_image_stride, element_size, extent, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=c_ptrdiff_t), intent(in) :: remote_stride (:) type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_ptrdiff_t), intent(in) :: current_image_stride (:) integer(kind=c_size_t), intent(in) :: element_size integer(kind=c_size_t), intent(in) :: extent (:) integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_put_strided.html"},{"title":"prif_put_strided_indirect – Caffeine","text":"interface Calls interface~~prif_put_strided_indirect~~CallsGraph interface~prif_put_strided_indirect prif_put_strided_indirect proc~prif_put_strided_indirect prif_put_strided_indirect interface~prif_put_strided_indirect->proc~prif_put_strided_indirect proc~unimplemented unimplemented proc~prif_put_strided_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_put_strided_indirect(image_num, remote_ptr, remote_stride, current_image_buffer, current_image_stride, element_size, extent, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: remote_ptr integer(kind=c_ptrdiff_t), intent(in) :: remote_stride (:) type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_ptrdiff_t), intent(in) :: current_image_stride (:) integer(kind=c_size_t), intent(in) :: element_size integer(kind=c_size_t), intent(in) :: extent (:) integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_put_strided_indirect.html"},{"title":"prif_put_strided_indirect_with_notify – Caffeine","text":"interface Calls interface~~prif_put_strided_indirect_with_notify~~CallsGraph interface~prif_put_strided_indirect_with_notify prif_put_strided_indirect_with_notify proc~prif_put_strided_indirect_with_notify prif_put_strided_indirect_with_notify interface~prif_put_strided_indirect_with_notify->proc~prif_put_strided_indirect_with_notify proc~unimplemented unimplemented proc~prif_put_strided_indirect_with_notify->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_put_strided_indirect_with_notify(image_num, remote_ptr, remote_stride, current_image_buffer, current_image_stride, element_size, extent, notify_coarray_handle, notify_offset, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: remote_ptr integer(kind=c_ptrdiff_t), intent(in) :: remote_stride (:) type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_ptrdiff_t), intent(in) :: current_image_stride (:) integer(kind=c_size_t), intent(in) :: element_size integer(kind=c_size_t), intent(in) :: extent (:) type( prif_coarray_handle ), intent(in) :: notify_coarray_handle integer(kind=c_size_t), intent(in) :: notify_offset integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_put_strided_indirect_with_notify.html"},{"title":"prif_put_strided_indirect_with_notify_indirect – Caffeine","text":"interface Calls interface~~prif_put_strided_indirect_with_notify_indirect~~CallsGraph interface~prif_put_strided_indirect_with_notify_indirect prif_put_strided_indirect_with_notify_indirect proc~prif_put_strided_indirect_with_notify_indirect prif_put_strided_indirect_with_notify_indirect interface~prif_put_strided_indirect_with_notify_indirect->proc~prif_put_strided_indirect_with_notify_indirect proc~unimplemented unimplemented proc~prif_put_strided_indirect_with_notify_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_put_strided_indirect_with_notify_indirect(image_num, remote_ptr, remote_stride, current_image_buffer, current_image_stride, element_size, extent, notify_ptr, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: remote_ptr integer(kind=c_ptrdiff_t), intent(in) :: remote_stride (:) type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_ptrdiff_t), intent(in) :: current_image_stride (:) integer(kind=c_size_t), intent(in) :: element_size integer(kind=c_size_t), intent(in) :: extent (:) integer(kind=c_intptr_t), intent(in) :: notify_ptr integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_put_strided_indirect_with_notify_indirect.html"},{"title":"prif_put_strided_with_notify – Caffeine","text":"interface Calls interface~~prif_put_strided_with_notify~~CallsGraph interface~prif_put_strided_with_notify prif_put_strided_with_notify proc~prif_put_strided_with_notify prif_put_strided_with_notify interface~prif_put_strided_with_notify->proc~prif_put_strided_with_notify proc~unimplemented unimplemented proc~prif_put_strided_with_notify->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_put_strided_with_notify(image_num, coarray_handle, offset, remote_stride, current_image_buffer, current_image_stride, element_size, extent, notify_coarray_handle, notify_offset, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=c_ptrdiff_t), intent(in) :: remote_stride (:) type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_ptrdiff_t), intent(in) :: current_image_stride (:) integer(kind=c_size_t), intent(in) :: element_size integer(kind=c_size_t), intent(in) :: extent (:) type( prif_coarray_handle ), intent(in) :: notify_coarray_handle integer(kind=c_size_t), intent(in) :: notify_offset integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_put_strided_with_notify.html"},{"title":"prif_put_strided_with_notify_indirect – Caffeine","text":"interface Calls interface~~prif_put_strided_with_notify_indirect~~CallsGraph interface~prif_put_strided_with_notify_indirect prif_put_strided_with_notify_indirect proc~prif_put_strided_with_notify_indirect prif_put_strided_with_notify_indirect interface~prif_put_strided_with_notify_indirect->proc~prif_put_strided_with_notify_indirect proc~unimplemented unimplemented proc~prif_put_strided_with_notify_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_put_strided_with_notify_indirect(image_num, coarray_handle, offset, remote_stride, current_image_buffer, current_image_stride, element_size, extent, notify_ptr, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=c_ptrdiff_t), intent(in) :: remote_stride (:) type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_ptrdiff_t), intent(in) :: current_image_stride (:) integer(kind=c_size_t), intent(in) :: element_size integer(kind=c_size_t), intent(in) :: extent (:) integer(kind=c_intptr_t), intent(in) :: notify_ptr integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_put_strided_with_notify_indirect.html"},{"title":"prif_put_with_notify – Caffeine","text":"interface Calls interface~~prif_put_with_notify~~CallsGraph interface~prif_put_with_notify prif_put_with_notify proc~prif_put_with_notify prif_put_with_notify interface~prif_put_with_notify->proc~prif_put_with_notify proc~unimplemented unimplemented proc~prif_put_with_notify->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_put_with_notify(image_num, coarray_handle, offset, current_image_buffer, size_in_bytes, notify_coarray_handle, notify_offset, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_size_t), intent(in) :: size_in_bytes type( prif_coarray_handle ), intent(in) :: notify_coarray_handle integer(kind=c_size_t), intent(in) :: notify_offset integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_put_with_notify.html"},{"title":"prif_put_with_notify_indirect – Caffeine","text":"interface Calls interface~~prif_put_with_notify_indirect~~CallsGraph interface~prif_put_with_notify_indirect prif_put_with_notify_indirect proc~prif_put_with_notify_indirect prif_put_with_notify_indirect interface~prif_put_with_notify_indirect->proc~prif_put_with_notify_indirect proc~unimplemented unimplemented proc~prif_put_with_notify_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_put_with_notify_indirect(image_num, coarray_handle, offset, current_image_buffer, size_in_bytes, notify_ptr, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_size_t), intent(in) :: size_in_bytes integer(kind=c_intptr_t), intent(in) :: notify_ptr integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_put_with_notify_indirect.html"},{"title":"prif_set_context_data – Caffeine","text":"interface Calls interface~~prif_set_context_data~~CallsGraph interface~prif_set_context_data prif_set_context_data proc~prif_set_context_data prif_set_context_data interface~prif_set_context_data->proc~prif_set_context_data proc~unimplemented unimplemented proc~prif_set_context_data->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_set_context_data(coarray_handle, context_data) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle type(c_ptr), intent(in) :: context_data","tags":"","loc":"interface/prif_set_context_data.html"},{"title":"prif_size_bytes – Caffeine","text":"interface Calls interface~~prif_size_bytes~~CallsGraph interface~prif_size_bytes prif_size_bytes proc~prif_size_bytes prif_size_bytes interface~prif_size_bytes->proc~prif_size_bytes proc~unimplemented unimplemented proc~prif_size_bytes->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_size_bytes(coarray_handle, data_size) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(out) :: data_size","tags":"","loc":"interface/prif_size_bytes.html"},{"title":"prif_stop – Caffeine","text":"interface Calls interface~~prif_stop~~CallsGraph interface~prif_stop prif_stop proc~prif_stop prif_stop interface~prif_stop->proc~prif_stop Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_stop(quiet, stop_code_int, stop_code_char) Implementation → Arguments Type Intent Optional Attributes Name logical(kind=c_bool), intent(in) :: quiet integer(kind=c_int), intent(in), optional :: stop_code_int character(len=*), intent(in), optional :: stop_code_char","tags":"","loc":"interface/prif_stop.html"},{"title":"prif_stopped_images – Caffeine","text":"interface Calls interface~~prif_stopped_images~~CallsGraph interface~prif_stopped_images prif_stopped_images proc~prif_stopped_images prif_stopped_images interface~prif_stopped_images->proc~prif_stopped_images proc~unimplemented unimplemented proc~prif_stopped_images->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_stopped_images(team, stopped_images) Implementation → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in), optional :: team integer(kind=c_int), intent(out), allocatable :: stopped_images (:)","tags":"","loc":"interface/prif_stopped_images.html"},{"title":"prif_sync_all – Caffeine","text":"interface Calls interface~~prif_sync_all~~CallsGraph interface~prif_sync_all prif_sync_all proc~prif_sync_all prif_sync_all interface~prif_sync_all->proc~prif_sync_all interface~caf_sync_all caf_sync_all proc~prif_sync_all->interface~caf_sync_all Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by interface~~prif_sync_all~~CalledByGraph interface~prif_sync_all prif_sync_all proc~prif_deallocate_coarray prif_deallocate_coarray proc~prif_deallocate_coarray->interface~prif_sync_all interface~prif_deallocate_coarray prif_deallocate_coarray interface~prif_deallocate_coarray->proc~prif_deallocate_coarray Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_sync_all(stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_sync_all.html"},{"title":"prif_sync_images – Caffeine","text":"interface Calls interface~~prif_sync_images~~CallsGraph interface~prif_sync_images prif_sync_images proc~prif_sync_images prif_sync_images interface~prif_sync_images->proc~prif_sync_images proc~unimplemented unimplemented proc~prif_sync_images->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_sync_images(image_set, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in), optional :: image_set (:) integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_sync_images.html"},{"title":"prif_sync_memory – Caffeine","text":"interface Calls interface~~prif_sync_memory~~CallsGraph interface~prif_sync_memory prif_sync_memory proc~prif_sync_memory prif_sync_memory interface~prif_sync_memory->proc~prif_sync_memory proc~unimplemented unimplemented proc~prif_sync_memory->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_sync_memory(stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_sync_memory.html"},{"title":"prif_sync_team – Caffeine","text":"interface Calls interface~~prif_sync_team~~CallsGraph interface~prif_sync_team prif_sync_team proc~prif_sync_team prif_sync_team interface~prif_sync_team->proc~prif_sync_team proc~unimplemented unimplemented proc~prif_sync_team->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_sync_team(team, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in) :: team integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_sync_team.html"},{"title":"prif_team_number – Caffeine","text":"interface Calls interface~~prif_team_number~~CallsGraph interface~prif_team_number prif_team_number proc~prif_team_number prif_team_number interface~prif_team_number->proc~prif_team_number proc~unimplemented unimplemented proc~prif_team_number->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_team_number(team, team_number) Implementation → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in), optional :: team integer(kind=c_intmax_t), intent(out) :: team_number","tags":"","loc":"interface/prif_team_number.html"},{"title":"prif_this_image_no_coarray – Caffeine","text":"interface Calls interface~~prif_this_image_no_coarray~~CallsGraph interface~prif_this_image_no_coarray prif_this_image_no_coarray proc~prif_this_image_no_coarray prif_this_image_no_coarray interface~prif_this_image_no_coarray->proc~prif_this_image_no_coarray interface~caf_this_image caf_this_image proc~prif_this_image_no_coarray->interface~caf_this_image Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_this_image_no_coarray(team, this_image) Implementation → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in), optional :: team integer(kind=c_int), intent(out) :: this_image","tags":"","loc":"interface/prif_this_image_no_coarray.html"},{"title":"prif_this_image_with_coarray – Caffeine","text":"interface Calls interface~~prif_this_image_with_coarray~~CallsGraph interface~prif_this_image_with_coarray prif_this_image_with_coarray proc~prif_this_image_with_coarray prif_this_image_with_coarray interface~prif_this_image_with_coarray->proc~prif_this_image_with_coarray proc~unimplemented unimplemented proc~prif_this_image_with_coarray->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_this_image_with_coarray(coarray_handle, team, cosubscripts) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle type( prif_team_type ), intent(in), optional :: team integer(kind=c_intmax_t), intent(out) :: cosubscripts (:)","tags":"","loc":"interface/prif_this_image_with_coarray.html"},{"title":"prif_this_image_with_dim – Caffeine","text":"interface Calls interface~~prif_this_image_with_dim~~CallsGraph interface~prif_this_image_with_dim prif_this_image_with_dim proc~prif_this_image_with_dim prif_this_image_with_dim interface~prif_this_image_with_dim->proc~prif_this_image_with_dim proc~unimplemented unimplemented proc~prif_this_image_with_dim->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_this_image_with_dim(coarray_handle, dim, team, cosubscript) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_int), intent(in) :: dim type( prif_team_type ), intent(in), optional :: team integer(kind=c_intmax_t), intent(out) :: cosubscript","tags":"","loc":"interface/prif_this_image_with_dim.html"},{"title":"prif_ucobound_no_dim – Caffeine","text":"interface Calls interface~~prif_ucobound_no_dim~~CallsGraph interface~prif_ucobound_no_dim prif_ucobound_no_dim proc~prif_ucobound_no_dim prif_ucobound_no_dim interface~prif_ucobound_no_dim->proc~prif_ucobound_no_dim proc~unimplemented unimplemented proc~prif_ucobound_no_dim->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_ucobound_no_dim(coarray_handle, ucobounds) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_intmax_t), intent(out) :: ucobounds (:)","tags":"","loc":"interface/prif_ucobound_no_dim.html"},{"title":"prif_ucobound_with_dim – Caffeine","text":"interface Calls interface~~prif_ucobound_with_dim~~CallsGraph interface~prif_ucobound_with_dim prif_ucobound_with_dim proc~prif_ucobound_with_dim prif_ucobound_with_dim interface~prif_ucobound_with_dim->proc~prif_ucobound_with_dim proc~unimplemented unimplemented proc~prif_ucobound_with_dim->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_ucobound_with_dim(coarray_handle, dim, ucobound) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_int), intent(in) :: dim integer(kind=c_intmax_t), intent(out) :: ucobound","tags":"","loc":"interface/prif_ucobound_with_dim.html"},{"title":"prif_unlock – Caffeine","text":"interface Calls interface~~prif_unlock~~CallsGraph interface~prif_unlock prif_unlock proc~prif_unlock prif_unlock interface~prif_unlock->proc~prif_unlock proc~unimplemented unimplemented proc~prif_unlock->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_unlock(image_num, coarray_handle, offset, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_unlock.html"},{"title":"prif_unlock_indirect – Caffeine","text":"interface Calls interface~~prif_unlock_indirect~~CallsGraph interface~prif_unlock_indirect prif_unlock_indirect proc~prif_unlock_indirect prif_unlock_indirect interface~prif_unlock_indirect->proc~prif_unlock_indirect proc~unimplemented unimplemented proc~prif_unlock_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_unlock_indirect(image_num, lock_var_ptr, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: lock_var_ptr integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_unlock_indirect.html"},{"title":"add_to_team_list – Caffeine","text":"subroutine add_to_team_list(current_team, coarray_handle) Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(inout) :: current_team type( prif_coarray_handle ), intent(inout) :: coarray_handle Called by proc~~add_to_team_list~~CalledByGraph proc~add_to_team_list add_to_team_list proc~prif_allocate_coarray prif_allocate_coarray proc~prif_allocate_coarray->proc~add_to_team_list interface~prif_allocate_coarray prif_allocate_coarray interface~prif_allocate_coarray->proc~prif_allocate_coarray Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/add_to_team_list.html"},{"title":"remove_from_team_list – Caffeine","text":"subroutine remove_from_team_list(coarray_handle) Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle Called by proc~~remove_from_team_list~~CalledByGraph proc~remove_from_team_list remove_from_team_list proc~prif_deallocate_coarray prif_deallocate_coarray proc~prif_deallocate_coarray->proc~remove_from_team_list interface~prif_deallocate_coarray prif_deallocate_coarray interface~prif_deallocate_coarray->proc~prif_deallocate_coarray Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/remove_from_team_list.html"},{"title":"as_c_ptr – Caffeine","text":"pure function as_c_ptr(i) Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: i Return Value type(c_ptr) Called by proc~~as_c_ptr~~CalledByGraph proc~as_c_ptr as_c_ptr proc~prif_allocate_coarray prif_allocate_coarray proc~prif_allocate_coarray->proc~as_c_ptr interface~prif_allocate_coarray prif_allocate_coarray interface~prif_allocate_coarray->proc~prif_allocate_coarray Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/as_c_ptr.html"},{"title":"as_int – Caffeine","text":"pure function as_int(ptr) Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in) :: ptr Return Value integer(kind=c_intptr_t) Called by proc~~as_int~~CalledByGraph proc~as_int as_int proc~prif_allocate_coarray prif_allocate_coarray proc~prif_allocate_coarray->proc~as_int interface~prif_allocate_coarray prif_allocate_coarray interface~prif_allocate_coarray->proc~prif_allocate_coarray Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/as_int.html"},{"title":"optional_value – Caffeine","text":"pure function optional_value(var) result(c_val) Arguments Type Intent Optional Attributes Name integer, intent(in), optional :: var Return Value integer(kind=c_int) Called by proc~~optional_value~~CalledByGraph proc~optional_value optional_value proc~prif_co_sum prif_co_sum proc~prif_co_sum->proc~optional_value proc~prif_co_max prif_co_max proc~prif_co_max->proc~optional_value interface~prif_co_reduce prif_co_reduce proc~prif_co_max->interface~prif_co_reduce proc~prif_co_reduce prif_co_reduce proc~prif_co_reduce->proc~optional_value proc~prif_co_min prif_co_min proc~prif_co_min->proc~optional_value proc~prif_co_min->interface~prif_co_reduce interface~prif_co_sum prif_co_sum interface~prif_co_sum->proc~prif_co_sum interface~prif_co_max prif_co_max interface~prif_co_max->proc~prif_co_max interface~prif_co_reduce->proc~prif_co_reduce interface~prif_co_min prif_co_min interface~prif_co_min->proc~prif_co_min proc~prif_allocate_coarray prif_allocate_coarray proc~prif_allocate_coarray->interface~prif_co_sum interface~prif_allocate_coarray prif_allocate_coarray interface~prif_allocate_coarray->proc~prif_allocate_coarray Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/optional_value.html"},{"title":"base_pointer – Caffeine","text":"subroutine base_pointer(coarray_handle, image_num, ptr) Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(out) :: ptr Calls proc~~base_pointer~~CallsGraph proc~base_pointer base_pointer interface~prif_num_images prif_num_images proc~base_pointer->interface~prif_num_images interface~caf_convert_base_addr caf_convert_base_addr proc~base_pointer->interface~caf_convert_base_addr interface~assert assert proc~base_pointer->interface~assert proc~prif_num_images prif_num_images interface~prif_num_images->proc~prif_num_images proc~assert assert interface~assert->proc~assert interface~caf_num_images caf_num_images proc~prif_num_images->interface~caf_num_images interface~prif_error_stop prif_error_stop proc~assert->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~base_pointer~~CalledByGraph proc~base_pointer base_pointer proc~prif_get prif_get proc~prif_get->proc~base_pointer proc~prif_put prif_put proc~prif_put->proc~base_pointer interface~prif_get prif_get interface~prif_get->proc~prif_get interface~prif_put prif_put interface~prif_put->proc~prif_put Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/base_pointer.html"},{"title":"unimplemented – Caffeine","text":"subroutine unimplemented(proc_name) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: proc_name Calls proc~~unimplemented~~CallsGraph proc~unimplemented unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~unimplemented~~CalledByGraph proc~unimplemented unimplemented proc~prif_atomic_define_int prif_atomic_define_int proc~prif_atomic_define_int->proc~unimplemented proc~prif_atomic_ref_logical prif_atomic_ref_logical proc~prif_atomic_ref_logical->proc~unimplemented proc~prif_notify_wait prif_notify_wait proc~prif_notify_wait->proc~unimplemented proc~prif_end_team prif_end_team proc~prif_end_team->proc~unimplemented proc~prif_get_team prif_get_team proc~prif_get_team->proc~unimplemented proc~prif_sync_team prif_sync_team proc~prif_sync_team->proc~unimplemented proc~prif_atomic_and_indirect prif_atomic_and_indirect proc~prif_atomic_and_indirect->proc~unimplemented proc~prif_atomic_fetch_xor_indirect prif_atomic_fetch_xor_indirect proc~prif_atomic_fetch_xor_indirect->proc~unimplemented proc~prif_size_bytes prif_size_bytes proc~prif_size_bytes->proc~unimplemented proc~prif_atomic_fetch_and prif_atomic_fetch_and proc~prif_atomic_fetch_and->proc~unimplemented proc~prif_failed_images prif_failed_images proc~prif_failed_images->proc~unimplemented proc~prif_put_strided_with_notify prif_put_strided_with_notify proc~prif_put_strided_with_notify->proc~unimplemented proc~prif_ucobound_with_dim prif_ucobound_with_dim proc~prif_ucobound_with_dim->proc~unimplemented proc~prif_atomic_define_int_indirect prif_atomic_define_int_indirect proc~prif_atomic_define_int_indirect->proc~unimplemented proc~prif_atomic_ref_logical_indirect prif_atomic_ref_logical_indirect proc~prif_atomic_ref_logical_indirect->proc~unimplemented proc~prif_num_images_with_team prif_num_images_with_team proc~prif_num_images_with_team->proc~unimplemented proc~prif_event_post prif_event_post proc~prif_event_post->proc~unimplemented proc~prif_put_indirect_with_notify_indirect prif_put_indirect_with_notify_indirect proc~prif_put_indirect_with_notify_indirect->proc~unimplemented proc~prif_team_number prif_team_number proc~prif_team_number->proc~unimplemented proc~prif_atomic_cas_int prif_atomic_cas_int proc~prif_atomic_cas_int->proc~unimplemented proc~prif_atomic_or prif_atomic_or proc~prif_atomic_or->proc~unimplemented proc~prif_lcobound_no_dim prif_lcobound_no_dim proc~prif_lcobound_no_dim->proc~unimplemented proc~prif_alias_create prif_alias_create proc~prif_alias_create->proc~unimplemented proc~prif_atomic_fetch_and_indirect prif_atomic_fetch_and_indirect proc~prif_atomic_fetch_and_indirect->proc~unimplemented proc~prif_form_team prif_form_team proc~prif_form_team->proc~unimplemented proc~prif_put_strided_with_notify_indirect prif_put_strided_with_notify_indirect proc~prif_put_strided_with_notify_indirect->proc~unimplemented proc~prif_unlock prif_unlock proc~prif_unlock->proc~unimplemented proc~prif_num_images_with_team_number prif_num_images_with_team_number proc~prif_num_images_with_team_number->proc~unimplemented proc~prif_atomic_define_logical prif_atomic_define_logical proc~prif_atomic_define_logical->proc~unimplemented proc~prif_atomic_xor prif_atomic_xor proc~prif_atomic_xor->proc~unimplemented proc~prif_get_context_data prif_get_context_data proc~prif_get_context_data->proc~unimplemented proc~prif_event_post_indirect prif_event_post_indirect proc~prif_event_post_indirect->proc~unimplemented proc~prif_image_index_with_team prif_image_index_with_team proc~prif_image_index_with_team->proc~unimplemented proc~prif_put_strided prif_put_strided proc~prif_put_strided->proc~unimplemented proc~prif_atomic_cas_int_indirect prif_atomic_cas_int_indirect proc~prif_atomic_cas_int_indirect->proc~unimplemented proc~prif_atomic_or_indirect prif_atomic_or_indirect proc~prif_atomic_or_indirect->proc~unimplemented proc~prif_lcobound_with_dim prif_lcobound_with_dim proc~prif_lcobound_with_dim->proc~unimplemented proc~prif_stopped_images prif_stopped_images proc~prif_stopped_images->proc~unimplemented proc~prif_atomic_add prif_atomic_add proc~prif_atomic_add->proc~unimplemented proc~prif_atomic_fetch_or prif_atomic_fetch_or proc~prif_atomic_fetch_or->proc~unimplemented proc~prif_put_with_notify prif_put_with_notify proc~prif_put_with_notify->proc~unimplemented proc~prif_unlock_indirect prif_unlock_indirect proc~prif_unlock_indirect->proc~unimplemented proc~prif_atomic_define_logical_indirect prif_atomic_define_logical_indirect proc~prif_atomic_define_logical_indirect->proc~unimplemented proc~prif_atomic_xor_indirect prif_atomic_xor_indirect proc~prif_atomic_xor_indirect->proc~unimplemented proc~prif_event_query prif_event_query proc~prif_event_query->proc~unimplemented proc~prif_image_index_with_team_number prif_image_index_with_team_number proc~prif_image_index_with_team_number->proc~unimplemented proc~prif_put_strided_indirect prif_put_strided_indirect proc~prif_put_strided_indirect->proc~unimplemented proc~prif_this_image_with_coarray prif_this_image_with_coarray proc~prif_this_image_with_coarray->proc~unimplemented proc~prif_alias_destroy prif_alias_destroy proc~prif_alias_destroy->proc~unimplemented proc~prif_atomic_cas_logical prif_atomic_cas_logical proc~prif_atomic_cas_logical->proc~unimplemented proc~prif_atomic_ref_int prif_atomic_ref_int proc~prif_atomic_ref_int->proc~unimplemented proc~prif_coshape prif_coshape proc~prif_coshape->proc~unimplemented proc~prif_lock prif_lock proc~prif_lock->proc~unimplemented proc~prif_get_strided prif_get_strided proc~prif_get_strided->proc~unimplemented proc~prif_sync_images prif_sync_images proc~prif_sync_images->proc~unimplemented proc~prif_atomic_add_indirect prif_atomic_add_indirect proc~prif_atomic_add_indirect->proc~unimplemented proc~prif_atomic_fetch_or_indirect prif_atomic_fetch_or_indirect proc~prif_atomic_fetch_or_indirect->proc~unimplemented proc~prif_put_with_notify_indirect prif_put_with_notify_indirect proc~prif_put_with_notify_indirect->proc~unimplemented proc~prif_atomic_fetch_add prif_atomic_fetch_add proc~prif_atomic_fetch_add->proc~unimplemented proc~prif_change_team prif_change_team proc~prif_change_team->proc~unimplemented proc~prif_event_wait prif_event_wait proc~prif_event_wait->proc~unimplemented proc~prif_image_status prif_image_status proc~prif_image_status->proc~unimplemented proc~prif_put_strided_indirect_with_notify prif_put_strided_indirect_with_notify proc~prif_put_strided_indirect_with_notify->proc~unimplemented proc~prif_this_image_with_dim prif_this_image_with_dim proc~prif_this_image_with_dim->proc~unimplemented proc~prif_atomic_cas_logical_indirect prif_atomic_cas_logical_indirect proc~prif_atomic_cas_logical_indirect->proc~unimplemented proc~prif_atomic_ref_int_indirect prif_atomic_ref_int_indirect proc~prif_atomic_ref_int_indirect->proc~unimplemented proc~prif_critical prif_critical proc~prif_critical->proc~unimplemented proc~prif_lock_indirect prif_lock_indirect proc~prif_lock_indirect->proc~unimplemented proc~prif_end_critical prif_end_critical proc~prif_end_critical->proc~unimplemented proc~prif_get_strided_indirect prif_get_strided_indirect proc~prif_get_strided_indirect->proc~unimplemented proc~prif_sync_memory prif_sync_memory proc~prif_sync_memory->proc~unimplemented proc~prif_atomic_and prif_atomic_and proc~prif_atomic_and->proc~unimplemented proc~prif_atomic_fetch_xor prif_atomic_fetch_xor proc~prif_atomic_fetch_xor->proc~unimplemented proc~prif_set_context_data prif_set_context_data proc~prif_set_context_data->proc~unimplemented proc~prif_atomic_fetch_add_indirect prif_atomic_fetch_add_indirect proc~prif_atomic_fetch_add_indirect->proc~unimplemented proc~prif_put_indirect_with_notify prif_put_indirect_with_notify proc~prif_put_indirect_with_notify->proc~unimplemented proc~prif_fail_image prif_fail_image proc~prif_fail_image->proc~unimplemented proc~prif_put_strided_indirect_with_notify_indirect prif_put_strided_indirect_with_notify_indirect proc~prif_put_strided_indirect_with_notify_indirect->proc~unimplemented proc~prif_ucobound_no_dim prif_ucobound_no_dim proc~prif_ucobound_no_dim->proc~unimplemented interface~prif_size_bytes prif_size_bytes interface~prif_size_bytes->proc~prif_size_bytes interface~prif_atomic_fetch_and prif_atomic_fetch_and interface~prif_atomic_fetch_and->proc~prif_atomic_fetch_and interface~prif_failed_images prif_failed_images interface~prif_failed_images->proc~prif_failed_images interface~prif_put_strided_with_notify prif_put_strided_with_notify interface~prif_put_strided_with_notify->proc~prif_put_strided_with_notify interface~prif_ucobound_with_dim prif_ucobound_with_dim interface~prif_ucobound_with_dim->proc~prif_ucobound_with_dim interface~prif_lcobound_no_dim prif_lcobound_no_dim interface~prif_lcobound_no_dim->proc~prif_lcobound_no_dim interface~prif_atomic_define_int_indirect prif_atomic_define_int_indirect interface~prif_atomic_define_int_indirect->proc~prif_atomic_define_int_indirect interface~prif_atomic_ref_logical_indirect prif_atomic_ref_logical_indirect interface~prif_atomic_ref_logical_indirect->proc~prif_atomic_ref_logical_indirect interface~prif_num_images_with_team prif_num_images_with_team interface~prif_num_images_with_team->proc~prif_num_images_with_team interface~prif_event_post prif_event_post interface~prif_event_post->proc~prif_event_post interface~prif_put_indirect_with_notify_indirect prif_put_indirect_with_notify_indirect interface~prif_put_indirect_with_notify_indirect->proc~prif_put_indirect_with_notify_indirect interface~prif_team_number prif_team_number interface~prif_team_number->proc~prif_team_number interface~prif_atomic_cas_int prif_atomic_cas_int interface~prif_atomic_cas_int->proc~prif_atomic_cas_int interface~prif_atomic_or prif_atomic_or interface~prif_atomic_or->proc~prif_atomic_or interface~prif_atomic_fetch_and_indirect prif_atomic_fetch_and_indirect interface~prif_atomic_fetch_and_indirect->proc~prif_atomic_fetch_and_indirect interface~prif_alias_destroy prif_alias_destroy interface~prif_alias_destroy->proc~prif_alias_destroy interface~prif_form_team prif_form_team interface~prif_form_team->proc~prif_form_team interface~prif_put_strided_with_notify_indirect prif_put_strided_with_notify_indirect interface~prif_put_strided_with_notify_indirect->proc~prif_put_strided_with_notify_indirect interface~prif_unlock prif_unlock interface~prif_unlock->proc~prif_unlock interface~prif_num_images_with_team_number prif_num_images_with_team_number interface~prif_num_images_with_team_number->proc~prif_num_images_with_team_number interface~prif_atomic_define_logical prif_atomic_define_logical interface~prif_atomic_define_logical->proc~prif_atomic_define_logical interface~prif_atomic_xor prif_atomic_xor interface~prif_atomic_xor->proc~prif_atomic_xor interface~prif_event_post_indirect prif_event_post_indirect interface~prif_event_post_indirect->proc~prif_event_post_indirect interface~prif_image_index_with_team prif_image_index_with_team interface~prif_image_index_with_team->proc~prif_image_index_with_team interface~prif_put_strided prif_put_strided interface~prif_put_strided->proc~prif_put_strided interface~prif_atomic_cas_int_indirect prif_atomic_cas_int_indirect interface~prif_atomic_cas_int_indirect->proc~prif_atomic_cas_int_indirect interface~prif_atomic_or_indirect prif_atomic_or_indirect interface~prif_atomic_or_indirect->proc~prif_atomic_or_indirect interface~prif_lcobound_with_dim prif_lcobound_with_dim interface~prif_lcobound_with_dim->proc~prif_lcobound_with_dim interface~prif_stopped_images prif_stopped_images interface~prif_stopped_images->proc~prif_stopped_images interface~prif_end_critical prif_end_critical interface~prif_end_critical->proc~prif_end_critical interface~prif_atomic_fetch_or prif_atomic_fetch_or interface~prif_atomic_fetch_or->proc~prif_atomic_fetch_or interface~prif_put_with_notify prif_put_with_notify interface~prif_put_with_notify->proc~prif_put_with_notify interface~prif_unlock_indirect prif_unlock_indirect interface~prif_unlock_indirect->proc~prif_unlock_indirect interface~prif_coshape prif_coshape interface~prif_coshape->proc~prif_coshape interface~prif_atomic_define_logical_indirect prif_atomic_define_logical_indirect interface~prif_atomic_define_logical_indirect->proc~prif_atomic_define_logical_indirect interface~prif_atomic_xor_indirect prif_atomic_xor_indirect interface~prif_atomic_xor_indirect->proc~prif_atomic_xor_indirect interface~prif_alias_create prif_alias_create interface~prif_alias_create->proc~prif_alias_create interface~prif_event_query prif_event_query interface~prif_event_query->proc~prif_event_query interface~prif_image_index_with_team_number prif_image_index_with_team_number interface~prif_image_index_with_team_number->proc~prif_image_index_with_team_number interface~prif_put_strided_indirect prif_put_strided_indirect interface~prif_put_strided_indirect->proc~prif_put_strided_indirect interface~prif_this_image_with_coarray prif_this_image_with_coarray interface~prif_this_image_with_coarray->proc~prif_this_image_with_coarray interface~prif_atomic_cas_logical prif_atomic_cas_logical interface~prif_atomic_cas_logical->proc~prif_atomic_cas_logical interface~prif_atomic_ref_int prif_atomic_ref_int interface~prif_atomic_ref_int->proc~prif_atomic_ref_int interface~prif_lock prif_lock interface~prif_lock->proc~prif_lock interface~prif_get_strided prif_get_strided interface~prif_get_strided->proc~prif_get_strided interface~prif_sync_images prif_sync_images interface~prif_sync_images->proc~prif_sync_images interface~prif_atomic_add_indirect prif_atomic_add_indirect interface~prif_atomic_add_indirect->proc~prif_atomic_add_indirect interface~prif_atomic_fetch_or_indirect prif_atomic_fetch_or_indirect interface~prif_atomic_fetch_or_indirect->proc~prif_atomic_fetch_or_indirect interface~prif_get_context_data prif_get_context_data interface~prif_get_context_data->proc~prif_get_context_data interface~prif_put_with_notify_indirect prif_put_with_notify_indirect interface~prif_put_with_notify_indirect->proc~prif_put_with_notify_indirect interface~prif_atomic_add prif_atomic_add interface~prif_atomic_add->proc~prif_atomic_add interface~prif_atomic_fetch_add prif_atomic_fetch_add interface~prif_atomic_fetch_add->proc~prif_atomic_fetch_add interface~prif_change_team prif_change_team interface~prif_change_team->proc~prif_change_team interface~prif_put_indirect_with_notify prif_put_indirect_with_notify interface~prif_put_indirect_with_notify->proc~prif_put_indirect_with_notify interface~prif_event_wait prif_event_wait interface~prif_event_wait->proc~prif_event_wait interface~prif_image_status prif_image_status interface~prif_image_status->proc~prif_image_status interface~prif_put_strided_indirect_with_notify prif_put_strided_indirect_with_notify interface~prif_put_strided_indirect_with_notify->proc~prif_put_strided_indirect_with_notify interface~prif_this_image_with_dim prif_this_image_with_dim interface~prif_this_image_with_dim->proc~prif_this_image_with_dim interface~prif_atomic_cas_logical_indirect prif_atomic_cas_logical_indirect interface~prif_atomic_cas_logical_indirect->proc~prif_atomic_cas_logical_indirect interface~prif_atomic_ref_int_indirect prif_atomic_ref_int_indirect interface~prif_atomic_ref_int_indirect->proc~prif_atomic_ref_int_indirect interface~prif_critical prif_critical interface~prif_critical->proc~prif_critical interface~prif_lock_indirect prif_lock_indirect interface~prif_lock_indirect->proc~prif_lock_indirect interface~prif_get_strided_indirect prif_get_strided_indirect interface~prif_get_strided_indirect->proc~prif_get_strided_indirect interface~prif_sync_memory prif_sync_memory interface~prif_sync_memory->proc~prif_sync_memory interface~prif_atomic_and prif_atomic_and interface~prif_atomic_and->proc~prif_atomic_and interface~prif_atomic_fetch_xor prif_atomic_fetch_xor interface~prif_atomic_fetch_xor->proc~prif_atomic_fetch_xor interface~prif_set_context_data prif_set_context_data interface~prif_set_context_data->proc~prif_set_context_data interface~prif_atomic_fetch_add_indirect prif_atomic_fetch_add_indirect interface~prif_atomic_fetch_add_indirect->proc~prif_atomic_fetch_add_indirect interface~prif_fail_image prif_fail_image interface~prif_fail_image->proc~prif_fail_image interface~prif_put_strided_indirect_with_notify_indirect prif_put_strided_indirect_with_notify_indirect interface~prif_put_strided_indirect_with_notify_indirect->proc~prif_put_strided_indirect_with_notify_indirect interface~prif_ucobound_no_dim prif_ucobound_no_dim interface~prif_ucobound_no_dim->proc~prif_ucobound_no_dim interface~prif_atomic_define_int prif_atomic_define_int interface~prif_atomic_define_int->proc~prif_atomic_define_int interface~prif_notify_wait prif_notify_wait interface~prif_notify_wait->proc~prif_notify_wait interface~prif_atomic_ref_logical prif_atomic_ref_logical interface~prif_atomic_ref_logical->proc~prif_atomic_ref_logical interface~prif_get_team prif_get_team interface~prif_get_team->proc~prif_get_team interface~prif_end_team prif_end_team interface~prif_end_team->proc~prif_end_team interface~prif_sync_team prif_sync_team interface~prif_sync_team->proc~prif_sync_team interface~prif_atomic_and_indirect prif_atomic_and_indirect interface~prif_atomic_and_indirect->proc~prif_atomic_and_indirect interface~prif_atomic_fetch_xor_indirect prif_atomic_fetch_xor_indirect interface~prif_atomic_fetch_xor_indirect->proc~prif_atomic_fetch_xor_indirect Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/unimplemented.html"},{"title":"assert – Caffeine","text":"interface Calls interface~~assert~~CallsGraph interface~assert assert proc~assert assert interface~assert->proc~assert interface~prif_error_stop prif_error_stop proc~assert->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by interface~~assert~~CalledByGraph interface~assert assert proc~prif_co_reduce prif_co_reduce proc~prif_co_reduce->interface~assert proc~base_pointer base_pointer proc~base_pointer->interface~assert interface~prif_co_reduce prif_co_reduce interface~prif_co_reduce->proc~prif_co_reduce proc~prif_get prif_get proc~prif_get->proc~base_pointer proc~prif_put prif_put proc~prif_put->proc~base_pointer proc~prif_co_max prif_co_max proc~prif_co_max->interface~prif_co_reduce interface~prif_get prif_get interface~prif_get->proc~prif_get interface~prif_put prif_put interface~prif_put->proc~prif_put proc~prif_co_min prif_co_min proc~prif_co_min->interface~prif_co_reduce interface~prif_co_max prif_co_max interface~prif_co_max->proc~prif_co_max interface~prif_co_min prif_co_min interface~prif_co_min->proc~prif_co_min Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. pure module module subroutine assert(assertion, description, diagnostics) Implementation → Arguments Type Intent Optional Attributes Name logical, intent(in) :: assertion character(len=*), intent(in) :: description class(*), intent(in), optional :: diagnostics","tags":"","loc":"interface/assert.html"},{"title":"caf_allocate – Caffeine","text":"interface Called by interface~~caf_allocate~~CalledByGraph interface~caf_allocate caf_allocate proc~prif_allocate prif_allocate proc~prif_allocate->interface~caf_allocate proc~prif_allocate_coarray prif_allocate_coarray proc~prif_allocate_coarray->interface~caf_allocate interface~prif_allocate prif_allocate interface~prif_allocate->proc~prif_allocate interface~prif_allocate_coarray prif_allocate_coarray interface~prif_allocate_coarray->proc~prif_allocate_coarray Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. function caf_allocate(mspace, bytes) result(ptr) bind(c) Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in), value :: mspace integer(kind=c_size_t), intent(in), value :: bytes Return Value type(c_ptr)","tags":"","loc":"interface/caf_allocate.html"},{"title":"caf_caffeinate – Caffeine","text":"interface Called by interface~~caf_caffeinate~~CalledByGraph interface~caf_caffeinate caf_caffeinate proc~prif_init prif_init proc~prif_init->interface~caf_caffeinate interface~prif_init prif_init interface~prif_init->proc~prif_init Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. subroutine caf_caffeinate(symmetric_heap, symmetric_heap_start, non_symmetric_heap, initial_team) bind(c) Arguments Type Intent Optional Attributes Name type(c_ptr), intent(out) :: symmetric_heap integer(kind=c_intptr_t), intent(out) :: symmetric_heap_start type(c_ptr), intent(out) :: non_symmetric_heap type(c_ptr), intent(out) :: initial_team","tags":"","loc":"interface/caf_caffeinate.html"},{"title":"caf_co_broadcast – Caffeine","text":"interface Called by interface~~caf_co_broadcast~~CalledByGraph interface~caf_co_broadcast caf_co_broadcast proc~prif_co_broadcast prif_co_broadcast proc~prif_co_broadcast->interface~caf_co_broadcast interface~prif_co_broadcast prif_co_broadcast interface~prif_co_broadcast->proc~prif_co_broadcast Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. subroutine caf_co_broadcast(a, source_image, nelem, team) bind(c) Arguments Type Intent Optional Attributes Name type(*) :: a (..) integer(kind=c_int), value :: source_image integer(kind=c_int), value :: nelem type(c_ptr), value :: team Description void c_co_broadcast(CFI_cdesc_t * a_desc, int source_image, int num_elements, gex_TM_t team);","tags":"","loc":"interface/caf_co_broadcast.html"},{"title":"caf_co_max – Caffeine","text":"interface Called by interface~~caf_co_max~~CalledByGraph interface~caf_co_max caf_co_max proc~prif_co_max prif_co_max proc~prif_co_max->interface~caf_co_max interface~prif_co_max prif_co_max interface~prif_co_max->proc~prif_co_max Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. subroutine caf_co_max(a, result_image, num_elements, team) bind(c) Arguments Type Intent Optional Attributes Name type(*) :: a (..) integer(kind=c_int), value :: result_image integer(kind=c_size_t), value :: num_elements type(c_ptr), value :: team Description void c_co_max(CFI_cdesc_t* a_desc, int result_image, size_t num_elements, gex_TM_t team);","tags":"","loc":"interface/caf_co_max.html"},{"title":"caf_co_min – Caffeine","text":"interface Called by interface~~caf_co_min~~CalledByGraph interface~caf_co_min caf_co_min proc~prif_co_min prif_co_min proc~prif_co_min->interface~caf_co_min interface~prif_co_min prif_co_min interface~prif_co_min->proc~prif_co_min Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. subroutine caf_co_min(a, result_image, num_elements, team) bind(c) Arguments Type Intent Optional Attributes Name type(*) :: a (..) integer(kind=c_int), value :: result_image integer(kind=c_size_t), value :: num_elements type(c_ptr), value :: team Description void c_co_min(CFI_cdesc_t* a_desc, int result_image, size_t num_elements, gex_TM_t team);","tags":"","loc":"interface/caf_co_min.html"},{"title":"caf_co_reduce – Caffeine","text":"interface Called by interface~~caf_co_reduce~~CalledByGraph interface~caf_co_reduce caf_co_reduce proc~prif_co_reduce prif_co_reduce proc~prif_co_reduce->interface~caf_co_reduce interface~prif_co_reduce prif_co_reduce interface~prif_co_reduce->proc~prif_co_reduce proc~prif_co_max prif_co_max proc~prif_co_max->interface~prif_co_reduce proc~prif_co_min prif_co_min proc~prif_co_min->interface~prif_co_reduce interface~prif_co_max prif_co_max interface~prif_co_max->proc~prif_co_max interface~prif_co_min prif_co_min interface~prif_co_min->proc~prif_co_min Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. subroutine caf_co_reduce(a, result_image, num_elements, coll_reducesub, client_data, team) bind(c) Arguments Type Intent Optional Attributes Name type(*) :: a (..) integer(kind=c_int), value :: result_image integer(kind=c_size_t), value :: num_elements type(c_funptr), value :: coll_reducesub type(c_ptr), value :: client_data type(c_ptr), value :: team Description void caf_co_reduce(CFI_cdesc_t a_desc, int result_image, int num_elements, gex_Coll_ReduceFn_t user_op, void* client_data)","tags":"","loc":"interface/caf_co_reduce.html"},{"title":"caf_co_sum – Caffeine","text":"interface Called by interface~~caf_co_sum~~CalledByGraph interface~caf_co_sum caf_co_sum proc~prif_co_sum prif_co_sum proc~prif_co_sum->interface~caf_co_sum interface~prif_co_sum prif_co_sum interface~prif_co_sum->proc~prif_co_sum proc~prif_allocate_coarray prif_allocate_coarray proc~prif_allocate_coarray->interface~prif_co_sum interface~prif_allocate_coarray prif_allocate_coarray interface~prif_allocate_coarray->proc~prif_allocate_coarray Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. subroutine caf_co_sum(a, result_image, num_elements, team) bind(c) Arguments Type Intent Optional Attributes Name type(*) :: a (..) integer(kind=c_int), value :: result_image integer(kind=c_size_t), value :: num_elements type(c_ptr), value :: team Description void c_co_sum(CFI_cdesc_t* a_desc, int result_image, size_t num_elements, gex_TM_t team);","tags":"","loc":"interface/caf_co_sum.html"},{"title":"caf_convert_base_addr – Caffeine","text":"interface Called by interface~~caf_convert_base_addr~~CalledByGraph interface~caf_convert_base_addr caf_convert_base_addr proc~base_pointer base_pointer proc~base_pointer->interface~caf_convert_base_addr proc~prif_get prif_get proc~prif_get->proc~base_pointer proc~prif_put prif_put proc~prif_put->proc~base_pointer interface~prif_get prif_get interface~prif_get->proc~prif_get interface~prif_put prif_put interface~prif_put->proc~prif_put Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. module function caf_convert_base_addr(addr, image) result(ptr) bind(c) Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in), value :: addr integer(kind=c_int), intent(in), value :: image Return Value integer(kind=c_intptr_t)","tags":"","loc":"interface/caf_convert_base_addr.html"},{"title":"caf_deallocate – Caffeine","text":"interface Called by interface~~caf_deallocate~~CalledByGraph interface~caf_deallocate caf_deallocate proc~prif_deallocate prif_deallocate proc~prif_deallocate->interface~caf_deallocate proc~prif_deallocate_coarray prif_deallocate_coarray proc~prif_deallocate_coarray->interface~caf_deallocate interface~prif_deallocate prif_deallocate interface~prif_deallocate->proc~prif_deallocate interface~prif_deallocate_coarray prif_deallocate_coarray interface~prif_deallocate_coarray->proc~prif_deallocate_coarray Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. subroutine caf_deallocate(mspace, mem) bind(c) Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in), value :: mspace type(c_ptr), intent(in), value :: mem","tags":"","loc":"interface/caf_deallocate.html"},{"title":"caf_decaffeinate – Caffeine","text":"interface Called by interface~~caf_decaffeinate~~CalledByGraph interface~caf_decaffeinate caf_decaffeinate proc~inner_caf_error_stop_integer inner_caf_error_stop_integer proc~inner_caf_error_stop_integer->interface~caf_decaffeinate Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. subroutine caf_decaffeinate(exit_code) bind(c) Arguments Type Intent Optional Attributes Name integer(kind=c_int), value :: exit_code Description void c_decaffeinate();","tags":"","loc":"interface/caf_decaffeinate.html"},{"title":"caf_elem_len – Caffeine","text":"interface Called by interface~~caf_elem_len~~CalledByGraph interface~caf_elem_len caf_elem_len proc~prif_co_reduce prif_co_reduce proc~prif_co_reduce->interface~caf_elem_len interface~prif_co_reduce prif_co_reduce interface~prif_co_reduce->proc~prif_co_reduce proc~prif_co_max prif_co_max proc~prif_co_max->interface~prif_co_reduce proc~prif_co_min prif_co_min proc~prif_co_min->interface~prif_co_reduce interface~prif_co_max prif_co_max interface~prif_co_max->proc~prif_co_max interface~prif_co_min prif_co_min interface~prif_co_min->proc~prif_co_min Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. pure function caf_elem_len(a) result(a_elem_len) bind(c) Arguments Type Intent Optional Attributes Name type(*), intent(in) :: a (..) Return Value integer(kind=c_size_t),target Description size_t caf_elem_len(CFI_cdesc_t* a_desc);","tags":"","loc":"interface/caf_elem_len.html"},{"title":"caf_get – Caffeine","text":"interface Called by interface~~caf_get~~CalledByGraph interface~caf_get caf_get proc~prif_get_indirect prif_get_indirect proc~prif_get_indirect->interface~caf_get interface~prif_get_indirect prif_get_indirect interface~prif_get_indirect->proc~prif_get_indirect proc~prif_get prif_get proc~prif_get->interface~prif_get_indirect interface~prif_get prif_get interface~prif_get->proc~prif_get Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. subroutine caf_get(image, dest, src, size) bind(c) Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in), value :: image type(c_ptr), intent(in), value :: dest integer(kind=c_intptr_t), intent(in), value :: src integer(kind=c_size_t), intent(in), value :: size Description void caf_get(int image, void* dest, intptr_t src, size_t size)","tags":"","loc":"interface/caf_get.html"},{"title":"caf_is_f_string – Caffeine","text":"interface Called by interface~~caf_is_f_string~~CalledByGraph interface~caf_is_f_string caf_is_f_string proc~prif_co_max prif_co_max proc~prif_co_max->interface~caf_is_f_string interface~prif_co_reduce prif_co_reduce proc~prif_co_max->interface~prif_co_reduce proc~prif_co_reduce prif_co_reduce proc~prif_co_reduce->interface~caf_is_f_string proc~prif_co_min prif_co_min proc~prif_co_min->interface~caf_is_f_string proc~prif_co_min->interface~prif_co_reduce interface~prif_co_max prif_co_max interface~prif_co_max->proc~prif_co_max interface~prif_co_reduce->proc~prif_co_reduce interface~prif_co_min prif_co_min interface~prif_co_min->proc~prif_co_min Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. pure function caf_is_f_string(a) bind(c) Arguments Type Intent Optional Attributes Name type(*), intent(in) :: a (..) Return Value logical(kind=c_bool) Description bool caf_is_f_string(CFI_cdesc_t* a_desc);","tags":"","loc":"interface/caf_is_f_string.html"},{"title":"caf_num_images – Caffeine","text":"interface Called by interface~~caf_num_images~~CalledByGraph interface~caf_num_images caf_num_images proc~prif_num_images prif_num_images proc~prif_num_images->interface~caf_num_images interface~prif_num_images prif_num_images interface~prif_num_images->proc~prif_num_images proc~base_pointer base_pointer proc~base_pointer->interface~prif_num_images proc~prif_image_index prif_image_index proc~prif_image_index->interface~prif_num_images proc~prif_get prif_get proc~prif_get->proc~base_pointer proc~prif_put prif_put proc~prif_put->proc~base_pointer interface~prif_image_index prif_image_index interface~prif_image_index->proc~prif_image_index interface~prif_get prif_get interface~prif_get->proc~prif_get interface~prif_put prif_put interface~prif_put->proc~prif_put Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. pure function caf_num_images(team) bind(c) Arguments Type Intent Optional Attributes Name type(c_ptr), value :: team Return Value integer(kind=c_int) Description int caf_num_images();","tags":"","loc":"interface/caf_num_images.html"},{"title":"caf_numeric_type – Caffeine","text":"interface Called by interface~~caf_numeric_type~~CalledByGraph interface~caf_numeric_type caf_numeric_type proc~prif_co_max prif_co_max proc~prif_co_max->interface~caf_numeric_type proc~prif_co_min prif_co_min proc~prif_co_min->interface~caf_numeric_type interface~prif_co_max prif_co_max interface~prif_co_max->proc~prif_co_max interface~prif_co_min prif_co_min interface~prif_co_min->proc~prif_co_min Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. pure function caf_numeric_type(a) bind(c) Arguments Type Intent Optional Attributes Name type(*), intent(in) :: a (..) Return Value logical(kind=c_bool) Description bool caf_numeric_type(CFI_cdesc_t* a_desc);","tags":"","loc":"interface/caf_numeric_type.html"},{"title":"caf_put – Caffeine","text":"interface Called by interface~~caf_put~~CalledByGraph interface~caf_put caf_put proc~prif_put_indirect prif_put_indirect proc~prif_put_indirect->interface~caf_put interface~prif_put_indirect prif_put_indirect interface~prif_put_indirect->proc~prif_put_indirect proc~prif_put prif_put proc~prif_put->interface~prif_put_indirect interface~prif_put prif_put interface~prif_put->proc~prif_put Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. subroutine caf_put(image, dest, src, size) bind(c) Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in), value :: image integer(kind=c_intptr_t), intent(in), value :: dest type(c_ptr), intent(in), value :: src integer(kind=c_size_t), intent(in), value :: size Description void caf_put(int image, intptr_t dest, void* src, size_t size)","tags":"","loc":"interface/caf_put.html"},{"title":"caf_same_cfi_type – Caffeine","text":"interface Called by interface~~caf_same_cfi_type~~CalledByGraph interface~caf_same_cfi_type caf_same_cfi_type proc~prif_co_reduce prif_co_reduce proc~prif_co_reduce->interface~caf_same_cfi_type interface~prif_co_reduce prif_co_reduce interface~prif_co_reduce->proc~prif_co_reduce proc~prif_co_max prif_co_max proc~prif_co_max->interface~prif_co_reduce proc~prif_co_min prif_co_min proc~prif_co_min->interface~prif_co_reduce interface~prif_co_max prif_co_max interface~prif_co_max->proc~prif_co_max interface~prif_co_min prif_co_min interface~prif_co_min->proc~prif_co_min Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. pure function caf_same_cfi_type(a, b) bind(c) Arguments Type Intent Optional Attributes Name type(*), intent(in) :: a (..) type(*), intent(in) :: b (..) Return Value logical(kind=c_bool) Description bool caf_same_cfi_type(CFI_cdesc_t a_desc, CFI_cdesc_t a_desc);","tags":"","loc":"interface/caf_same_cfi_type.html"},{"title":"caf_sync_all – Caffeine","text":"interface Called by interface~~caf_sync_all~~CalledByGraph interface~caf_sync_all caf_sync_all proc~prif_sync_all prif_sync_all proc~prif_sync_all->interface~caf_sync_all interface~prif_sync_all prif_sync_all interface~prif_sync_all->proc~prif_sync_all proc~prif_deallocate_coarray prif_deallocate_coarray proc~prif_deallocate_coarray->interface~prif_sync_all interface~prif_deallocate_coarray prif_deallocate_coarray interface~prif_deallocate_coarray->proc~prif_deallocate_coarray Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. subroutine caf_sync_all() bind(c) Arguments None Description void caf_sync_all();","tags":"","loc":"interface/caf_sync_all.html"},{"title":"caf_this_image – Caffeine","text":"interface Called by interface~~caf_this_image~~CalledByGraph interface~caf_this_image caf_this_image proc~prif_allocate_coarray prif_allocate_coarray proc~prif_allocate_coarray->interface~caf_this_image proc~prif_deallocate_coarray prif_deallocate_coarray proc~prif_deallocate_coarray->interface~caf_this_image proc~prif_this_image_no_coarray prif_this_image_no_coarray proc~prif_this_image_no_coarray->interface~caf_this_image interface~prif_allocate_coarray prif_allocate_coarray interface~prif_allocate_coarray->proc~prif_allocate_coarray interface~prif_deallocate_coarray prif_deallocate_coarray interface~prif_deallocate_coarray->proc~prif_deallocate_coarray interface~prif_this_image_no_coarray prif_this_image_no_coarray interface~prif_this_image_no_coarray->proc~prif_this_image_no_coarray Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. function caf_this_image(team) bind(c) Arguments Type Intent Optional Attributes Name type(c_ptr), value :: team Return Value integer(kind=c_int) Description int caf_this_image();","tags":"","loc":"interface/caf_this_image.html"},{"title":"c_f_string – Caffeine","text":"pure function c_f_string(c_string, length) result(f_string) Arguments Type Intent Optional Attributes Name character(kind=c_char,len=1), intent(in) :: c_string (length) integer(kind=c_int), intent(in) :: length Return Value character(len=length) Called by proc~~c_f_string~~CalledByGraph proc~c_f_string c_f_string proc~inner_caf_error_stop_character inner_caf_error_stop_character proc~inner_caf_error_stop_character->proc~c_f_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/c_f_string.html"},{"title":"f_c_string – Caffeine","text":"pure function f_c_string(f_string) result(c_string) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: f_string Return Value character(kind=c_char,len=1)(len(f_string)) Called by proc~~f_c_string~~CalledByGraph proc~f_c_string f_c_string proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop_character->proc~f_c_string proc~prif_error_stop prif_error_stop proc~prif_error_stop->proc~prif_error_stop_character interface~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~assert assert proc~assert->interface~prif_error_stop proc~prif_co_min prif_co_min proc~prif_co_min->interface~prif_error_stop interface~prif_co_reduce prif_co_reduce proc~prif_co_min->interface~prif_co_reduce proc~unimplemented unimplemented proc~unimplemented->interface~prif_error_stop proc~prif_co_max prif_co_max proc~prif_co_max->interface~prif_error_stop proc~prif_co_max->interface~prif_co_reduce proc~prif_co_reduce prif_co_reduce proc~prif_co_reduce->interface~prif_error_stop interface~assert assert proc~prif_co_reduce->interface~assert proc~prif_deallocate_coarray prif_deallocate_coarray proc~prif_deallocate_coarray->interface~prif_error_stop proc~prif_atomic_define_int prif_atomic_define_int proc~prif_atomic_define_int->proc~unimplemented proc~prif_atomic_ref_logical prif_atomic_ref_logical proc~prif_atomic_ref_logical->proc~unimplemented proc~prif_notify_wait prif_notify_wait proc~prif_notify_wait->proc~unimplemented proc~prif_end_team prif_end_team proc~prif_end_team->proc~unimplemented proc~prif_get_team prif_get_team proc~prif_get_team->proc~unimplemented proc~prif_sync_team prif_sync_team proc~prif_sync_team->proc~unimplemented interface~prif_co_max prif_co_max interface~prif_co_max->proc~prif_co_max proc~prif_atomic_and_indirect prif_atomic_and_indirect proc~prif_atomic_and_indirect->proc~unimplemented proc~prif_atomic_fetch_xor_indirect prif_atomic_fetch_xor_indirect proc~prif_atomic_fetch_xor_indirect->proc~unimplemented proc~prif_size_bytes prif_size_bytes proc~prif_size_bytes->proc~unimplemented interface~prif_deallocate_coarray prif_deallocate_coarray interface~prif_deallocate_coarray->proc~prif_deallocate_coarray proc~prif_atomic_fetch_and prif_atomic_fetch_and proc~prif_atomic_fetch_and->proc~unimplemented proc~prif_failed_images prif_failed_images proc~prif_failed_images->proc~unimplemented proc~prif_put_strided_with_notify prif_put_strided_with_notify proc~prif_put_strided_with_notify->proc~unimplemented proc~prif_ucobound_with_dim prif_ucobound_with_dim proc~prif_ucobound_with_dim->proc~unimplemented proc~prif_atomic_define_int_indirect prif_atomic_define_int_indirect proc~prif_atomic_define_int_indirect->proc~unimplemented proc~prif_atomic_ref_logical_indirect prif_atomic_ref_logical_indirect proc~prif_atomic_ref_logical_indirect->proc~unimplemented proc~prif_num_images_with_team prif_num_images_with_team proc~prif_num_images_with_team->proc~unimplemented proc~prif_event_post prif_event_post proc~prif_event_post->proc~unimplemented proc~prif_put_indirect_with_notify_indirect prif_put_indirect_with_notify_indirect proc~prif_put_indirect_with_notify_indirect->proc~unimplemented proc~prif_team_number prif_team_number proc~prif_team_number->proc~unimplemented proc~prif_atomic_cas_int prif_atomic_cas_int proc~prif_atomic_cas_int->proc~unimplemented proc~prif_atomic_or prif_atomic_or proc~prif_atomic_or->proc~unimplemented proc~prif_lcobound_no_dim prif_lcobound_no_dim proc~prif_lcobound_no_dim->proc~unimplemented interface~prif_co_min prif_co_min interface~prif_co_min->proc~prif_co_min proc~prif_alias_create prif_alias_create proc~prif_alias_create->proc~unimplemented proc~prif_atomic_fetch_and_indirect prif_atomic_fetch_and_indirect proc~prif_atomic_fetch_and_indirect->proc~unimplemented proc~prif_form_team prif_form_team proc~prif_form_team->proc~unimplemented proc~prif_put_strided_with_notify_indirect prif_put_strided_with_notify_indirect proc~prif_put_strided_with_notify_indirect->proc~unimplemented proc~prif_unlock prif_unlock proc~prif_unlock->proc~unimplemented proc~prif_num_images_with_team_number prif_num_images_with_team_number proc~prif_num_images_with_team_number->proc~unimplemented proc~prif_atomic_define_logical prif_atomic_define_logical proc~prif_atomic_define_logical->proc~unimplemented proc~prif_atomic_xor prif_atomic_xor proc~prif_atomic_xor->proc~unimplemented proc~prif_get_context_data prif_get_context_data proc~prif_get_context_data->proc~unimplemented proc~prif_event_post_indirect prif_event_post_indirect proc~prif_event_post_indirect->proc~unimplemented proc~prif_image_index_with_team prif_image_index_with_team proc~prif_image_index_with_team->proc~unimplemented proc~prif_put_strided prif_put_strided proc~prif_put_strided->proc~unimplemented proc~prif_atomic_cas_int_indirect prif_atomic_cas_int_indirect proc~prif_atomic_cas_int_indirect->proc~unimplemented proc~prif_atomic_or_indirect prif_atomic_or_indirect proc~prif_atomic_or_indirect->proc~unimplemented proc~prif_lcobound_with_dim prif_lcobound_with_dim proc~prif_lcobound_with_dim->proc~unimplemented proc~prif_stopped_images prif_stopped_images proc~prif_stopped_images->proc~unimplemented proc~prif_atomic_add prif_atomic_add proc~prif_atomic_add->proc~unimplemented proc~prif_atomic_fetch_or prif_atomic_fetch_or proc~prif_atomic_fetch_or->proc~unimplemented proc~prif_put_with_notify prif_put_with_notify proc~prif_put_with_notify->proc~unimplemented proc~prif_unlock_indirect prif_unlock_indirect proc~prif_unlock_indirect->proc~unimplemented proc~prif_atomic_define_logical_indirect prif_atomic_define_logical_indirect proc~prif_atomic_define_logical_indirect->proc~unimplemented proc~prif_atomic_xor_indirect prif_atomic_xor_indirect proc~prif_atomic_xor_indirect->proc~unimplemented proc~prif_event_query prif_event_query proc~prif_event_query->proc~unimplemented proc~prif_image_index_with_team_number prif_image_index_with_team_number proc~prif_image_index_with_team_number->proc~unimplemented proc~prif_put_strided_indirect prif_put_strided_indirect proc~prif_put_strided_indirect->proc~unimplemented proc~prif_this_image_with_coarray prif_this_image_with_coarray proc~prif_this_image_with_coarray->proc~unimplemented proc~prif_alias_destroy prif_alias_destroy proc~prif_alias_destroy->proc~unimplemented proc~prif_atomic_cas_logical prif_atomic_cas_logical proc~prif_atomic_cas_logical->proc~unimplemented proc~prif_atomic_ref_int prif_atomic_ref_int proc~prif_atomic_ref_int->proc~unimplemented proc~prif_coshape prif_coshape proc~prif_coshape->proc~unimplemented proc~prif_lock prif_lock proc~prif_lock->proc~unimplemented proc~prif_get_strided prif_get_strided proc~prif_get_strided->proc~unimplemented proc~prif_sync_images prif_sync_images proc~prif_sync_images->proc~unimplemented proc~prif_atomic_add_indirect prif_atomic_add_indirect proc~prif_atomic_add_indirect->proc~unimplemented proc~prif_atomic_fetch_or_indirect prif_atomic_fetch_or_indirect proc~prif_atomic_fetch_or_indirect->proc~unimplemented interface~prif_co_reduce->proc~prif_co_reduce proc~prif_put_with_notify_indirect prif_put_with_notify_indirect proc~prif_put_with_notify_indirect->proc~unimplemented proc~prif_atomic_fetch_add prif_atomic_fetch_add proc~prif_atomic_fetch_add->proc~unimplemented proc~prif_change_team prif_change_team proc~prif_change_team->proc~unimplemented proc~prif_event_wait prif_event_wait proc~prif_event_wait->proc~unimplemented proc~prif_image_status prif_image_status proc~prif_image_status->proc~unimplemented proc~prif_put_strided_indirect_with_notify prif_put_strided_indirect_with_notify proc~prif_put_strided_indirect_with_notify->proc~unimplemented proc~prif_this_image_with_dim prif_this_image_with_dim proc~prif_this_image_with_dim->proc~unimplemented proc~prif_atomic_cas_logical_indirect prif_atomic_cas_logical_indirect proc~prif_atomic_cas_logical_indirect->proc~unimplemented proc~prif_atomic_ref_int_indirect prif_atomic_ref_int_indirect proc~prif_atomic_ref_int_indirect->proc~unimplemented proc~prif_critical prif_critical proc~prif_critical->proc~unimplemented proc~prif_lock_indirect prif_lock_indirect proc~prif_lock_indirect->proc~unimplemented proc~prif_end_critical prif_end_critical proc~prif_end_critical->proc~unimplemented proc~prif_get_strided_indirect prif_get_strided_indirect proc~prif_get_strided_indirect->proc~unimplemented proc~prif_sync_memory prif_sync_memory proc~prif_sync_memory->proc~unimplemented proc~prif_atomic_and prif_atomic_and proc~prif_atomic_and->proc~unimplemented proc~prif_atomic_fetch_xor prif_atomic_fetch_xor proc~prif_atomic_fetch_xor->proc~unimplemented proc~prif_set_context_data prif_set_context_data proc~prif_set_context_data->proc~unimplemented proc~prif_atomic_fetch_add_indirect prif_atomic_fetch_add_indirect proc~prif_atomic_fetch_add_indirect->proc~unimplemented proc~prif_put_indirect_with_notify prif_put_indirect_with_notify proc~prif_put_indirect_with_notify->proc~unimplemented interface~assert->proc~assert proc~prif_fail_image prif_fail_image proc~prif_fail_image->proc~unimplemented proc~prif_put_strided_indirect_with_notify_indirect prif_put_strided_indirect_with_notify_indirect proc~prif_put_strided_indirect_with_notify_indirect->proc~unimplemented proc~prif_ucobound_no_dim prif_ucobound_no_dim proc~prif_ucobound_no_dim->proc~unimplemented interface~prif_size_bytes prif_size_bytes interface~prif_size_bytes->proc~prif_size_bytes interface~prif_atomic_fetch_and prif_atomic_fetch_and interface~prif_atomic_fetch_and->proc~prif_atomic_fetch_and interface~prif_failed_images prif_failed_images interface~prif_failed_images->proc~prif_failed_images interface~prif_put_strided_with_notify prif_put_strided_with_notify interface~prif_put_strided_with_notify->proc~prif_put_strided_with_notify interface~prif_ucobound_with_dim prif_ucobound_with_dim interface~prif_ucobound_with_dim->proc~prif_ucobound_with_dim interface~prif_lcobound_no_dim prif_lcobound_no_dim interface~prif_lcobound_no_dim->proc~prif_lcobound_no_dim interface~prif_atomic_define_int_indirect prif_atomic_define_int_indirect interface~prif_atomic_define_int_indirect->proc~prif_atomic_define_int_indirect interface~prif_atomic_ref_logical_indirect prif_atomic_ref_logical_indirect interface~prif_atomic_ref_logical_indirect->proc~prif_atomic_ref_logical_indirect interface~prif_num_images_with_team prif_num_images_with_team interface~prif_num_images_with_team->proc~prif_num_images_with_team interface~prif_event_post prif_event_post interface~prif_event_post->proc~prif_event_post interface~prif_put_indirect_with_notify_indirect prif_put_indirect_with_notify_indirect interface~prif_put_indirect_with_notify_indirect->proc~prif_put_indirect_with_notify_indirect interface~prif_team_number prif_team_number interface~prif_team_number->proc~prif_team_number interface~prif_atomic_cas_int prif_atomic_cas_int interface~prif_atomic_cas_int->proc~prif_atomic_cas_int interface~prif_atomic_or prif_atomic_or interface~prif_atomic_or->proc~prif_atomic_or interface~prif_atomic_fetch_and_indirect prif_atomic_fetch_and_indirect interface~prif_atomic_fetch_and_indirect->proc~prif_atomic_fetch_and_indirect interface~prif_alias_destroy prif_alias_destroy interface~prif_alias_destroy->proc~prif_alias_destroy interface~prif_form_team prif_form_team interface~prif_form_team->proc~prif_form_team interface~prif_put_strided_with_notify_indirect prif_put_strided_with_notify_indirect interface~prif_put_strided_with_notify_indirect->proc~prif_put_strided_with_notify_indirect interface~prif_unlock prif_unlock interface~prif_unlock->proc~prif_unlock interface~prif_num_images_with_team_number prif_num_images_with_team_number interface~prif_num_images_with_team_number->proc~prif_num_images_with_team_number interface~prif_atomic_define_logical prif_atomic_define_logical interface~prif_atomic_define_logical->proc~prif_atomic_define_logical interface~prif_atomic_xor prif_atomic_xor interface~prif_atomic_xor->proc~prif_atomic_xor interface~prif_event_post_indirect prif_event_post_indirect interface~prif_event_post_indirect->proc~prif_event_post_indirect interface~prif_image_index_with_team prif_image_index_with_team interface~prif_image_index_with_team->proc~prif_image_index_with_team interface~prif_put_strided prif_put_strided interface~prif_put_strided->proc~prif_put_strided interface~prif_atomic_cas_int_indirect prif_atomic_cas_int_indirect interface~prif_atomic_cas_int_indirect->proc~prif_atomic_cas_int_indirect interface~prif_atomic_or_indirect prif_atomic_or_indirect interface~prif_atomic_or_indirect->proc~prif_atomic_or_indirect interface~prif_lcobound_with_dim prif_lcobound_with_dim interface~prif_lcobound_with_dim->proc~prif_lcobound_with_dim interface~prif_stopped_images prif_stopped_images interface~prif_stopped_images->proc~prif_stopped_images interface~prif_end_critical prif_end_critical interface~prif_end_critical->proc~prif_end_critical interface~prif_atomic_fetch_or prif_atomic_fetch_or interface~prif_atomic_fetch_or->proc~prif_atomic_fetch_or interface~prif_put_with_notify prif_put_with_notify interface~prif_put_with_notify->proc~prif_put_with_notify interface~prif_unlock_indirect prif_unlock_indirect interface~prif_unlock_indirect->proc~prif_unlock_indirect interface~prif_coshape prif_coshape interface~prif_coshape->proc~prif_coshape interface~prif_atomic_define_logical_indirect prif_atomic_define_logical_indirect interface~prif_atomic_define_logical_indirect->proc~prif_atomic_define_logical_indirect interface~prif_atomic_xor_indirect prif_atomic_xor_indirect interface~prif_atomic_xor_indirect->proc~prif_atomic_xor_indirect interface~prif_alias_create prif_alias_create interface~prif_alias_create->proc~prif_alias_create interface~prif_event_query prif_event_query interface~prif_event_query->proc~prif_event_query interface~prif_image_index_with_team_number prif_image_index_with_team_number interface~prif_image_index_with_team_number->proc~prif_image_index_with_team_number interface~prif_put_strided_indirect prif_put_strided_indirect interface~prif_put_strided_indirect->proc~prif_put_strided_indirect interface~prif_this_image_with_coarray prif_this_image_with_coarray interface~prif_this_image_with_coarray->proc~prif_this_image_with_coarray interface~prif_atomic_cas_logical prif_atomic_cas_logical interface~prif_atomic_cas_logical->proc~prif_atomic_cas_logical interface~prif_atomic_ref_int prif_atomic_ref_int interface~prif_atomic_ref_int->proc~prif_atomic_ref_int interface~prif_lock prif_lock interface~prif_lock->proc~prif_lock interface~prif_get_strided prif_get_strided interface~prif_get_strided->proc~prif_get_strided interface~prif_sync_images prif_sync_images interface~prif_sync_images->proc~prif_sync_images interface~prif_atomic_add_indirect prif_atomic_add_indirect interface~prif_atomic_add_indirect->proc~prif_atomic_add_indirect interface~prif_atomic_fetch_or_indirect prif_atomic_fetch_or_indirect interface~prif_atomic_fetch_or_indirect->proc~prif_atomic_fetch_or_indirect interface~prif_get_context_data prif_get_context_data interface~prif_get_context_data->proc~prif_get_context_data interface~prif_put_with_notify_indirect prif_put_with_notify_indirect interface~prif_put_with_notify_indirect->proc~prif_put_with_notify_indirect interface~prif_atomic_add prif_atomic_add interface~prif_atomic_add->proc~prif_atomic_add interface~prif_atomic_fetch_add prif_atomic_fetch_add interface~prif_atomic_fetch_add->proc~prif_atomic_fetch_add interface~prif_change_team prif_change_team interface~prif_change_team->proc~prif_change_team interface~prif_put_indirect_with_notify prif_put_indirect_with_notify interface~prif_put_indirect_with_notify->proc~prif_put_indirect_with_notify interface~prif_event_wait prif_event_wait interface~prif_event_wait->proc~prif_event_wait interface~prif_image_status prif_image_status interface~prif_image_status->proc~prif_image_status interface~prif_put_strided_indirect_with_notify prif_put_strided_indirect_with_notify interface~prif_put_strided_indirect_with_notify->proc~prif_put_strided_indirect_with_notify interface~prif_this_image_with_dim prif_this_image_with_dim interface~prif_this_image_with_dim->proc~prif_this_image_with_dim proc~base_pointer base_pointer proc~base_pointer->interface~assert interface~prif_atomic_cas_logical_indirect prif_atomic_cas_logical_indirect interface~prif_atomic_cas_logical_indirect->proc~prif_atomic_cas_logical_indirect interface~prif_atomic_ref_int_indirect prif_atomic_ref_int_indirect interface~prif_atomic_ref_int_indirect->proc~prif_atomic_ref_int_indirect interface~prif_critical prif_critical interface~prif_critical->proc~prif_critical interface~prif_lock_indirect prif_lock_indirect interface~prif_lock_indirect->proc~prif_lock_indirect interface~prif_get_strided_indirect prif_get_strided_indirect interface~prif_get_strided_indirect->proc~prif_get_strided_indirect interface~prif_sync_memory prif_sync_memory interface~prif_sync_memory->proc~prif_sync_memory interface~prif_atomic_and prif_atomic_and interface~prif_atomic_and->proc~prif_atomic_and interface~prif_atomic_fetch_xor prif_atomic_fetch_xor interface~prif_atomic_fetch_xor->proc~prif_atomic_fetch_xor interface~prif_set_context_data prif_set_context_data interface~prif_set_context_data->proc~prif_set_context_data interface~prif_atomic_fetch_add_indirect prif_atomic_fetch_add_indirect interface~prif_atomic_fetch_add_indirect->proc~prif_atomic_fetch_add_indirect interface~prif_fail_image prif_fail_image interface~prif_fail_image->proc~prif_fail_image interface~prif_put_strided_indirect_with_notify_indirect prif_put_strided_indirect_with_notify_indirect interface~prif_put_strided_indirect_with_notify_indirect->proc~prif_put_strided_indirect_with_notify_indirect interface~prif_ucobound_no_dim prif_ucobound_no_dim interface~prif_ucobound_no_dim->proc~prif_ucobound_no_dim interface~prif_atomic_define_int prif_atomic_define_int interface~prif_atomic_define_int->proc~prif_atomic_define_int interface~prif_notify_wait prif_notify_wait interface~prif_notify_wait->proc~prif_notify_wait interface~prif_atomic_ref_logical prif_atomic_ref_logical interface~prif_atomic_ref_logical->proc~prif_atomic_ref_logical interface~prif_get_team prif_get_team interface~prif_get_team->proc~prif_get_team interface~prif_end_team prif_end_team interface~prif_end_team->proc~prif_end_team interface~prif_sync_team prif_sync_team interface~prif_sync_team->proc~prif_sync_team interface~prif_atomic_and_indirect prif_atomic_and_indirect interface~prif_atomic_and_indirect->proc~prif_atomic_and_indirect interface~prif_atomic_fetch_xor_indirect prif_atomic_fetch_xor_indirect interface~prif_atomic_fetch_xor_indirect->proc~prif_atomic_fetch_xor_indirect proc~prif_get prif_get proc~prif_get->proc~base_pointer proc~prif_put prif_put proc~prif_put->proc~base_pointer interface~prif_get prif_get interface~prif_get->proc~prif_get interface~prif_put prif_put interface~prif_put->proc~prif_put Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/f_c_string.html"},{"title":"inner_caf_error_stop_character – Caffeine","text":"subroutine inner_caf_error_stop_character(stop_code, length) bind(c, name = \"0\") Arguments Type Intent Optional Attributes Name character(kind=c_char,len=1), intent(in) :: stop_code (length) integer(kind=c_int), intent(in) :: length Calls proc~~inner_caf_error_stop_character~~CallsGraph proc~inner_caf_error_stop_character inner_caf_error_stop_character proc~c_f_string c_f_string proc~inner_caf_error_stop_character->proc~c_f_string proc~prif_error_stop_integer prif_error_stop_integer proc~inner_caf_error_stop_character->proc~prif_error_stop_integer Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/inner_caf_error_stop_character.html"},{"title":"inner_caf_error_stop_integer – Caffeine","text":"subroutine inner_caf_error_stop_integer(stop_code) bind(c, name = \"0\") Arguments Type Intent Optional Attributes Name integer, intent(in), optional :: stop_code Calls proc~~inner_caf_error_stop_integer~~CallsGraph proc~inner_caf_error_stop_integer inner_caf_error_stop_integer interface~caf_decaffeinate caf_decaffeinate proc~inner_caf_error_stop_integer->interface~caf_decaffeinate Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/inner_caf_error_stop_integer.html"},{"title":"prif_error_stop_character – Caffeine","text":"pure subroutine prif_error_stop_character(stop_code) stop all images and provide the stop_code as the process exit status Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: stop_code Calls proc~~prif_error_stop_character~~CallsGraph proc~prif_error_stop_character prif_error_stop_character proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_error_stop_character~~CalledByGraph proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop prif_error_stop proc~prif_error_stop->proc~prif_error_stop_character interface~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~assert assert proc~assert->interface~prif_error_stop proc~prif_co_min prif_co_min proc~prif_co_min->interface~prif_error_stop interface~prif_co_reduce prif_co_reduce proc~prif_co_min->interface~prif_co_reduce proc~unimplemented unimplemented proc~unimplemented->interface~prif_error_stop proc~prif_co_max prif_co_max proc~prif_co_max->interface~prif_error_stop proc~prif_co_max->interface~prif_co_reduce proc~prif_co_reduce prif_co_reduce proc~prif_co_reduce->interface~prif_error_stop interface~assert assert proc~prif_co_reduce->interface~assert proc~prif_deallocate_coarray prif_deallocate_coarray proc~prif_deallocate_coarray->interface~prif_error_stop proc~prif_atomic_define_int prif_atomic_define_int proc~prif_atomic_define_int->proc~unimplemented proc~prif_atomic_ref_logical prif_atomic_ref_logical proc~prif_atomic_ref_logical->proc~unimplemented proc~prif_notify_wait prif_notify_wait proc~prif_notify_wait->proc~unimplemented proc~prif_end_team prif_end_team proc~prif_end_team->proc~unimplemented proc~prif_get_team prif_get_team proc~prif_get_team->proc~unimplemented proc~prif_sync_team prif_sync_team proc~prif_sync_team->proc~unimplemented interface~prif_co_max prif_co_max interface~prif_co_max->proc~prif_co_max proc~prif_atomic_and_indirect prif_atomic_and_indirect proc~prif_atomic_and_indirect->proc~unimplemented proc~prif_atomic_fetch_xor_indirect prif_atomic_fetch_xor_indirect proc~prif_atomic_fetch_xor_indirect->proc~unimplemented proc~prif_size_bytes prif_size_bytes proc~prif_size_bytes->proc~unimplemented interface~prif_deallocate_coarray prif_deallocate_coarray interface~prif_deallocate_coarray->proc~prif_deallocate_coarray proc~prif_atomic_fetch_and prif_atomic_fetch_and proc~prif_atomic_fetch_and->proc~unimplemented proc~prif_failed_images prif_failed_images proc~prif_failed_images->proc~unimplemented proc~prif_put_strided_with_notify prif_put_strided_with_notify proc~prif_put_strided_with_notify->proc~unimplemented proc~prif_ucobound_with_dim prif_ucobound_with_dim proc~prif_ucobound_with_dim->proc~unimplemented proc~prif_atomic_define_int_indirect prif_atomic_define_int_indirect proc~prif_atomic_define_int_indirect->proc~unimplemented proc~prif_atomic_ref_logical_indirect prif_atomic_ref_logical_indirect proc~prif_atomic_ref_logical_indirect->proc~unimplemented proc~prif_num_images_with_team prif_num_images_with_team proc~prif_num_images_with_team->proc~unimplemented proc~prif_event_post prif_event_post proc~prif_event_post->proc~unimplemented proc~prif_put_indirect_with_notify_indirect prif_put_indirect_with_notify_indirect proc~prif_put_indirect_with_notify_indirect->proc~unimplemented proc~prif_team_number prif_team_number proc~prif_team_number->proc~unimplemented proc~prif_atomic_cas_int prif_atomic_cas_int proc~prif_atomic_cas_int->proc~unimplemented proc~prif_atomic_or prif_atomic_or proc~prif_atomic_or->proc~unimplemented proc~prif_lcobound_no_dim prif_lcobound_no_dim proc~prif_lcobound_no_dim->proc~unimplemented interface~prif_co_min prif_co_min interface~prif_co_min->proc~prif_co_min proc~prif_alias_create prif_alias_create proc~prif_alias_create->proc~unimplemented proc~prif_atomic_fetch_and_indirect prif_atomic_fetch_and_indirect proc~prif_atomic_fetch_and_indirect->proc~unimplemented proc~prif_form_team prif_form_team proc~prif_form_team->proc~unimplemented proc~prif_put_strided_with_notify_indirect prif_put_strided_with_notify_indirect proc~prif_put_strided_with_notify_indirect->proc~unimplemented proc~prif_unlock prif_unlock proc~prif_unlock->proc~unimplemented proc~prif_num_images_with_team_number prif_num_images_with_team_number proc~prif_num_images_with_team_number->proc~unimplemented proc~prif_atomic_define_logical prif_atomic_define_logical proc~prif_atomic_define_logical->proc~unimplemented proc~prif_atomic_xor prif_atomic_xor proc~prif_atomic_xor->proc~unimplemented proc~prif_get_context_data prif_get_context_data proc~prif_get_context_data->proc~unimplemented proc~prif_event_post_indirect prif_event_post_indirect proc~prif_event_post_indirect->proc~unimplemented proc~prif_image_index_with_team prif_image_index_with_team proc~prif_image_index_with_team->proc~unimplemented proc~prif_put_strided prif_put_strided proc~prif_put_strided->proc~unimplemented proc~prif_atomic_cas_int_indirect prif_atomic_cas_int_indirect proc~prif_atomic_cas_int_indirect->proc~unimplemented proc~prif_atomic_or_indirect prif_atomic_or_indirect proc~prif_atomic_or_indirect->proc~unimplemented proc~prif_lcobound_with_dim prif_lcobound_with_dim proc~prif_lcobound_with_dim->proc~unimplemented proc~prif_stopped_images prif_stopped_images proc~prif_stopped_images->proc~unimplemented proc~prif_atomic_add prif_atomic_add proc~prif_atomic_add->proc~unimplemented proc~prif_atomic_fetch_or prif_atomic_fetch_or proc~prif_atomic_fetch_or->proc~unimplemented proc~prif_put_with_notify prif_put_with_notify proc~prif_put_with_notify->proc~unimplemented proc~prif_unlock_indirect prif_unlock_indirect proc~prif_unlock_indirect->proc~unimplemented proc~prif_atomic_define_logical_indirect prif_atomic_define_logical_indirect proc~prif_atomic_define_logical_indirect->proc~unimplemented proc~prif_atomic_xor_indirect prif_atomic_xor_indirect proc~prif_atomic_xor_indirect->proc~unimplemented proc~prif_event_query prif_event_query proc~prif_event_query->proc~unimplemented proc~prif_image_index_with_team_number prif_image_index_with_team_number proc~prif_image_index_with_team_number->proc~unimplemented proc~prif_put_strided_indirect prif_put_strided_indirect proc~prif_put_strided_indirect->proc~unimplemented proc~prif_this_image_with_coarray prif_this_image_with_coarray proc~prif_this_image_with_coarray->proc~unimplemented proc~prif_alias_destroy prif_alias_destroy proc~prif_alias_destroy->proc~unimplemented proc~prif_atomic_cas_logical prif_atomic_cas_logical proc~prif_atomic_cas_logical->proc~unimplemented proc~prif_atomic_ref_int prif_atomic_ref_int proc~prif_atomic_ref_int->proc~unimplemented proc~prif_coshape prif_coshape proc~prif_coshape->proc~unimplemented proc~prif_lock prif_lock proc~prif_lock->proc~unimplemented proc~prif_get_strided prif_get_strided proc~prif_get_strided->proc~unimplemented proc~prif_sync_images prif_sync_images proc~prif_sync_images->proc~unimplemented proc~prif_atomic_add_indirect prif_atomic_add_indirect proc~prif_atomic_add_indirect->proc~unimplemented proc~prif_atomic_fetch_or_indirect prif_atomic_fetch_or_indirect proc~prif_atomic_fetch_or_indirect->proc~unimplemented interface~prif_co_reduce->proc~prif_co_reduce proc~prif_put_with_notify_indirect prif_put_with_notify_indirect proc~prif_put_with_notify_indirect->proc~unimplemented proc~prif_atomic_fetch_add prif_atomic_fetch_add proc~prif_atomic_fetch_add->proc~unimplemented proc~prif_change_team prif_change_team proc~prif_change_team->proc~unimplemented proc~prif_event_wait prif_event_wait proc~prif_event_wait->proc~unimplemented proc~prif_image_status prif_image_status proc~prif_image_status->proc~unimplemented proc~prif_put_strided_indirect_with_notify prif_put_strided_indirect_with_notify proc~prif_put_strided_indirect_with_notify->proc~unimplemented proc~prif_this_image_with_dim prif_this_image_with_dim proc~prif_this_image_with_dim->proc~unimplemented proc~prif_atomic_cas_logical_indirect prif_atomic_cas_logical_indirect proc~prif_atomic_cas_logical_indirect->proc~unimplemented proc~prif_atomic_ref_int_indirect prif_atomic_ref_int_indirect proc~prif_atomic_ref_int_indirect->proc~unimplemented proc~prif_critical prif_critical proc~prif_critical->proc~unimplemented proc~prif_lock_indirect prif_lock_indirect proc~prif_lock_indirect->proc~unimplemented proc~prif_end_critical prif_end_critical proc~prif_end_critical->proc~unimplemented proc~prif_get_strided_indirect prif_get_strided_indirect proc~prif_get_strided_indirect->proc~unimplemented proc~prif_sync_memory prif_sync_memory proc~prif_sync_memory->proc~unimplemented proc~prif_atomic_and prif_atomic_and proc~prif_atomic_and->proc~unimplemented proc~prif_atomic_fetch_xor prif_atomic_fetch_xor proc~prif_atomic_fetch_xor->proc~unimplemented proc~prif_set_context_data prif_set_context_data proc~prif_set_context_data->proc~unimplemented proc~prif_atomic_fetch_add_indirect prif_atomic_fetch_add_indirect proc~prif_atomic_fetch_add_indirect->proc~unimplemented proc~prif_put_indirect_with_notify prif_put_indirect_with_notify proc~prif_put_indirect_with_notify->proc~unimplemented interface~assert->proc~assert proc~prif_fail_image prif_fail_image proc~prif_fail_image->proc~unimplemented proc~prif_put_strided_indirect_with_notify_indirect prif_put_strided_indirect_with_notify_indirect proc~prif_put_strided_indirect_with_notify_indirect->proc~unimplemented proc~prif_ucobound_no_dim prif_ucobound_no_dim proc~prif_ucobound_no_dim->proc~unimplemented interface~prif_size_bytes prif_size_bytes interface~prif_size_bytes->proc~prif_size_bytes interface~prif_atomic_fetch_and prif_atomic_fetch_and interface~prif_atomic_fetch_and->proc~prif_atomic_fetch_and interface~prif_failed_images prif_failed_images interface~prif_failed_images->proc~prif_failed_images interface~prif_put_strided_with_notify prif_put_strided_with_notify interface~prif_put_strided_with_notify->proc~prif_put_strided_with_notify interface~prif_ucobound_with_dim prif_ucobound_with_dim interface~prif_ucobound_with_dim->proc~prif_ucobound_with_dim interface~prif_lcobound_no_dim prif_lcobound_no_dim interface~prif_lcobound_no_dim->proc~prif_lcobound_no_dim interface~prif_atomic_define_int_indirect prif_atomic_define_int_indirect interface~prif_atomic_define_int_indirect->proc~prif_atomic_define_int_indirect interface~prif_atomic_ref_logical_indirect prif_atomic_ref_logical_indirect interface~prif_atomic_ref_logical_indirect->proc~prif_atomic_ref_logical_indirect interface~prif_num_images_with_team prif_num_images_with_team interface~prif_num_images_with_team->proc~prif_num_images_with_team interface~prif_event_post prif_event_post interface~prif_event_post->proc~prif_event_post interface~prif_put_indirect_with_notify_indirect prif_put_indirect_with_notify_indirect interface~prif_put_indirect_with_notify_indirect->proc~prif_put_indirect_with_notify_indirect interface~prif_team_number prif_team_number interface~prif_team_number->proc~prif_team_number interface~prif_atomic_cas_int prif_atomic_cas_int interface~prif_atomic_cas_int->proc~prif_atomic_cas_int interface~prif_atomic_or prif_atomic_or interface~prif_atomic_or->proc~prif_atomic_or interface~prif_atomic_fetch_and_indirect prif_atomic_fetch_and_indirect interface~prif_atomic_fetch_and_indirect->proc~prif_atomic_fetch_and_indirect interface~prif_alias_destroy prif_alias_destroy interface~prif_alias_destroy->proc~prif_alias_destroy interface~prif_form_team prif_form_team interface~prif_form_team->proc~prif_form_team interface~prif_put_strided_with_notify_indirect prif_put_strided_with_notify_indirect interface~prif_put_strided_with_notify_indirect->proc~prif_put_strided_with_notify_indirect interface~prif_unlock prif_unlock interface~prif_unlock->proc~prif_unlock interface~prif_num_images_with_team_number prif_num_images_with_team_number interface~prif_num_images_with_team_number->proc~prif_num_images_with_team_number interface~prif_atomic_define_logical prif_atomic_define_logical interface~prif_atomic_define_logical->proc~prif_atomic_define_logical interface~prif_atomic_xor prif_atomic_xor interface~prif_atomic_xor->proc~prif_atomic_xor interface~prif_event_post_indirect prif_event_post_indirect interface~prif_event_post_indirect->proc~prif_event_post_indirect interface~prif_image_index_with_team prif_image_index_with_team interface~prif_image_index_with_team->proc~prif_image_index_with_team interface~prif_put_strided prif_put_strided interface~prif_put_strided->proc~prif_put_strided interface~prif_atomic_cas_int_indirect prif_atomic_cas_int_indirect interface~prif_atomic_cas_int_indirect->proc~prif_atomic_cas_int_indirect interface~prif_atomic_or_indirect prif_atomic_or_indirect interface~prif_atomic_or_indirect->proc~prif_atomic_or_indirect interface~prif_lcobound_with_dim prif_lcobound_with_dim interface~prif_lcobound_with_dim->proc~prif_lcobound_with_dim interface~prif_stopped_images prif_stopped_images interface~prif_stopped_images->proc~prif_stopped_images interface~prif_end_critical prif_end_critical interface~prif_end_critical->proc~prif_end_critical interface~prif_atomic_fetch_or prif_atomic_fetch_or interface~prif_atomic_fetch_or->proc~prif_atomic_fetch_or interface~prif_put_with_notify prif_put_with_notify interface~prif_put_with_notify->proc~prif_put_with_notify interface~prif_unlock_indirect prif_unlock_indirect interface~prif_unlock_indirect->proc~prif_unlock_indirect interface~prif_coshape prif_coshape interface~prif_coshape->proc~prif_coshape interface~prif_atomic_define_logical_indirect prif_atomic_define_logical_indirect interface~prif_atomic_define_logical_indirect->proc~prif_atomic_define_logical_indirect interface~prif_atomic_xor_indirect prif_atomic_xor_indirect interface~prif_atomic_xor_indirect->proc~prif_atomic_xor_indirect interface~prif_alias_create prif_alias_create interface~prif_alias_create->proc~prif_alias_create interface~prif_event_query prif_event_query interface~prif_event_query->proc~prif_event_query interface~prif_image_index_with_team_number prif_image_index_with_team_number interface~prif_image_index_with_team_number->proc~prif_image_index_with_team_number interface~prif_put_strided_indirect prif_put_strided_indirect interface~prif_put_strided_indirect->proc~prif_put_strided_indirect interface~prif_this_image_with_coarray prif_this_image_with_coarray interface~prif_this_image_with_coarray->proc~prif_this_image_with_coarray interface~prif_atomic_cas_logical prif_atomic_cas_logical interface~prif_atomic_cas_logical->proc~prif_atomic_cas_logical interface~prif_atomic_ref_int prif_atomic_ref_int interface~prif_atomic_ref_int->proc~prif_atomic_ref_int interface~prif_lock prif_lock interface~prif_lock->proc~prif_lock interface~prif_get_strided prif_get_strided interface~prif_get_strided->proc~prif_get_strided interface~prif_sync_images prif_sync_images interface~prif_sync_images->proc~prif_sync_images interface~prif_atomic_add_indirect prif_atomic_add_indirect interface~prif_atomic_add_indirect->proc~prif_atomic_add_indirect interface~prif_atomic_fetch_or_indirect prif_atomic_fetch_or_indirect interface~prif_atomic_fetch_or_indirect->proc~prif_atomic_fetch_or_indirect interface~prif_get_context_data prif_get_context_data interface~prif_get_context_data->proc~prif_get_context_data interface~prif_put_with_notify_indirect prif_put_with_notify_indirect interface~prif_put_with_notify_indirect->proc~prif_put_with_notify_indirect interface~prif_atomic_add prif_atomic_add interface~prif_atomic_add->proc~prif_atomic_add interface~prif_atomic_fetch_add prif_atomic_fetch_add interface~prif_atomic_fetch_add->proc~prif_atomic_fetch_add interface~prif_change_team prif_change_team interface~prif_change_team->proc~prif_change_team interface~prif_put_indirect_with_notify prif_put_indirect_with_notify interface~prif_put_indirect_with_notify->proc~prif_put_indirect_with_notify interface~prif_event_wait prif_event_wait interface~prif_event_wait->proc~prif_event_wait interface~prif_image_status prif_image_status interface~prif_image_status->proc~prif_image_status interface~prif_put_strided_indirect_with_notify prif_put_strided_indirect_with_notify interface~prif_put_strided_indirect_with_notify->proc~prif_put_strided_indirect_with_notify interface~prif_this_image_with_dim prif_this_image_with_dim interface~prif_this_image_with_dim->proc~prif_this_image_with_dim proc~base_pointer base_pointer proc~base_pointer->interface~assert interface~prif_atomic_cas_logical_indirect prif_atomic_cas_logical_indirect interface~prif_atomic_cas_logical_indirect->proc~prif_atomic_cas_logical_indirect interface~prif_atomic_ref_int_indirect prif_atomic_ref_int_indirect interface~prif_atomic_ref_int_indirect->proc~prif_atomic_ref_int_indirect interface~prif_critical prif_critical interface~prif_critical->proc~prif_critical interface~prif_lock_indirect prif_lock_indirect interface~prif_lock_indirect->proc~prif_lock_indirect interface~prif_get_strided_indirect prif_get_strided_indirect interface~prif_get_strided_indirect->proc~prif_get_strided_indirect interface~prif_sync_memory prif_sync_memory interface~prif_sync_memory->proc~prif_sync_memory interface~prif_atomic_and prif_atomic_and interface~prif_atomic_and->proc~prif_atomic_and interface~prif_atomic_fetch_xor prif_atomic_fetch_xor interface~prif_atomic_fetch_xor->proc~prif_atomic_fetch_xor interface~prif_set_context_data prif_set_context_data interface~prif_set_context_data->proc~prif_set_context_data interface~prif_atomic_fetch_add_indirect prif_atomic_fetch_add_indirect interface~prif_atomic_fetch_add_indirect->proc~prif_atomic_fetch_add_indirect interface~prif_fail_image prif_fail_image interface~prif_fail_image->proc~prif_fail_image interface~prif_put_strided_indirect_with_notify_indirect prif_put_strided_indirect_with_notify_indirect interface~prif_put_strided_indirect_with_notify_indirect->proc~prif_put_strided_indirect_with_notify_indirect interface~prif_ucobound_no_dim prif_ucobound_no_dim interface~prif_ucobound_no_dim->proc~prif_ucobound_no_dim interface~prif_atomic_define_int prif_atomic_define_int interface~prif_atomic_define_int->proc~prif_atomic_define_int interface~prif_notify_wait prif_notify_wait interface~prif_notify_wait->proc~prif_notify_wait interface~prif_atomic_ref_logical prif_atomic_ref_logical interface~prif_atomic_ref_logical->proc~prif_atomic_ref_logical interface~prif_get_team prif_get_team interface~prif_get_team->proc~prif_get_team interface~prif_end_team prif_end_team interface~prif_end_team->proc~prif_end_team interface~prif_sync_team prif_sync_team interface~prif_sync_team->proc~prif_sync_team interface~prif_atomic_and_indirect prif_atomic_and_indirect interface~prif_atomic_and_indirect->proc~prif_atomic_and_indirect interface~prif_atomic_fetch_xor_indirect prif_atomic_fetch_xor_indirect interface~prif_atomic_fetch_xor_indirect->proc~prif_atomic_fetch_xor_indirect proc~prif_get prif_get proc~prif_get->proc~base_pointer proc~prif_put prif_put proc~prif_put->proc~base_pointer interface~prif_get prif_get interface~prif_get->proc~prif_get interface~prif_put prif_put interface~prif_put->proc~prif_put Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_error_stop_character.html"},{"title":"prif_error_stop_integer – Caffeine","text":"pure subroutine prif_error_stop_integer(stop_code) stop all images and provide the stop_code, or 0 if not present, as the process exit status Arguments Type Intent Optional Attributes Name integer, intent(in), optional :: stop_code Called by proc~~prif_error_stop_integer~~CalledByGraph proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop prif_error_stop proc~prif_error_stop->proc~prif_error_stop_integer proc~inner_caf_error_stop_character inner_caf_error_stop_character proc~inner_caf_error_stop_character->proc~prif_error_stop_integer interface~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~assert assert proc~assert->interface~prif_error_stop proc~prif_co_min prif_co_min proc~prif_co_min->interface~prif_error_stop interface~prif_co_reduce prif_co_reduce proc~prif_co_min->interface~prif_co_reduce proc~unimplemented unimplemented proc~unimplemented->interface~prif_error_stop proc~prif_co_max prif_co_max proc~prif_co_max->interface~prif_error_stop proc~prif_co_max->interface~prif_co_reduce proc~prif_co_reduce prif_co_reduce proc~prif_co_reduce->interface~prif_error_stop interface~assert assert proc~prif_co_reduce->interface~assert proc~prif_deallocate_coarray prif_deallocate_coarray proc~prif_deallocate_coarray->interface~prif_error_stop proc~prif_atomic_define_int prif_atomic_define_int proc~prif_atomic_define_int->proc~unimplemented proc~prif_atomic_ref_logical prif_atomic_ref_logical proc~prif_atomic_ref_logical->proc~unimplemented proc~prif_notify_wait prif_notify_wait proc~prif_notify_wait->proc~unimplemented proc~prif_end_team prif_end_team proc~prif_end_team->proc~unimplemented proc~prif_get_team prif_get_team proc~prif_get_team->proc~unimplemented proc~prif_sync_team prif_sync_team proc~prif_sync_team->proc~unimplemented interface~prif_co_max prif_co_max interface~prif_co_max->proc~prif_co_max proc~prif_atomic_and_indirect prif_atomic_and_indirect proc~prif_atomic_and_indirect->proc~unimplemented proc~prif_atomic_fetch_xor_indirect prif_atomic_fetch_xor_indirect proc~prif_atomic_fetch_xor_indirect->proc~unimplemented proc~prif_size_bytes prif_size_bytes proc~prif_size_bytes->proc~unimplemented interface~prif_deallocate_coarray prif_deallocate_coarray interface~prif_deallocate_coarray->proc~prif_deallocate_coarray proc~prif_atomic_fetch_and prif_atomic_fetch_and proc~prif_atomic_fetch_and->proc~unimplemented proc~prif_failed_images prif_failed_images proc~prif_failed_images->proc~unimplemented proc~prif_put_strided_with_notify prif_put_strided_with_notify proc~prif_put_strided_with_notify->proc~unimplemented proc~prif_ucobound_with_dim prif_ucobound_with_dim proc~prif_ucobound_with_dim->proc~unimplemented proc~prif_atomic_define_int_indirect prif_atomic_define_int_indirect proc~prif_atomic_define_int_indirect->proc~unimplemented proc~prif_atomic_ref_logical_indirect prif_atomic_ref_logical_indirect proc~prif_atomic_ref_logical_indirect->proc~unimplemented proc~prif_num_images_with_team prif_num_images_with_team proc~prif_num_images_with_team->proc~unimplemented proc~prif_event_post prif_event_post proc~prif_event_post->proc~unimplemented proc~prif_put_indirect_with_notify_indirect prif_put_indirect_with_notify_indirect proc~prif_put_indirect_with_notify_indirect->proc~unimplemented proc~prif_team_number prif_team_number proc~prif_team_number->proc~unimplemented proc~prif_atomic_cas_int prif_atomic_cas_int proc~prif_atomic_cas_int->proc~unimplemented proc~prif_atomic_or prif_atomic_or proc~prif_atomic_or->proc~unimplemented proc~prif_lcobound_no_dim prif_lcobound_no_dim proc~prif_lcobound_no_dim->proc~unimplemented interface~prif_co_min prif_co_min interface~prif_co_min->proc~prif_co_min proc~prif_alias_create prif_alias_create proc~prif_alias_create->proc~unimplemented proc~prif_atomic_fetch_and_indirect prif_atomic_fetch_and_indirect proc~prif_atomic_fetch_and_indirect->proc~unimplemented proc~prif_form_team prif_form_team proc~prif_form_team->proc~unimplemented proc~prif_put_strided_with_notify_indirect prif_put_strided_with_notify_indirect proc~prif_put_strided_with_notify_indirect->proc~unimplemented proc~prif_unlock prif_unlock proc~prif_unlock->proc~unimplemented proc~prif_num_images_with_team_number prif_num_images_with_team_number proc~prif_num_images_with_team_number->proc~unimplemented proc~prif_atomic_define_logical prif_atomic_define_logical proc~prif_atomic_define_logical->proc~unimplemented proc~prif_atomic_xor prif_atomic_xor proc~prif_atomic_xor->proc~unimplemented proc~prif_get_context_data prif_get_context_data proc~prif_get_context_data->proc~unimplemented proc~prif_event_post_indirect prif_event_post_indirect proc~prif_event_post_indirect->proc~unimplemented proc~prif_image_index_with_team prif_image_index_with_team proc~prif_image_index_with_team->proc~unimplemented proc~prif_put_strided prif_put_strided proc~prif_put_strided->proc~unimplemented proc~prif_atomic_cas_int_indirect prif_atomic_cas_int_indirect proc~prif_atomic_cas_int_indirect->proc~unimplemented proc~prif_atomic_or_indirect prif_atomic_or_indirect proc~prif_atomic_or_indirect->proc~unimplemented proc~prif_lcobound_with_dim prif_lcobound_with_dim proc~prif_lcobound_with_dim->proc~unimplemented proc~prif_stopped_images prif_stopped_images proc~prif_stopped_images->proc~unimplemented proc~prif_atomic_add prif_atomic_add proc~prif_atomic_add->proc~unimplemented proc~prif_atomic_fetch_or prif_atomic_fetch_or proc~prif_atomic_fetch_or->proc~unimplemented proc~prif_put_with_notify prif_put_with_notify proc~prif_put_with_notify->proc~unimplemented proc~prif_unlock_indirect prif_unlock_indirect proc~prif_unlock_indirect->proc~unimplemented proc~prif_atomic_define_logical_indirect prif_atomic_define_logical_indirect proc~prif_atomic_define_logical_indirect->proc~unimplemented proc~prif_atomic_xor_indirect prif_atomic_xor_indirect proc~prif_atomic_xor_indirect->proc~unimplemented proc~prif_event_query prif_event_query proc~prif_event_query->proc~unimplemented proc~prif_image_index_with_team_number prif_image_index_with_team_number proc~prif_image_index_with_team_number->proc~unimplemented proc~prif_put_strided_indirect prif_put_strided_indirect proc~prif_put_strided_indirect->proc~unimplemented proc~prif_this_image_with_coarray prif_this_image_with_coarray proc~prif_this_image_with_coarray->proc~unimplemented proc~prif_alias_destroy prif_alias_destroy proc~prif_alias_destroy->proc~unimplemented proc~prif_atomic_cas_logical prif_atomic_cas_logical proc~prif_atomic_cas_logical->proc~unimplemented proc~prif_atomic_ref_int prif_atomic_ref_int proc~prif_atomic_ref_int->proc~unimplemented proc~prif_coshape prif_coshape proc~prif_coshape->proc~unimplemented proc~prif_lock prif_lock proc~prif_lock->proc~unimplemented proc~prif_get_strided prif_get_strided proc~prif_get_strided->proc~unimplemented proc~prif_sync_images prif_sync_images proc~prif_sync_images->proc~unimplemented proc~prif_atomic_add_indirect prif_atomic_add_indirect proc~prif_atomic_add_indirect->proc~unimplemented proc~prif_atomic_fetch_or_indirect prif_atomic_fetch_or_indirect proc~prif_atomic_fetch_or_indirect->proc~unimplemented interface~prif_co_reduce->proc~prif_co_reduce proc~prif_put_with_notify_indirect prif_put_with_notify_indirect proc~prif_put_with_notify_indirect->proc~unimplemented proc~prif_atomic_fetch_add prif_atomic_fetch_add proc~prif_atomic_fetch_add->proc~unimplemented proc~prif_change_team prif_change_team proc~prif_change_team->proc~unimplemented proc~prif_event_wait prif_event_wait proc~prif_event_wait->proc~unimplemented proc~prif_image_status prif_image_status proc~prif_image_status->proc~unimplemented proc~prif_put_strided_indirect_with_notify prif_put_strided_indirect_with_notify proc~prif_put_strided_indirect_with_notify->proc~unimplemented proc~prif_this_image_with_dim prif_this_image_with_dim proc~prif_this_image_with_dim->proc~unimplemented proc~prif_atomic_cas_logical_indirect prif_atomic_cas_logical_indirect proc~prif_atomic_cas_logical_indirect->proc~unimplemented proc~prif_atomic_ref_int_indirect prif_atomic_ref_int_indirect proc~prif_atomic_ref_int_indirect->proc~unimplemented proc~prif_critical prif_critical proc~prif_critical->proc~unimplemented proc~prif_lock_indirect prif_lock_indirect proc~prif_lock_indirect->proc~unimplemented proc~prif_end_critical prif_end_critical proc~prif_end_critical->proc~unimplemented proc~prif_get_strided_indirect prif_get_strided_indirect proc~prif_get_strided_indirect->proc~unimplemented proc~prif_sync_memory prif_sync_memory proc~prif_sync_memory->proc~unimplemented proc~prif_atomic_and prif_atomic_and proc~prif_atomic_and->proc~unimplemented proc~prif_atomic_fetch_xor prif_atomic_fetch_xor proc~prif_atomic_fetch_xor->proc~unimplemented proc~prif_set_context_data prif_set_context_data proc~prif_set_context_data->proc~unimplemented proc~prif_atomic_fetch_add_indirect prif_atomic_fetch_add_indirect proc~prif_atomic_fetch_add_indirect->proc~unimplemented proc~prif_put_indirect_with_notify prif_put_indirect_with_notify proc~prif_put_indirect_with_notify->proc~unimplemented interface~assert->proc~assert proc~prif_fail_image prif_fail_image proc~prif_fail_image->proc~unimplemented proc~prif_put_strided_indirect_with_notify_indirect prif_put_strided_indirect_with_notify_indirect proc~prif_put_strided_indirect_with_notify_indirect->proc~unimplemented proc~prif_ucobound_no_dim prif_ucobound_no_dim proc~prif_ucobound_no_dim->proc~unimplemented interface~prif_size_bytes prif_size_bytes interface~prif_size_bytes->proc~prif_size_bytes interface~prif_atomic_fetch_and prif_atomic_fetch_and interface~prif_atomic_fetch_and->proc~prif_atomic_fetch_and interface~prif_failed_images prif_failed_images interface~prif_failed_images->proc~prif_failed_images interface~prif_put_strided_with_notify prif_put_strided_with_notify interface~prif_put_strided_with_notify->proc~prif_put_strided_with_notify interface~prif_ucobound_with_dim prif_ucobound_with_dim interface~prif_ucobound_with_dim->proc~prif_ucobound_with_dim interface~prif_lcobound_no_dim prif_lcobound_no_dim interface~prif_lcobound_no_dim->proc~prif_lcobound_no_dim interface~prif_atomic_define_int_indirect prif_atomic_define_int_indirect interface~prif_atomic_define_int_indirect->proc~prif_atomic_define_int_indirect interface~prif_atomic_ref_logical_indirect prif_atomic_ref_logical_indirect interface~prif_atomic_ref_logical_indirect->proc~prif_atomic_ref_logical_indirect interface~prif_num_images_with_team prif_num_images_with_team interface~prif_num_images_with_team->proc~prif_num_images_with_team interface~prif_event_post prif_event_post interface~prif_event_post->proc~prif_event_post interface~prif_put_indirect_with_notify_indirect prif_put_indirect_with_notify_indirect interface~prif_put_indirect_with_notify_indirect->proc~prif_put_indirect_with_notify_indirect interface~prif_team_number prif_team_number interface~prif_team_number->proc~prif_team_number interface~prif_atomic_cas_int prif_atomic_cas_int interface~prif_atomic_cas_int->proc~prif_atomic_cas_int interface~prif_atomic_or prif_atomic_or interface~prif_atomic_or->proc~prif_atomic_or interface~prif_atomic_fetch_and_indirect prif_atomic_fetch_and_indirect interface~prif_atomic_fetch_and_indirect->proc~prif_atomic_fetch_and_indirect interface~prif_alias_destroy prif_alias_destroy interface~prif_alias_destroy->proc~prif_alias_destroy interface~prif_form_team prif_form_team interface~prif_form_team->proc~prif_form_team interface~prif_put_strided_with_notify_indirect prif_put_strided_with_notify_indirect interface~prif_put_strided_with_notify_indirect->proc~prif_put_strided_with_notify_indirect interface~prif_unlock prif_unlock interface~prif_unlock->proc~prif_unlock interface~prif_num_images_with_team_number prif_num_images_with_team_number interface~prif_num_images_with_team_number->proc~prif_num_images_with_team_number interface~prif_atomic_define_logical prif_atomic_define_logical interface~prif_atomic_define_logical->proc~prif_atomic_define_logical interface~prif_atomic_xor prif_atomic_xor interface~prif_atomic_xor->proc~prif_atomic_xor interface~prif_event_post_indirect prif_event_post_indirect interface~prif_event_post_indirect->proc~prif_event_post_indirect interface~prif_image_index_with_team prif_image_index_with_team interface~prif_image_index_with_team->proc~prif_image_index_with_team interface~prif_put_strided prif_put_strided interface~prif_put_strided->proc~prif_put_strided interface~prif_atomic_cas_int_indirect prif_atomic_cas_int_indirect interface~prif_atomic_cas_int_indirect->proc~prif_atomic_cas_int_indirect interface~prif_atomic_or_indirect prif_atomic_or_indirect interface~prif_atomic_or_indirect->proc~prif_atomic_or_indirect interface~prif_lcobound_with_dim prif_lcobound_with_dim interface~prif_lcobound_with_dim->proc~prif_lcobound_with_dim interface~prif_stopped_images prif_stopped_images interface~prif_stopped_images->proc~prif_stopped_images interface~prif_end_critical prif_end_critical interface~prif_end_critical->proc~prif_end_critical interface~prif_atomic_fetch_or prif_atomic_fetch_or interface~prif_atomic_fetch_or->proc~prif_atomic_fetch_or interface~prif_put_with_notify prif_put_with_notify interface~prif_put_with_notify->proc~prif_put_with_notify interface~prif_unlock_indirect prif_unlock_indirect interface~prif_unlock_indirect->proc~prif_unlock_indirect interface~prif_coshape prif_coshape interface~prif_coshape->proc~prif_coshape interface~prif_atomic_define_logical_indirect prif_atomic_define_logical_indirect interface~prif_atomic_define_logical_indirect->proc~prif_atomic_define_logical_indirect interface~prif_atomic_xor_indirect prif_atomic_xor_indirect interface~prif_atomic_xor_indirect->proc~prif_atomic_xor_indirect interface~prif_alias_create prif_alias_create interface~prif_alias_create->proc~prif_alias_create interface~prif_event_query prif_event_query interface~prif_event_query->proc~prif_event_query interface~prif_image_index_with_team_number prif_image_index_with_team_number interface~prif_image_index_with_team_number->proc~prif_image_index_with_team_number interface~prif_put_strided_indirect prif_put_strided_indirect interface~prif_put_strided_indirect->proc~prif_put_strided_indirect interface~prif_this_image_with_coarray prif_this_image_with_coarray interface~prif_this_image_with_coarray->proc~prif_this_image_with_coarray interface~prif_atomic_cas_logical prif_atomic_cas_logical interface~prif_atomic_cas_logical->proc~prif_atomic_cas_logical interface~prif_atomic_ref_int prif_atomic_ref_int interface~prif_atomic_ref_int->proc~prif_atomic_ref_int interface~prif_lock prif_lock interface~prif_lock->proc~prif_lock interface~prif_get_strided prif_get_strided interface~prif_get_strided->proc~prif_get_strided interface~prif_sync_images prif_sync_images interface~prif_sync_images->proc~prif_sync_images interface~prif_atomic_add_indirect prif_atomic_add_indirect interface~prif_atomic_add_indirect->proc~prif_atomic_add_indirect interface~prif_atomic_fetch_or_indirect prif_atomic_fetch_or_indirect interface~prif_atomic_fetch_or_indirect->proc~prif_atomic_fetch_or_indirect interface~prif_get_context_data prif_get_context_data interface~prif_get_context_data->proc~prif_get_context_data interface~prif_put_with_notify_indirect prif_put_with_notify_indirect interface~prif_put_with_notify_indirect->proc~prif_put_with_notify_indirect interface~prif_atomic_add prif_atomic_add interface~prif_atomic_add->proc~prif_atomic_add interface~prif_atomic_fetch_add prif_atomic_fetch_add interface~prif_atomic_fetch_add->proc~prif_atomic_fetch_add interface~prif_change_team prif_change_team interface~prif_change_team->proc~prif_change_team interface~prif_put_indirect_with_notify prif_put_indirect_with_notify interface~prif_put_indirect_with_notify->proc~prif_put_indirect_with_notify interface~prif_event_wait prif_event_wait interface~prif_event_wait->proc~prif_event_wait interface~prif_image_status prif_image_status interface~prif_image_status->proc~prif_image_status interface~prif_put_strided_indirect_with_notify prif_put_strided_indirect_with_notify interface~prif_put_strided_indirect_with_notify->proc~prif_put_strided_indirect_with_notify interface~prif_this_image_with_dim prif_this_image_with_dim interface~prif_this_image_with_dim->proc~prif_this_image_with_dim proc~base_pointer base_pointer proc~base_pointer->interface~assert interface~prif_atomic_cas_logical_indirect prif_atomic_cas_logical_indirect interface~prif_atomic_cas_logical_indirect->proc~prif_atomic_cas_logical_indirect interface~prif_atomic_ref_int_indirect prif_atomic_ref_int_indirect interface~prif_atomic_ref_int_indirect->proc~prif_atomic_ref_int_indirect interface~prif_critical prif_critical interface~prif_critical->proc~prif_critical interface~prif_lock_indirect prif_lock_indirect interface~prif_lock_indirect->proc~prif_lock_indirect interface~prif_get_strided_indirect prif_get_strided_indirect interface~prif_get_strided_indirect->proc~prif_get_strided_indirect interface~prif_sync_memory prif_sync_memory interface~prif_sync_memory->proc~prif_sync_memory interface~prif_atomic_and prif_atomic_and interface~prif_atomic_and->proc~prif_atomic_and interface~prif_atomic_fetch_xor prif_atomic_fetch_xor interface~prif_atomic_fetch_xor->proc~prif_atomic_fetch_xor interface~prif_set_context_data prif_set_context_data interface~prif_set_context_data->proc~prif_set_context_data interface~prif_atomic_fetch_add_indirect prif_atomic_fetch_add_indirect interface~prif_atomic_fetch_add_indirect->proc~prif_atomic_fetch_add_indirect interface~prif_fail_image prif_fail_image interface~prif_fail_image->proc~prif_fail_image interface~prif_put_strided_indirect_with_notify_indirect prif_put_strided_indirect_with_notify_indirect interface~prif_put_strided_indirect_with_notify_indirect->proc~prif_put_strided_indirect_with_notify_indirect interface~prif_ucobound_no_dim prif_ucobound_no_dim interface~prif_ucobound_no_dim->proc~prif_ucobound_no_dim interface~prif_atomic_define_int prif_atomic_define_int interface~prif_atomic_define_int->proc~prif_atomic_define_int interface~prif_notify_wait prif_notify_wait interface~prif_notify_wait->proc~prif_notify_wait interface~prif_atomic_ref_logical prif_atomic_ref_logical interface~prif_atomic_ref_logical->proc~prif_atomic_ref_logical interface~prif_get_team prif_get_team interface~prif_get_team->proc~prif_get_team interface~prif_end_team prif_end_team interface~prif_end_team->proc~prif_end_team interface~prif_sync_team prif_sync_team interface~prif_sync_team->proc~prif_sync_team interface~prif_atomic_and_indirect prif_atomic_and_indirect interface~prif_atomic_and_indirect->proc~prif_atomic_and_indirect interface~prif_atomic_fetch_xor_indirect prif_atomic_fetch_xor_indirect interface~prif_atomic_fetch_xor_indirect->proc~prif_atomic_fetch_xor_indirect proc~prif_get prif_get proc~prif_get->proc~base_pointer proc~prif_put prif_put proc~prif_put->proc~base_pointer interface~prif_get prif_get interface~prif_get->proc~prif_get interface~prif_put prif_put interface~prif_put->proc~prif_put Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_error_stop_integer.html"},{"title":"prif_allocate – Caffeine","text":"module procedure prif_allocate module module subroutine prif_allocate(size_in_bytes, allocated_memory, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_size_t) :: size_in_bytes type(c_ptr), intent(out) :: allocated_memory integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_allocate~~CallsGraph proc~prif_allocate prif_allocate interface~caf_allocate caf_allocate proc~prif_allocate->interface~caf_allocate Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_allocate~~CalledByGraph proc~prif_allocate prif_allocate interface~prif_allocate prif_allocate interface~prif_allocate->proc~prif_allocate Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_allocate.html"},{"title":"prif_allocate_coarray – Caffeine","text":"module procedure prif_allocate_coarray module module subroutine prif_allocate_coarray(lcobounds, ucobounds, lbounds, ubounds, element_size, final_func, coarray_handle, allocated_memory, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_intmax_t), intent(in), dimension(:) :: lcobounds integer(kind=c_intmax_t), intent(in), dimension(:) :: ucobounds integer(kind=c_intmax_t), intent(in), dimension(:) :: lbounds integer(kind=c_intmax_t), intent(in), dimension(:) :: ubounds integer(kind=c_size_t), intent(in) :: element_size type(c_funptr), intent(in) :: final_func type( prif_coarray_handle ), intent(out) :: coarray_handle type(c_ptr), intent(out) :: allocated_memory integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_allocate_coarray~~CallsGraph proc~prif_allocate_coarray prif_allocate_coarray interface~caf_this_image caf_this_image proc~prif_allocate_coarray->interface~caf_this_image proc~as_c_ptr as_c_ptr proc~prif_allocate_coarray->proc~as_c_ptr interface~prif_co_sum prif_co_sum proc~prif_allocate_coarray->interface~prif_co_sum proc~as_int as_int proc~prif_allocate_coarray->proc~as_int interface~caf_allocate caf_allocate proc~prif_allocate_coarray->interface~caf_allocate proc~add_to_team_list add_to_team_list proc~prif_allocate_coarray->proc~add_to_team_list proc~prif_co_sum prif_co_sum interface~prif_co_sum->proc~prif_co_sum proc~optional_value optional_value proc~prif_co_sum->proc~optional_value interface~caf_co_sum caf_co_sum proc~prif_co_sum->interface~caf_co_sum Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_allocate_coarray~~CalledByGraph proc~prif_allocate_coarray prif_allocate_coarray interface~prif_allocate_coarray prif_allocate_coarray interface~prif_allocate_coarray->proc~prif_allocate_coarray Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_allocate_coarray.html"},{"title":"prif_deallocate – Caffeine","text":"module procedure prif_deallocate module module subroutine prif_deallocate(mem, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in) :: mem integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_deallocate~~CallsGraph proc~prif_deallocate prif_deallocate interface~caf_deallocate caf_deallocate proc~prif_deallocate->interface~caf_deallocate Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_deallocate~~CalledByGraph proc~prif_deallocate prif_deallocate interface~prif_deallocate prif_deallocate interface~prif_deallocate->proc~prif_deallocate Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_deallocate.html"},{"title":"prif_deallocate_coarray – Caffeine","text":"module procedure prif_deallocate_coarray module module subroutine prif_deallocate_coarray(coarray_handles, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handles (:) integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_deallocate_coarray~~CallsGraph proc~prif_deallocate_coarray prif_deallocate_coarray interface~caf_deallocate caf_deallocate proc~prif_deallocate_coarray->interface~caf_deallocate interface~caf_this_image caf_this_image proc~prif_deallocate_coarray->interface~caf_this_image proc~remove_from_team_list remove_from_team_list proc~prif_deallocate_coarray->proc~remove_from_team_list interface~prif_sync_all prif_sync_all proc~prif_deallocate_coarray->interface~prif_sync_all interface~prif_error_stop prif_error_stop proc~prif_deallocate_coarray->interface~prif_error_stop proc~prif_sync_all prif_sync_all interface~prif_sync_all->proc~prif_sync_all proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop interface~caf_sync_all caf_sync_all proc~prif_sync_all->interface~caf_sync_all proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_deallocate_coarray~~CalledByGraph proc~prif_deallocate_coarray prif_deallocate_coarray interface~prif_deallocate_coarray prif_deallocate_coarray interface~prif_deallocate_coarray->proc~prif_deallocate_coarray Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_deallocate_coarray.html"},{"title":"prif_alias_create – Caffeine","text":"module procedure prif_alias_create module module subroutine prif_alias_create(source_handle, alias_lcobounds, alias_ucobounds, alias_handle) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: source_handle integer(kind=c_intmax_t), intent(in) :: alias_lcobounds (:) integer(kind=c_intmax_t), intent(in) :: alias_ucobounds (:) type( prif_coarray_handle ), intent(out) :: alias_handle Calls proc~~prif_alias_create~~CallsGraph proc~prif_alias_create prif_alias_create proc~unimplemented unimplemented proc~prif_alias_create->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_alias_create~~CalledByGraph proc~prif_alias_create prif_alias_create interface~prif_alias_create prif_alias_create interface~prif_alias_create->proc~prif_alias_create Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_alias_create.html"},{"title":"prif_alias_destroy – Caffeine","text":"module procedure prif_alias_destroy module module subroutine prif_alias_destroy(alias_handle) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: alias_handle Calls proc~~prif_alias_destroy~~CallsGraph proc~prif_alias_destroy prif_alias_destroy proc~unimplemented unimplemented proc~prif_alias_destroy->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_alias_destroy~~CalledByGraph proc~prif_alias_destroy prif_alias_destroy interface~prif_alias_destroy prif_alias_destroy interface~prif_alias_destroy->proc~prif_alias_destroy Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_alias_destroy.html"},{"title":"prif_critical – Caffeine","text":"module procedure prif_critical module module subroutine prif_critical(critical_coarray, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: critical_coarray integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_critical~~CallsGraph proc~prif_critical prif_critical proc~unimplemented unimplemented proc~prif_critical->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_critical~~CalledByGraph proc~prif_critical prif_critical interface~prif_critical prif_critical interface~prif_critical->proc~prif_critical Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_critical.html"},{"title":"prif_end_critical – Caffeine","text":"module procedure prif_end_critical module module subroutine prif_end_critical(critical_coarray) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: critical_coarray Calls proc~~prif_end_critical~~CallsGraph proc~prif_end_critical prif_end_critical proc~unimplemented unimplemented proc~prif_end_critical->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_end_critical~~CalledByGraph proc~prif_end_critical prif_end_critical interface~prif_end_critical prif_end_critical interface~prif_end_critical->proc~prif_end_critical Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_end_critical.html"},{"title":"prif_lock – Caffeine","text":"module procedure prif_lock module module subroutine prif_lock(image_num, coarray_handle, offset, acquired_lock, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset logical(kind=c_bool), intent(out), optional :: acquired_lock integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_lock~~CallsGraph proc~prif_lock prif_lock proc~unimplemented unimplemented proc~prif_lock->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_lock~~CalledByGraph proc~prif_lock prif_lock interface~prif_lock prif_lock interface~prif_lock->proc~prif_lock Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_lock.html"},{"title":"prif_lock_indirect – Caffeine","text":"module procedure prif_lock_indirect module module subroutine prif_lock_indirect(image_num, lock_var_ptr, acquired_lock, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: lock_var_ptr logical(kind=c_bool), intent(out), optional :: acquired_lock integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_lock_indirect~~CallsGraph proc~prif_lock_indirect prif_lock_indirect proc~unimplemented unimplemented proc~prif_lock_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_lock_indirect~~CalledByGraph proc~prif_lock_indirect prif_lock_indirect interface~prif_lock_indirect prif_lock_indirect interface~prif_lock_indirect->proc~prif_lock_indirect Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_lock_indirect.html"},{"title":"prif_unlock – Caffeine","text":"module procedure prif_unlock module module subroutine prif_unlock(image_num, coarray_handle, offset, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_unlock~~CallsGraph proc~prif_unlock prif_unlock proc~unimplemented unimplemented proc~prif_unlock->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_unlock~~CalledByGraph proc~prif_unlock prif_unlock interface~prif_unlock prif_unlock interface~prif_unlock->proc~prif_unlock Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_unlock.html"},{"title":"prif_unlock_indirect – Caffeine","text":"module procedure prif_unlock_indirect module module subroutine prif_unlock_indirect(image_num, lock_var_ptr, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: lock_var_ptr integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_unlock_indirect~~CallsGraph proc~prif_unlock_indirect prif_unlock_indirect proc~unimplemented unimplemented proc~prif_unlock_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_unlock_indirect~~CalledByGraph proc~prif_unlock_indirect prif_unlock_indirect interface~prif_unlock_indirect prif_unlock_indirect interface~prif_unlock_indirect->proc~prif_unlock_indirect Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_unlock_indirect.html"},{"title":"prif_failed_images – Caffeine","text":"module procedure prif_failed_images module module subroutine prif_failed_images(team, failed_images) Interface → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in), optional :: team integer(kind=c_int), intent(out), allocatable :: failed_images (:) Calls proc~~prif_failed_images~~CallsGraph proc~prif_failed_images prif_failed_images proc~unimplemented unimplemented proc~prif_failed_images->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_failed_images~~CalledByGraph proc~prif_failed_images prif_failed_images interface~prif_failed_images prif_failed_images interface~prif_failed_images->proc~prif_failed_images Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_failed_images.html"},{"title":"prif_image_status – Caffeine","text":"module procedure prif_image_status impure elemental module module subroutine prif_image_status(image, team, image_status) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image type( prif_team_type ), intent(in), optional :: team integer(kind=c_int), intent(out) :: image_status Calls proc~~prif_image_status~~CallsGraph proc~prif_image_status prif_image_status proc~unimplemented unimplemented proc~prif_image_status->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_image_status~~CalledByGraph proc~prif_image_status prif_image_status interface~prif_image_status prif_image_status interface~prif_image_status->proc~prif_image_status Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_image_status.html"},{"title":"prif_num_images – Caffeine","text":"module procedure prif_num_images module module subroutine prif_num_images(num_images) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(out) :: num_images Calls proc~~prif_num_images~~CallsGraph proc~prif_num_images prif_num_images interface~caf_num_images caf_num_images proc~prif_num_images->interface~caf_num_images Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_num_images~~CalledByGraph proc~prif_num_images prif_num_images interface~prif_num_images prif_num_images interface~prif_num_images->proc~prif_num_images proc~base_pointer base_pointer proc~base_pointer->interface~prif_num_images proc~prif_image_index prif_image_index proc~prif_image_index->interface~prif_num_images proc~prif_get prif_get proc~prif_get->proc~base_pointer proc~prif_put prif_put proc~prif_put->proc~base_pointer interface~prif_image_index prif_image_index interface~prif_image_index->proc~prif_image_index interface~prif_get prif_get interface~prif_get->proc~prif_get interface~prif_put prif_put interface~prif_put->proc~prif_put Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_num_images.html"},{"title":"prif_num_images_with_team – Caffeine","text":"module procedure prif_num_images_with_team module module subroutine prif_num_images_with_team(team, num_images) Interface → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in) :: team integer(kind=c_int), intent(out) :: num_images Calls proc~~prif_num_images_with_team~~CallsGraph proc~prif_num_images_with_team prif_num_images_with_team proc~unimplemented unimplemented proc~prif_num_images_with_team->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_num_images_with_team~~CalledByGraph proc~prif_num_images_with_team prif_num_images_with_team interface~prif_num_images_with_team prif_num_images_with_team interface~prif_num_images_with_team->proc~prif_num_images_with_team Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_num_images_with_team.html"},{"title":"prif_num_images_with_team_number – Caffeine","text":"module procedure prif_num_images_with_team_number module module subroutine prif_num_images_with_team_number(team_number, num_images) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_intmax_t), intent(in) :: team_number integer(kind=c_int), intent(out) :: num_images Calls proc~~prif_num_images_with_team_number~~CallsGraph proc~prif_num_images_with_team_number prif_num_images_with_team_number proc~unimplemented unimplemented proc~prif_num_images_with_team_number->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_num_images_with_team_number~~CalledByGraph proc~prif_num_images_with_team_number prif_num_images_with_team_number interface~prif_num_images_with_team_number prif_num_images_with_team_number interface~prif_num_images_with_team_number->proc~prif_num_images_with_team_number Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_num_images_with_team_number.html"},{"title":"prif_stopped_images – Caffeine","text":"module procedure prif_stopped_images module module subroutine prif_stopped_images(team, stopped_images) Interface → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in), optional :: team integer(kind=c_int), intent(out), allocatable :: stopped_images (:) Calls proc~~prif_stopped_images~~CallsGraph proc~prif_stopped_images prif_stopped_images proc~unimplemented unimplemented proc~prif_stopped_images->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_stopped_images~~CalledByGraph proc~prif_stopped_images prif_stopped_images interface~prif_stopped_images prif_stopped_images interface~prif_stopped_images->proc~prif_stopped_images Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_stopped_images.html"},{"title":"prif_this_image_no_coarray – Caffeine","text":"module procedure prif_this_image_no_coarray module module subroutine prif_this_image_no_coarray(team, this_image) Interface → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in), optional :: team integer(kind=c_int), intent(out) :: this_image Calls proc~~prif_this_image_no_coarray~~CallsGraph proc~prif_this_image_no_coarray prif_this_image_no_coarray interface~caf_this_image caf_this_image proc~prif_this_image_no_coarray->interface~caf_this_image Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_this_image_no_coarray~~CalledByGraph proc~prif_this_image_no_coarray prif_this_image_no_coarray interface~prif_this_image_no_coarray prif_this_image_no_coarray interface~prif_this_image_no_coarray->proc~prif_this_image_no_coarray Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_this_image_no_coarray.html"},{"title":"prif_this_image_with_coarray – Caffeine","text":"module procedure prif_this_image_with_coarray module module subroutine prif_this_image_with_coarray(coarray_handle, team, cosubscripts) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle type( prif_team_type ), intent(in), optional :: team integer(kind=c_intmax_t), intent(out) :: cosubscripts (:) Calls proc~~prif_this_image_with_coarray~~CallsGraph proc~prif_this_image_with_coarray prif_this_image_with_coarray proc~unimplemented unimplemented proc~prif_this_image_with_coarray->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_this_image_with_coarray~~CalledByGraph proc~prif_this_image_with_coarray prif_this_image_with_coarray interface~prif_this_image_with_coarray prif_this_image_with_coarray interface~prif_this_image_with_coarray->proc~prif_this_image_with_coarray Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_this_image_with_coarray.html"},{"title":"prif_this_image_with_dim – Caffeine","text":"module procedure prif_this_image_with_dim module module subroutine prif_this_image_with_dim(coarray_handle, dim, team, cosubscript) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_int), intent(in) :: dim type( prif_team_type ), intent(in), optional :: team integer(kind=c_intmax_t), intent(out) :: cosubscript Calls proc~~prif_this_image_with_dim~~CallsGraph proc~prif_this_image_with_dim prif_this_image_with_dim proc~unimplemented unimplemented proc~prif_this_image_with_dim->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_this_image_with_dim~~CalledByGraph proc~prif_this_image_with_dim prif_this_image_with_dim interface~prif_this_image_with_dim prif_this_image_with_dim interface~prif_this_image_with_dim->proc~prif_this_image_with_dim Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_this_image_with_dim.html"},{"title":"prif_get – Caffeine","text":"module procedure prif_get module module subroutine prif_get(image_num, coarray_handle, offset, current_image_buffer, size_in_bytes, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_size_t), intent(in) :: size_in_bytes integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_get~~CallsGraph proc~prif_get prif_get proc~base_pointer base_pointer proc~prif_get->proc~base_pointer interface~prif_get_indirect prif_get_indirect proc~prif_get->interface~prif_get_indirect interface~prif_num_images prif_num_images proc~base_pointer->interface~prif_num_images interface~caf_convert_base_addr caf_convert_base_addr proc~base_pointer->interface~caf_convert_base_addr interface~assert assert proc~base_pointer->interface~assert proc~prif_get_indirect prif_get_indirect interface~prif_get_indirect->proc~prif_get_indirect proc~prif_num_images prif_num_images interface~prif_num_images->proc~prif_num_images interface~caf_get caf_get proc~prif_get_indirect->interface~caf_get proc~assert assert interface~assert->proc~assert interface~caf_num_images caf_num_images proc~prif_num_images->interface~caf_num_images interface~prif_error_stop prif_error_stop proc~assert->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_get~~CalledByGraph proc~prif_get prif_get interface~prif_get prif_get interface~prif_get->proc~prif_get Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_get.html"},{"title":"prif_get_indirect – Caffeine","text":"module procedure prif_get_indirect module module subroutine prif_get_indirect(image_num, remote_ptr, current_image_buffer, size_in_bytes, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: remote_ptr type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_size_t), intent(in) :: size_in_bytes integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_get_indirect~~CallsGraph proc~prif_get_indirect prif_get_indirect interface~caf_get caf_get proc~prif_get_indirect->interface~caf_get Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_get_indirect~~CalledByGraph proc~prif_get_indirect prif_get_indirect interface~prif_get_indirect prif_get_indirect interface~prif_get_indirect->proc~prif_get_indirect proc~prif_get prif_get proc~prif_get->interface~prif_get_indirect interface~prif_get prif_get interface~prif_get->proc~prif_get Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_get_indirect.html"},{"title":"prif_get_strided – Caffeine","text":"module procedure prif_get_strided module module subroutine prif_get_strided(image_num, coarray_handle, offset, remote_stride, current_image_buffer, current_image_stride, element_size, extent, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=c_ptrdiff_t), intent(in) :: remote_stride (:) type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_ptrdiff_t), intent(in) :: current_image_stride (:) integer(kind=c_size_t), intent(in) :: element_size integer(kind=c_size_t), intent(in) :: extent (:) integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_get_strided~~CallsGraph proc~prif_get_strided prif_get_strided proc~unimplemented unimplemented proc~prif_get_strided->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_get_strided~~CalledByGraph proc~prif_get_strided prif_get_strided interface~prif_get_strided prif_get_strided interface~prif_get_strided->proc~prif_get_strided Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_get_strided.html"},{"title":"prif_get_strided_indirect – Caffeine","text":"module procedure prif_get_strided_indirect module module subroutine prif_get_strided_indirect(image_num, remote_ptr, remote_stride, current_image_buffer, current_image_stride, element_size, extent, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: remote_ptr integer(kind=c_ptrdiff_t), intent(in) :: remote_stride (:) type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_ptrdiff_t), intent(in) :: current_image_stride (:) integer(kind=c_size_t), intent(in) :: element_size integer(kind=c_size_t), intent(in) :: extent (:) integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_get_strided_indirect~~CallsGraph proc~prif_get_strided_indirect prif_get_strided_indirect proc~unimplemented unimplemented proc~prif_get_strided_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_get_strided_indirect~~CalledByGraph proc~prif_get_strided_indirect prif_get_strided_indirect interface~prif_get_strided_indirect prif_get_strided_indirect interface~prif_get_strided_indirect->proc~prif_get_strided_indirect Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_get_strided_indirect.html"},{"title":"prif_put – Caffeine","text":"module procedure prif_put module module subroutine prif_put(image_num, coarray_handle, offset, current_image_buffer, size_in_bytes, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_size_t), intent(in) :: size_in_bytes integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_put~~CallsGraph proc~prif_put prif_put proc~base_pointer base_pointer proc~prif_put->proc~base_pointer interface~prif_put_indirect prif_put_indirect proc~prif_put->interface~prif_put_indirect interface~prif_num_images prif_num_images proc~base_pointer->interface~prif_num_images interface~caf_convert_base_addr caf_convert_base_addr proc~base_pointer->interface~caf_convert_base_addr interface~assert assert proc~base_pointer->interface~assert proc~prif_put_indirect prif_put_indirect interface~prif_put_indirect->proc~prif_put_indirect proc~prif_num_images prif_num_images interface~prif_num_images->proc~prif_num_images interface~caf_put caf_put proc~prif_put_indirect->interface~caf_put proc~assert assert interface~assert->proc~assert interface~caf_num_images caf_num_images proc~prif_num_images->interface~caf_num_images interface~prif_error_stop prif_error_stop proc~assert->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_put~~CalledByGraph proc~prif_put prif_put interface~prif_put prif_put interface~prif_put->proc~prif_put Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_put.html"},{"title":"prif_put_indirect – Caffeine","text":"module procedure prif_put_indirect module module subroutine prif_put_indirect(image_num, remote_ptr, current_image_buffer, size_in_bytes, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: remote_ptr type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_size_t), intent(in) :: size_in_bytes integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_put_indirect~~CallsGraph proc~prif_put_indirect prif_put_indirect interface~caf_put caf_put proc~prif_put_indirect->interface~caf_put Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_put_indirect~~CalledByGraph proc~prif_put_indirect prif_put_indirect interface~prif_put_indirect prif_put_indirect interface~prif_put_indirect->proc~prif_put_indirect proc~prif_put prif_put proc~prif_put->interface~prif_put_indirect interface~prif_put prif_put interface~prif_put->proc~prif_put Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_put_indirect.html"},{"title":"prif_put_indirect_with_notify – Caffeine","text":"module procedure prif_put_indirect_with_notify module module subroutine prif_put_indirect_with_notify(image_num, remote_ptr, current_image_buffer, size_in_bytes, notify_coarray_handle, notify_offset, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: remote_ptr type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_size_t), intent(in) :: size_in_bytes type( prif_coarray_handle ), intent(in) :: notify_coarray_handle integer(kind=c_size_t), intent(in) :: notify_offset integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_put_indirect_with_notify~~CallsGraph proc~prif_put_indirect_with_notify prif_put_indirect_with_notify proc~unimplemented unimplemented proc~prif_put_indirect_with_notify->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_put_indirect_with_notify~~CalledByGraph proc~prif_put_indirect_with_notify prif_put_indirect_with_notify interface~prif_put_indirect_with_notify prif_put_indirect_with_notify interface~prif_put_indirect_with_notify->proc~prif_put_indirect_with_notify Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_put_indirect_with_notify.html"},{"title":"prif_put_indirect_with_notify_indirect – Caffeine","text":"module procedure prif_put_indirect_with_notify_indirect module module subroutine prif_put_indirect_with_notify_indirect(image_num, remote_ptr, current_image_buffer, size_in_bytes, notify_ptr, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: remote_ptr type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_size_t), intent(in) :: size_in_bytes integer(kind=c_intptr_t), intent(in) :: notify_ptr integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_put_indirect_with_notify_indirect~~CallsGraph proc~prif_put_indirect_with_notify_indirect prif_put_indirect_with_notify_indirect proc~unimplemented unimplemented proc~prif_put_indirect_with_notify_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_put_indirect_with_notify_indirect~~CalledByGraph proc~prif_put_indirect_with_notify_indirect prif_put_indirect_with_notify_indirect interface~prif_put_indirect_with_notify_indirect prif_put_indirect_with_notify_indirect interface~prif_put_indirect_with_notify_indirect->proc~prif_put_indirect_with_notify_indirect Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_put_indirect_with_notify_indirect.html"},{"title":"prif_put_strided – Caffeine","text":"module procedure prif_put_strided module module subroutine prif_put_strided(image_num, coarray_handle, offset, remote_stride, current_image_buffer, current_image_stride, element_size, extent, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=c_ptrdiff_t), intent(in) :: remote_stride (:) type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_ptrdiff_t), intent(in) :: current_image_stride (:) integer(kind=c_size_t), intent(in) :: element_size integer(kind=c_size_t), intent(in) :: extent (:) integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_put_strided~~CallsGraph proc~prif_put_strided prif_put_strided proc~unimplemented unimplemented proc~prif_put_strided->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_put_strided~~CalledByGraph proc~prif_put_strided prif_put_strided interface~prif_put_strided prif_put_strided interface~prif_put_strided->proc~prif_put_strided Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_put_strided.html"},{"title":"prif_put_strided_indirect – Caffeine","text":"module procedure prif_put_strided_indirect module module subroutine prif_put_strided_indirect(image_num, remote_ptr, remote_stride, current_image_buffer, current_image_stride, element_size, extent, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: remote_ptr integer(kind=c_ptrdiff_t), intent(in) :: remote_stride (:) type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_ptrdiff_t), intent(in) :: current_image_stride (:) integer(kind=c_size_t), intent(in) :: element_size integer(kind=c_size_t), intent(in) :: extent (:) integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_put_strided_indirect~~CallsGraph proc~prif_put_strided_indirect prif_put_strided_indirect proc~unimplemented unimplemented proc~prif_put_strided_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_put_strided_indirect~~CalledByGraph proc~prif_put_strided_indirect prif_put_strided_indirect interface~prif_put_strided_indirect prif_put_strided_indirect interface~prif_put_strided_indirect->proc~prif_put_strided_indirect Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_put_strided_indirect.html"},{"title":"prif_put_strided_indirect_with_notify – Caffeine","text":"module procedure prif_put_strided_indirect_with_notify module module subroutine prif_put_strided_indirect_with_notify(image_num, remote_ptr, remote_stride, current_image_buffer, current_image_stride, element_size, extent, notify_coarray_handle, notify_offset, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: remote_ptr integer(kind=c_ptrdiff_t), intent(in) :: remote_stride (:) type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_ptrdiff_t), intent(in) :: current_image_stride (:) integer(kind=c_size_t), intent(in) :: element_size integer(kind=c_size_t), intent(in) :: extent (:) type( prif_coarray_handle ), intent(in) :: notify_coarray_handle integer(kind=c_size_t), intent(in) :: notify_offset integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_put_strided_indirect_with_notify~~CallsGraph proc~prif_put_strided_indirect_with_notify prif_put_strided_indirect_with_notify proc~unimplemented unimplemented proc~prif_put_strided_indirect_with_notify->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_put_strided_indirect_with_notify~~CalledByGraph proc~prif_put_strided_indirect_with_notify prif_put_strided_indirect_with_notify interface~prif_put_strided_indirect_with_notify prif_put_strided_indirect_with_notify interface~prif_put_strided_indirect_with_notify->proc~prif_put_strided_indirect_with_notify Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_put_strided_indirect_with_notify.html"},{"title":"prif_put_strided_indirect_with_notify_indirect – Caffeine","text":"module procedure prif_put_strided_indirect_with_notify_indirect module module subroutine prif_put_strided_indirect_with_notify_indirect(image_num, remote_ptr, remote_stride, current_image_buffer, current_image_stride, element_size, extent, notify_ptr, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: remote_ptr integer(kind=c_ptrdiff_t), intent(in) :: remote_stride (:) type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_ptrdiff_t), intent(in) :: current_image_stride (:) integer(kind=c_size_t), intent(in) :: element_size integer(kind=c_size_t), intent(in) :: extent (:) integer(kind=c_intptr_t), intent(in) :: notify_ptr integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_put_strided_indirect_with_notify_indirect~~CallsGraph proc~prif_put_strided_indirect_with_notify_indirect prif_put_strided_indirect_with_notify_indirect proc~unimplemented unimplemented proc~prif_put_strided_indirect_with_notify_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_put_strided_indirect_with_notify_indirect~~CalledByGraph proc~prif_put_strided_indirect_with_notify_indirect prif_put_strided_indirect_with_notify_indirect interface~prif_put_strided_indirect_with_notify_indirect prif_put_strided_indirect_with_notify_indirect interface~prif_put_strided_indirect_with_notify_indirect->proc~prif_put_strided_indirect_with_notify_indirect Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_put_strided_indirect_with_notify_indirect.html"},{"title":"prif_put_strided_with_notify – Caffeine","text":"module procedure prif_put_strided_with_notify module module subroutine prif_put_strided_with_notify(image_num, coarray_handle, offset, remote_stride, current_image_buffer, current_image_stride, element_size, extent, notify_coarray_handle, notify_offset, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=c_ptrdiff_t), intent(in) :: remote_stride (:) type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_ptrdiff_t), intent(in) :: current_image_stride (:) integer(kind=c_size_t), intent(in) :: element_size integer(kind=c_size_t), intent(in) :: extent (:) type( prif_coarray_handle ), intent(in) :: notify_coarray_handle integer(kind=c_size_t), intent(in) :: notify_offset integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_put_strided_with_notify~~CallsGraph proc~prif_put_strided_with_notify prif_put_strided_with_notify proc~unimplemented unimplemented proc~prif_put_strided_with_notify->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_put_strided_with_notify~~CalledByGraph proc~prif_put_strided_with_notify prif_put_strided_with_notify interface~prif_put_strided_with_notify prif_put_strided_with_notify interface~prif_put_strided_with_notify->proc~prif_put_strided_with_notify Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_put_strided_with_notify.html"},{"title":"prif_put_strided_with_notify_indirect – Caffeine","text":"module procedure prif_put_strided_with_notify_indirect module module subroutine prif_put_strided_with_notify_indirect(image_num, coarray_handle, offset, remote_stride, current_image_buffer, current_image_stride, element_size, extent, notify_ptr, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=c_ptrdiff_t), intent(in) :: remote_stride (:) type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_ptrdiff_t), intent(in) :: current_image_stride (:) integer(kind=c_size_t), intent(in) :: element_size integer(kind=c_size_t), intent(in) :: extent (:) integer(kind=c_intptr_t), intent(in) :: notify_ptr integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_put_strided_with_notify_indirect~~CallsGraph proc~prif_put_strided_with_notify_indirect prif_put_strided_with_notify_indirect proc~unimplemented unimplemented proc~prif_put_strided_with_notify_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_put_strided_with_notify_indirect~~CalledByGraph proc~prif_put_strided_with_notify_indirect prif_put_strided_with_notify_indirect interface~prif_put_strided_with_notify_indirect prif_put_strided_with_notify_indirect interface~prif_put_strided_with_notify_indirect->proc~prif_put_strided_with_notify_indirect Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_put_strided_with_notify_indirect.html"},{"title":"prif_put_with_notify – Caffeine","text":"module procedure prif_put_with_notify module module subroutine prif_put_with_notify(image_num, coarray_handle, offset, current_image_buffer, size_in_bytes, notify_coarray_handle, notify_offset, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_size_t), intent(in) :: size_in_bytes type( prif_coarray_handle ), intent(in) :: notify_coarray_handle integer(kind=c_size_t), intent(in) :: notify_offset integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_put_with_notify~~CallsGraph proc~prif_put_with_notify prif_put_with_notify proc~unimplemented unimplemented proc~prif_put_with_notify->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_put_with_notify~~CalledByGraph proc~prif_put_with_notify prif_put_with_notify interface~prif_put_with_notify prif_put_with_notify interface~prif_put_with_notify->proc~prif_put_with_notify Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_put_with_notify.html"},{"title":"prif_put_with_notify_indirect – Caffeine","text":"module procedure prif_put_with_notify_indirect module module subroutine prif_put_with_notify_indirect(image_num, coarray_handle, offset, current_image_buffer, size_in_bytes, notify_ptr, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_size_t), intent(in) :: size_in_bytes integer(kind=c_intptr_t), intent(in) :: notify_ptr integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_put_with_notify_indirect~~CallsGraph proc~prif_put_with_notify_indirect prif_put_with_notify_indirect proc~unimplemented unimplemented proc~prif_put_with_notify_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_put_with_notify_indirect~~CalledByGraph proc~prif_put_with_notify_indirect prif_put_with_notify_indirect interface~prif_put_with_notify_indirect prif_put_with_notify_indirect interface~prif_put_with_notify_indirect->proc~prif_put_with_notify_indirect Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_put_with_notify_indirect.html"},{"title":"prif_event_post – Caffeine","text":"module procedure prif_event_post module module subroutine prif_event_post(image_num, coarray_handle, offset, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_event_post~~CallsGraph proc~prif_event_post prif_event_post proc~unimplemented unimplemented proc~prif_event_post->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_event_post~~CalledByGraph proc~prif_event_post prif_event_post interface~prif_event_post prif_event_post interface~prif_event_post->proc~prif_event_post Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_event_post.html"},{"title":"prif_event_post_indirect – Caffeine","text":"module procedure prif_event_post_indirect module module subroutine prif_event_post_indirect(image_num, event_var_ptr, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: event_var_ptr integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_event_post_indirect~~CallsGraph proc~prif_event_post_indirect prif_event_post_indirect proc~unimplemented unimplemented proc~prif_event_post_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_event_post_indirect~~CalledByGraph proc~prif_event_post_indirect prif_event_post_indirect interface~prif_event_post_indirect prif_event_post_indirect interface~prif_event_post_indirect->proc~prif_event_post_indirect Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_event_post_indirect.html"},{"title":"prif_event_query – Caffeine","text":"module procedure prif_event_query module module subroutine prif_event_query(event_var_ptr, count, stat) Interface → Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in) :: event_var_ptr integer(kind=c_intmax_t), intent(out) :: count integer(kind=c_int), intent(out), optional :: stat Calls proc~~prif_event_query~~CallsGraph proc~prif_event_query prif_event_query proc~unimplemented unimplemented proc~prif_event_query->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_event_query~~CalledByGraph proc~prif_event_query prif_event_query interface~prif_event_query prif_event_query interface~prif_event_query->proc~prif_event_query Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_event_query.html"},{"title":"prif_event_wait – Caffeine","text":"module procedure prif_event_wait module module subroutine prif_event_wait(event_var_ptr, until_count, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in) :: event_var_ptr integer(kind=c_intmax_t), intent(in), optional :: until_count integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_event_wait~~CallsGraph proc~prif_event_wait prif_event_wait proc~unimplemented unimplemented proc~prif_event_wait->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_event_wait~~CalledByGraph proc~prif_event_wait prif_event_wait interface~prif_event_wait prif_event_wait interface~prif_event_wait->proc~prif_event_wait Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_event_wait.html"},{"title":"prif_notify_wait – Caffeine","text":"module procedure prif_notify_wait module module subroutine prif_notify_wait(notify_var_ptr, until_count, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in) :: notify_var_ptr integer(kind=c_intmax_t), intent(in), optional :: until_count integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_notify_wait~~CallsGraph proc~prif_notify_wait prif_notify_wait proc~unimplemented unimplemented proc~prif_notify_wait->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_notify_wait~~CalledByGraph proc~prif_notify_wait prif_notify_wait interface~prif_notify_wait prif_notify_wait interface~prif_notify_wait->proc~prif_notify_wait Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_notify_wait.html"},{"title":"prif_sync_all – Caffeine","text":"module procedure prif_sync_all module module subroutine prif_sync_all(stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_sync_all~~CallsGraph proc~prif_sync_all prif_sync_all interface~caf_sync_all caf_sync_all proc~prif_sync_all->interface~caf_sync_all Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_sync_all~~CalledByGraph proc~prif_sync_all prif_sync_all interface~prif_sync_all prif_sync_all interface~prif_sync_all->proc~prif_sync_all proc~prif_deallocate_coarray prif_deallocate_coarray proc~prif_deallocate_coarray->interface~prif_sync_all interface~prif_deallocate_coarray prif_deallocate_coarray interface~prif_deallocate_coarray->proc~prif_deallocate_coarray Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_sync_all.html"},{"title":"prif_sync_images – Caffeine","text":"module procedure prif_sync_images module module subroutine prif_sync_images(image_set, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in), optional :: image_set (:) integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_sync_images~~CallsGraph proc~prif_sync_images prif_sync_images proc~unimplemented unimplemented proc~prif_sync_images->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_sync_images~~CalledByGraph proc~prif_sync_images prif_sync_images interface~prif_sync_images prif_sync_images interface~prif_sync_images->proc~prif_sync_images Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_sync_images.html"},{"title":"prif_sync_memory – Caffeine","text":"module procedure prif_sync_memory module module subroutine prif_sync_memory(stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_sync_memory~~CallsGraph proc~prif_sync_memory prif_sync_memory proc~unimplemented unimplemented proc~prif_sync_memory->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_sync_memory~~CalledByGraph proc~prif_sync_memory prif_sync_memory interface~prif_sync_memory prif_sync_memory interface~prif_sync_memory->proc~prif_sync_memory Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_sync_memory.html"},{"title":"prif_sync_team – Caffeine","text":"module procedure prif_sync_team module module subroutine prif_sync_team(team, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in) :: team integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_sync_team~~CallsGraph proc~prif_sync_team prif_sync_team proc~unimplemented unimplemented proc~prif_sync_team->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_sync_team~~CalledByGraph proc~prif_sync_team prif_sync_team interface~prif_sync_team prif_sync_team interface~prif_sync_team->proc~prif_sync_team Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_sync_team.html"},{"title":"prif_init – Caffeine","text":"module procedure prif_init module module subroutine prif_init(stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(out) :: stat Calls proc~~prif_init~~CallsGraph proc~prif_init prif_init interface~caf_caffeinate caf_caffeinate proc~prif_init->interface~caf_caffeinate Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_init~~CalledByGraph proc~prif_init prif_init interface~prif_init prif_init interface~prif_init->proc~prif_init Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_init.html"},{"title":"assert – Caffeine","text":"module procedure assert pure module module subroutine assert(assertion, description, diagnostics) Interface → Arguments Type Intent Optional Attributes Name logical, intent(in) :: assertion character(len=*), intent(in) :: description class(*), intent(in), optional :: diagnostics Calls proc~~assert~~CallsGraph proc~assert assert interface~prif_error_stop prif_error_stop proc~assert->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~assert~~CalledByGraph proc~assert assert interface~assert assert interface~assert->proc~assert proc~prif_co_reduce prif_co_reduce proc~prif_co_reduce->interface~assert proc~base_pointer base_pointer proc~base_pointer->interface~assert interface~prif_co_reduce prif_co_reduce interface~prif_co_reduce->proc~prif_co_reduce proc~prif_get prif_get proc~prif_get->proc~base_pointer proc~prif_put prif_put proc~prif_put->proc~base_pointer proc~prif_co_max prif_co_max proc~prif_co_max->interface~prif_co_reduce interface~prif_get prif_get interface~prif_get->proc~prif_get interface~prif_put prif_put interface~prif_put->proc~prif_put proc~prif_co_min prif_co_min proc~prif_co_min->interface~prif_co_reduce interface~prif_co_max prif_co_max interface~prif_co_max->proc~prif_co_max interface~prif_co_min prif_co_min interface~prif_co_min->proc~prif_co_min Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/assert.html"},{"title":"prif_error_stop – Caffeine","text":"module procedure prif_error_stop pure module module subroutine prif_error_stop(quiet, stop_code_int, stop_code_char) Interface → Arguments Type Intent Optional Attributes Name logical(kind=c_bool), intent(in) :: quiet integer(kind=c_int), intent(in), optional :: stop_code_int character(len=*), intent(in), optional :: stop_code_char Calls proc~~prif_error_stop~~CallsGraph proc~prif_error_stop prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_error_stop~~CalledByGraph proc~prif_error_stop prif_error_stop interface~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~assert assert proc~assert->interface~prif_error_stop proc~prif_co_min prif_co_min proc~prif_co_min->interface~prif_error_stop interface~prif_co_reduce prif_co_reduce proc~prif_co_min->interface~prif_co_reduce proc~unimplemented unimplemented proc~unimplemented->interface~prif_error_stop proc~prif_co_max prif_co_max proc~prif_co_max->interface~prif_error_stop proc~prif_co_max->interface~prif_co_reduce proc~prif_co_reduce prif_co_reduce proc~prif_co_reduce->interface~prif_error_stop interface~assert assert proc~prif_co_reduce->interface~assert proc~prif_deallocate_coarray prif_deallocate_coarray proc~prif_deallocate_coarray->interface~prif_error_stop proc~prif_atomic_define_int prif_atomic_define_int proc~prif_atomic_define_int->proc~unimplemented proc~prif_atomic_ref_logical prif_atomic_ref_logical proc~prif_atomic_ref_logical->proc~unimplemented proc~prif_notify_wait prif_notify_wait proc~prif_notify_wait->proc~unimplemented proc~prif_end_team prif_end_team proc~prif_end_team->proc~unimplemented proc~prif_get_team prif_get_team proc~prif_get_team->proc~unimplemented proc~prif_sync_team prif_sync_team proc~prif_sync_team->proc~unimplemented interface~prif_co_max prif_co_max interface~prif_co_max->proc~prif_co_max proc~prif_atomic_and_indirect prif_atomic_and_indirect proc~prif_atomic_and_indirect->proc~unimplemented proc~prif_atomic_fetch_xor_indirect prif_atomic_fetch_xor_indirect proc~prif_atomic_fetch_xor_indirect->proc~unimplemented proc~prif_size_bytes prif_size_bytes proc~prif_size_bytes->proc~unimplemented interface~prif_deallocate_coarray prif_deallocate_coarray interface~prif_deallocate_coarray->proc~prif_deallocate_coarray proc~prif_atomic_fetch_and prif_atomic_fetch_and proc~prif_atomic_fetch_and->proc~unimplemented proc~prif_failed_images prif_failed_images proc~prif_failed_images->proc~unimplemented proc~prif_put_strided_with_notify prif_put_strided_with_notify proc~prif_put_strided_with_notify->proc~unimplemented proc~prif_ucobound_with_dim prif_ucobound_with_dim proc~prif_ucobound_with_dim->proc~unimplemented proc~prif_atomic_define_int_indirect prif_atomic_define_int_indirect proc~prif_atomic_define_int_indirect->proc~unimplemented proc~prif_atomic_ref_logical_indirect prif_atomic_ref_logical_indirect proc~prif_atomic_ref_logical_indirect->proc~unimplemented proc~prif_num_images_with_team prif_num_images_with_team proc~prif_num_images_with_team->proc~unimplemented proc~prif_event_post prif_event_post proc~prif_event_post->proc~unimplemented proc~prif_put_indirect_with_notify_indirect prif_put_indirect_with_notify_indirect proc~prif_put_indirect_with_notify_indirect->proc~unimplemented proc~prif_team_number prif_team_number proc~prif_team_number->proc~unimplemented proc~prif_atomic_cas_int prif_atomic_cas_int proc~prif_atomic_cas_int->proc~unimplemented proc~prif_atomic_or prif_atomic_or proc~prif_atomic_or->proc~unimplemented proc~prif_lcobound_no_dim prif_lcobound_no_dim proc~prif_lcobound_no_dim->proc~unimplemented interface~prif_co_min prif_co_min interface~prif_co_min->proc~prif_co_min proc~prif_alias_create prif_alias_create proc~prif_alias_create->proc~unimplemented proc~prif_atomic_fetch_and_indirect prif_atomic_fetch_and_indirect proc~prif_atomic_fetch_and_indirect->proc~unimplemented proc~prif_form_team prif_form_team proc~prif_form_team->proc~unimplemented proc~prif_put_strided_with_notify_indirect prif_put_strided_with_notify_indirect proc~prif_put_strided_with_notify_indirect->proc~unimplemented proc~prif_unlock prif_unlock proc~prif_unlock->proc~unimplemented proc~prif_num_images_with_team_number prif_num_images_with_team_number proc~prif_num_images_with_team_number->proc~unimplemented proc~prif_atomic_define_logical prif_atomic_define_logical proc~prif_atomic_define_logical->proc~unimplemented proc~prif_atomic_xor prif_atomic_xor proc~prif_atomic_xor->proc~unimplemented proc~prif_get_context_data prif_get_context_data proc~prif_get_context_data->proc~unimplemented proc~prif_event_post_indirect prif_event_post_indirect proc~prif_event_post_indirect->proc~unimplemented proc~prif_image_index_with_team prif_image_index_with_team proc~prif_image_index_with_team->proc~unimplemented proc~prif_put_strided prif_put_strided proc~prif_put_strided->proc~unimplemented proc~prif_atomic_cas_int_indirect prif_atomic_cas_int_indirect proc~prif_atomic_cas_int_indirect->proc~unimplemented proc~prif_atomic_or_indirect prif_atomic_or_indirect proc~prif_atomic_or_indirect->proc~unimplemented proc~prif_lcobound_with_dim prif_lcobound_with_dim proc~prif_lcobound_with_dim->proc~unimplemented proc~prif_stopped_images prif_stopped_images proc~prif_stopped_images->proc~unimplemented proc~prif_atomic_add prif_atomic_add proc~prif_atomic_add->proc~unimplemented proc~prif_atomic_fetch_or prif_atomic_fetch_or proc~prif_atomic_fetch_or->proc~unimplemented proc~prif_put_with_notify prif_put_with_notify proc~prif_put_with_notify->proc~unimplemented proc~prif_unlock_indirect prif_unlock_indirect proc~prif_unlock_indirect->proc~unimplemented proc~prif_atomic_define_logical_indirect prif_atomic_define_logical_indirect proc~prif_atomic_define_logical_indirect->proc~unimplemented proc~prif_atomic_xor_indirect prif_atomic_xor_indirect proc~prif_atomic_xor_indirect->proc~unimplemented proc~prif_event_query prif_event_query proc~prif_event_query->proc~unimplemented proc~prif_image_index_with_team_number prif_image_index_with_team_number proc~prif_image_index_with_team_number->proc~unimplemented proc~prif_put_strided_indirect prif_put_strided_indirect proc~prif_put_strided_indirect->proc~unimplemented proc~prif_this_image_with_coarray prif_this_image_with_coarray proc~prif_this_image_with_coarray->proc~unimplemented proc~prif_alias_destroy prif_alias_destroy proc~prif_alias_destroy->proc~unimplemented proc~prif_atomic_cas_logical prif_atomic_cas_logical proc~prif_atomic_cas_logical->proc~unimplemented proc~prif_atomic_ref_int prif_atomic_ref_int proc~prif_atomic_ref_int->proc~unimplemented proc~prif_coshape prif_coshape proc~prif_coshape->proc~unimplemented proc~prif_lock prif_lock proc~prif_lock->proc~unimplemented proc~prif_get_strided prif_get_strided proc~prif_get_strided->proc~unimplemented proc~prif_sync_images prif_sync_images proc~prif_sync_images->proc~unimplemented proc~prif_atomic_add_indirect prif_atomic_add_indirect proc~prif_atomic_add_indirect->proc~unimplemented proc~prif_atomic_fetch_or_indirect prif_atomic_fetch_or_indirect proc~prif_atomic_fetch_or_indirect->proc~unimplemented interface~prif_co_reduce->proc~prif_co_reduce proc~prif_put_with_notify_indirect prif_put_with_notify_indirect proc~prif_put_with_notify_indirect->proc~unimplemented proc~prif_atomic_fetch_add prif_atomic_fetch_add proc~prif_atomic_fetch_add->proc~unimplemented proc~prif_change_team prif_change_team proc~prif_change_team->proc~unimplemented proc~prif_event_wait prif_event_wait proc~prif_event_wait->proc~unimplemented proc~prif_image_status prif_image_status proc~prif_image_status->proc~unimplemented proc~prif_put_strided_indirect_with_notify prif_put_strided_indirect_with_notify proc~prif_put_strided_indirect_with_notify->proc~unimplemented proc~prif_this_image_with_dim prif_this_image_with_dim proc~prif_this_image_with_dim->proc~unimplemented proc~prif_atomic_cas_logical_indirect prif_atomic_cas_logical_indirect proc~prif_atomic_cas_logical_indirect->proc~unimplemented proc~prif_atomic_ref_int_indirect prif_atomic_ref_int_indirect proc~prif_atomic_ref_int_indirect->proc~unimplemented proc~prif_critical prif_critical proc~prif_critical->proc~unimplemented proc~prif_lock_indirect prif_lock_indirect proc~prif_lock_indirect->proc~unimplemented proc~prif_end_critical prif_end_critical proc~prif_end_critical->proc~unimplemented proc~prif_get_strided_indirect prif_get_strided_indirect proc~prif_get_strided_indirect->proc~unimplemented proc~prif_sync_memory prif_sync_memory proc~prif_sync_memory->proc~unimplemented proc~prif_atomic_and prif_atomic_and proc~prif_atomic_and->proc~unimplemented proc~prif_atomic_fetch_xor prif_atomic_fetch_xor proc~prif_atomic_fetch_xor->proc~unimplemented proc~prif_set_context_data prif_set_context_data proc~prif_set_context_data->proc~unimplemented proc~prif_atomic_fetch_add_indirect prif_atomic_fetch_add_indirect proc~prif_atomic_fetch_add_indirect->proc~unimplemented proc~prif_put_indirect_with_notify prif_put_indirect_with_notify proc~prif_put_indirect_with_notify->proc~unimplemented interface~assert->proc~assert proc~prif_fail_image prif_fail_image proc~prif_fail_image->proc~unimplemented proc~prif_put_strided_indirect_with_notify_indirect prif_put_strided_indirect_with_notify_indirect proc~prif_put_strided_indirect_with_notify_indirect->proc~unimplemented proc~prif_ucobound_no_dim prif_ucobound_no_dim proc~prif_ucobound_no_dim->proc~unimplemented interface~prif_size_bytes prif_size_bytes interface~prif_size_bytes->proc~prif_size_bytes interface~prif_atomic_fetch_and prif_atomic_fetch_and interface~prif_atomic_fetch_and->proc~prif_atomic_fetch_and interface~prif_failed_images prif_failed_images interface~prif_failed_images->proc~prif_failed_images interface~prif_put_strided_with_notify prif_put_strided_with_notify interface~prif_put_strided_with_notify->proc~prif_put_strided_with_notify interface~prif_ucobound_with_dim prif_ucobound_with_dim interface~prif_ucobound_with_dim->proc~prif_ucobound_with_dim interface~prif_lcobound_no_dim prif_lcobound_no_dim interface~prif_lcobound_no_dim->proc~prif_lcobound_no_dim interface~prif_atomic_define_int_indirect prif_atomic_define_int_indirect interface~prif_atomic_define_int_indirect->proc~prif_atomic_define_int_indirect interface~prif_atomic_ref_logical_indirect prif_atomic_ref_logical_indirect interface~prif_atomic_ref_logical_indirect->proc~prif_atomic_ref_logical_indirect interface~prif_num_images_with_team prif_num_images_with_team interface~prif_num_images_with_team->proc~prif_num_images_with_team interface~prif_event_post prif_event_post interface~prif_event_post->proc~prif_event_post interface~prif_put_indirect_with_notify_indirect prif_put_indirect_with_notify_indirect interface~prif_put_indirect_with_notify_indirect->proc~prif_put_indirect_with_notify_indirect interface~prif_team_number prif_team_number interface~prif_team_number->proc~prif_team_number interface~prif_atomic_cas_int prif_atomic_cas_int interface~prif_atomic_cas_int->proc~prif_atomic_cas_int interface~prif_atomic_or prif_atomic_or interface~prif_atomic_or->proc~prif_atomic_or interface~prif_atomic_fetch_and_indirect prif_atomic_fetch_and_indirect interface~prif_atomic_fetch_and_indirect->proc~prif_atomic_fetch_and_indirect interface~prif_alias_destroy prif_alias_destroy interface~prif_alias_destroy->proc~prif_alias_destroy interface~prif_form_team prif_form_team interface~prif_form_team->proc~prif_form_team interface~prif_put_strided_with_notify_indirect prif_put_strided_with_notify_indirect interface~prif_put_strided_with_notify_indirect->proc~prif_put_strided_with_notify_indirect interface~prif_unlock prif_unlock interface~prif_unlock->proc~prif_unlock interface~prif_num_images_with_team_number prif_num_images_with_team_number interface~prif_num_images_with_team_number->proc~prif_num_images_with_team_number interface~prif_atomic_define_logical prif_atomic_define_logical interface~prif_atomic_define_logical->proc~prif_atomic_define_logical interface~prif_atomic_xor prif_atomic_xor interface~prif_atomic_xor->proc~prif_atomic_xor interface~prif_event_post_indirect prif_event_post_indirect interface~prif_event_post_indirect->proc~prif_event_post_indirect interface~prif_image_index_with_team prif_image_index_with_team interface~prif_image_index_with_team->proc~prif_image_index_with_team interface~prif_put_strided prif_put_strided interface~prif_put_strided->proc~prif_put_strided interface~prif_atomic_cas_int_indirect prif_atomic_cas_int_indirect interface~prif_atomic_cas_int_indirect->proc~prif_atomic_cas_int_indirect interface~prif_atomic_or_indirect prif_atomic_or_indirect interface~prif_atomic_or_indirect->proc~prif_atomic_or_indirect interface~prif_lcobound_with_dim prif_lcobound_with_dim interface~prif_lcobound_with_dim->proc~prif_lcobound_with_dim interface~prif_stopped_images prif_stopped_images interface~prif_stopped_images->proc~prif_stopped_images interface~prif_end_critical prif_end_critical interface~prif_end_critical->proc~prif_end_critical interface~prif_atomic_fetch_or prif_atomic_fetch_or interface~prif_atomic_fetch_or->proc~prif_atomic_fetch_or interface~prif_put_with_notify prif_put_with_notify interface~prif_put_with_notify->proc~prif_put_with_notify interface~prif_unlock_indirect prif_unlock_indirect interface~prif_unlock_indirect->proc~prif_unlock_indirect interface~prif_coshape prif_coshape interface~prif_coshape->proc~prif_coshape interface~prif_atomic_define_logical_indirect prif_atomic_define_logical_indirect interface~prif_atomic_define_logical_indirect->proc~prif_atomic_define_logical_indirect interface~prif_atomic_xor_indirect prif_atomic_xor_indirect interface~prif_atomic_xor_indirect->proc~prif_atomic_xor_indirect interface~prif_alias_create prif_alias_create interface~prif_alias_create->proc~prif_alias_create interface~prif_event_query prif_event_query interface~prif_event_query->proc~prif_event_query interface~prif_image_index_with_team_number prif_image_index_with_team_number interface~prif_image_index_with_team_number->proc~prif_image_index_with_team_number interface~prif_put_strided_indirect prif_put_strided_indirect interface~prif_put_strided_indirect->proc~prif_put_strided_indirect interface~prif_this_image_with_coarray prif_this_image_with_coarray interface~prif_this_image_with_coarray->proc~prif_this_image_with_coarray interface~prif_atomic_cas_logical prif_atomic_cas_logical interface~prif_atomic_cas_logical->proc~prif_atomic_cas_logical interface~prif_atomic_ref_int prif_atomic_ref_int interface~prif_atomic_ref_int->proc~prif_atomic_ref_int interface~prif_lock prif_lock interface~prif_lock->proc~prif_lock interface~prif_get_strided prif_get_strided interface~prif_get_strided->proc~prif_get_strided interface~prif_sync_images prif_sync_images interface~prif_sync_images->proc~prif_sync_images interface~prif_atomic_add_indirect prif_atomic_add_indirect interface~prif_atomic_add_indirect->proc~prif_atomic_add_indirect interface~prif_atomic_fetch_or_indirect prif_atomic_fetch_or_indirect interface~prif_atomic_fetch_or_indirect->proc~prif_atomic_fetch_or_indirect interface~prif_get_context_data prif_get_context_data interface~prif_get_context_data->proc~prif_get_context_data interface~prif_put_with_notify_indirect prif_put_with_notify_indirect interface~prif_put_with_notify_indirect->proc~prif_put_with_notify_indirect interface~prif_atomic_add prif_atomic_add interface~prif_atomic_add->proc~prif_atomic_add interface~prif_atomic_fetch_add prif_atomic_fetch_add interface~prif_atomic_fetch_add->proc~prif_atomic_fetch_add interface~prif_change_team prif_change_team interface~prif_change_team->proc~prif_change_team interface~prif_put_indirect_with_notify prif_put_indirect_with_notify interface~prif_put_indirect_with_notify->proc~prif_put_indirect_with_notify interface~prif_event_wait prif_event_wait interface~prif_event_wait->proc~prif_event_wait interface~prif_image_status prif_image_status interface~prif_image_status->proc~prif_image_status interface~prif_put_strided_indirect_with_notify prif_put_strided_indirect_with_notify interface~prif_put_strided_indirect_with_notify->proc~prif_put_strided_indirect_with_notify interface~prif_this_image_with_dim prif_this_image_with_dim interface~prif_this_image_with_dim->proc~prif_this_image_with_dim proc~base_pointer base_pointer proc~base_pointer->interface~assert interface~prif_atomic_cas_logical_indirect prif_atomic_cas_logical_indirect interface~prif_atomic_cas_logical_indirect->proc~prif_atomic_cas_logical_indirect interface~prif_atomic_ref_int_indirect prif_atomic_ref_int_indirect interface~prif_atomic_ref_int_indirect->proc~prif_atomic_ref_int_indirect interface~prif_critical prif_critical interface~prif_critical->proc~prif_critical interface~prif_lock_indirect prif_lock_indirect interface~prif_lock_indirect->proc~prif_lock_indirect interface~prif_get_strided_indirect prif_get_strided_indirect interface~prif_get_strided_indirect->proc~prif_get_strided_indirect interface~prif_sync_memory prif_sync_memory interface~prif_sync_memory->proc~prif_sync_memory interface~prif_atomic_and prif_atomic_and interface~prif_atomic_and->proc~prif_atomic_and interface~prif_atomic_fetch_xor prif_atomic_fetch_xor interface~prif_atomic_fetch_xor->proc~prif_atomic_fetch_xor interface~prif_set_context_data prif_set_context_data interface~prif_set_context_data->proc~prif_set_context_data interface~prif_atomic_fetch_add_indirect prif_atomic_fetch_add_indirect interface~prif_atomic_fetch_add_indirect->proc~prif_atomic_fetch_add_indirect interface~prif_fail_image prif_fail_image interface~prif_fail_image->proc~prif_fail_image interface~prif_put_strided_indirect_with_notify_indirect prif_put_strided_indirect_with_notify_indirect interface~prif_put_strided_indirect_with_notify_indirect->proc~prif_put_strided_indirect_with_notify_indirect interface~prif_ucobound_no_dim prif_ucobound_no_dim interface~prif_ucobound_no_dim->proc~prif_ucobound_no_dim interface~prif_atomic_define_int prif_atomic_define_int interface~prif_atomic_define_int->proc~prif_atomic_define_int interface~prif_notify_wait prif_notify_wait interface~prif_notify_wait->proc~prif_notify_wait interface~prif_atomic_ref_logical prif_atomic_ref_logical interface~prif_atomic_ref_logical->proc~prif_atomic_ref_logical interface~prif_get_team prif_get_team interface~prif_get_team->proc~prif_get_team interface~prif_end_team prif_end_team interface~prif_end_team->proc~prif_end_team interface~prif_sync_team prif_sync_team interface~prif_sync_team->proc~prif_sync_team interface~prif_atomic_and_indirect prif_atomic_and_indirect interface~prif_atomic_and_indirect->proc~prif_atomic_and_indirect interface~prif_atomic_fetch_xor_indirect prif_atomic_fetch_xor_indirect interface~prif_atomic_fetch_xor_indirect->proc~prif_atomic_fetch_xor_indirect proc~prif_get prif_get proc~prif_get->proc~base_pointer proc~prif_put prif_put proc~prif_put->proc~base_pointer interface~prif_get prif_get interface~prif_get->proc~prif_get interface~prif_put prif_put interface~prif_put->proc~prif_put Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_error_stop.html"},{"title":"prif_fail_image – Caffeine","text":"module procedure prif_fail_image module module subroutine prif_fail_image() Interface → Arguments None Calls proc~~prif_fail_image~~CallsGraph proc~prif_fail_image prif_fail_image proc~unimplemented unimplemented proc~prif_fail_image->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_fail_image~~CalledByGraph proc~prif_fail_image prif_fail_image interface~prif_fail_image prif_fail_image interface~prif_fail_image->proc~prif_fail_image Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_fail_image.html"},{"title":"prif_stop – Caffeine","text":"module procedure prif_stop module module subroutine prif_stop(quiet, stop_code_int, stop_code_char) Interface → Arguments Type Intent Optional Attributes Name logical(kind=c_bool), intent(in) :: quiet integer(kind=c_int), intent(in), optional :: stop_code_int character(len=*), intent(in), optional :: stop_code_char Called by proc~~prif_stop~~CalledByGraph proc~prif_stop prif_stop interface~prif_stop prif_stop interface~prif_stop->proc~prif_stop Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_stop.html"},{"title":"prif_coshape – Caffeine","text":"module procedure prif_coshape module module subroutine prif_coshape(coarray_handle, sizes) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(out) :: sizes (:) Calls proc~~prif_coshape~~CallsGraph proc~prif_coshape prif_coshape proc~unimplemented unimplemented proc~prif_coshape->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_coshape~~CalledByGraph proc~prif_coshape prif_coshape interface~prif_coshape prif_coshape interface~prif_coshape->proc~prif_coshape Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_coshape.html"},{"title":"prif_image_index – Caffeine","text":"module procedure prif_image_index module module subroutine prif_image_index(coarray_handle, sub, image_index) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_intmax_t), intent(in) :: sub (:) integer(kind=c_int), intent(out) :: image_index Calls proc~~prif_image_index~~CallsGraph proc~prif_image_index prif_image_index interface~prif_num_images prif_num_images proc~prif_image_index->interface~prif_num_images proc~prif_num_images prif_num_images interface~prif_num_images->proc~prif_num_images interface~caf_num_images caf_num_images proc~prif_num_images->interface~caf_num_images Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_image_index~~CalledByGraph proc~prif_image_index prif_image_index interface~prif_image_index prif_image_index interface~prif_image_index->proc~prif_image_index Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_image_index.html"},{"title":"prif_image_index_with_team – Caffeine","text":"module procedure prif_image_index_with_team module module subroutine prif_image_index_with_team(coarray_handle, sub, team, image_index) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_intmax_t), intent(in) :: sub (:) type( prif_team_type ), intent(in) :: team integer(kind=c_int), intent(out) :: image_index Calls proc~~prif_image_index_with_team~~CallsGraph proc~prif_image_index_with_team prif_image_index_with_team proc~unimplemented unimplemented proc~prif_image_index_with_team->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_image_index_with_team~~CalledByGraph proc~prif_image_index_with_team prif_image_index_with_team interface~prif_image_index_with_team prif_image_index_with_team interface~prif_image_index_with_team->proc~prif_image_index_with_team Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_image_index_with_team.html"},{"title":"prif_image_index_with_team_number – Caffeine","text":"module procedure prif_image_index_with_team_number module module subroutine prif_image_index_with_team_number(coarray_handle, sub, team_number, image_index) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_intmax_t), intent(in) :: sub (:) integer(kind=c_int), intent(in) :: team_number integer(kind=c_int), intent(out) :: image_index Calls proc~~prif_image_index_with_team_number~~CallsGraph proc~prif_image_index_with_team_number prif_image_index_with_team_number proc~unimplemented unimplemented proc~prif_image_index_with_team_number->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_image_index_with_team_number~~CalledByGraph proc~prif_image_index_with_team_number prif_image_index_with_team_number interface~prif_image_index_with_team_number prif_image_index_with_team_number interface~prif_image_index_with_team_number->proc~prif_image_index_with_team_number Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_image_index_with_team_number.html"},{"title":"prif_lcobound_no_dim – Caffeine","text":"module procedure prif_lcobound_no_dim module module subroutine prif_lcobound_no_dim(coarray_handle, lcobounds) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_intmax_t), intent(out) :: lcobounds (:) Calls proc~~prif_lcobound_no_dim~~CallsGraph proc~prif_lcobound_no_dim prif_lcobound_no_dim proc~unimplemented unimplemented proc~prif_lcobound_no_dim->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_lcobound_no_dim~~CalledByGraph proc~prif_lcobound_no_dim prif_lcobound_no_dim interface~prif_lcobound_no_dim prif_lcobound_no_dim interface~prif_lcobound_no_dim->proc~prif_lcobound_no_dim Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_lcobound_no_dim.html"},{"title":"prif_lcobound_with_dim – Caffeine","text":"module procedure prif_lcobound_with_dim module module subroutine prif_lcobound_with_dim(coarray_handle, dim, lcobound) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_int), intent(in) :: dim integer(kind=c_intmax_t), intent(out) :: lcobound Calls proc~~prif_lcobound_with_dim~~CallsGraph proc~prif_lcobound_with_dim prif_lcobound_with_dim proc~unimplemented unimplemented proc~prif_lcobound_with_dim->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_lcobound_with_dim~~CalledByGraph proc~prif_lcobound_with_dim prif_lcobound_with_dim interface~prif_lcobound_with_dim prif_lcobound_with_dim interface~prif_lcobound_with_dim->proc~prif_lcobound_with_dim Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_lcobound_with_dim.html"},{"title":"prif_ucobound_no_dim – Caffeine","text":"module procedure prif_ucobound_no_dim module module subroutine prif_ucobound_no_dim(coarray_handle, ucobounds) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_intmax_t), intent(out) :: ucobounds (:) Calls proc~~prif_ucobound_no_dim~~CallsGraph proc~prif_ucobound_no_dim prif_ucobound_no_dim proc~unimplemented unimplemented proc~prif_ucobound_no_dim->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_ucobound_no_dim~~CalledByGraph proc~prif_ucobound_no_dim prif_ucobound_no_dim interface~prif_ucobound_no_dim prif_ucobound_no_dim interface~prif_ucobound_no_dim->proc~prif_ucobound_no_dim Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_ucobound_no_dim.html"},{"title":"prif_ucobound_with_dim – Caffeine","text":"module procedure prif_ucobound_with_dim module module subroutine prif_ucobound_with_dim(coarray_handle, dim, ucobound) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_int), intent(in) :: dim integer(kind=c_intmax_t), intent(out) :: ucobound Calls proc~~prif_ucobound_with_dim~~CallsGraph proc~prif_ucobound_with_dim prif_ucobound_with_dim proc~unimplemented unimplemented proc~prif_ucobound_with_dim->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_ucobound_with_dim~~CalledByGraph proc~prif_ucobound_with_dim prif_ucobound_with_dim interface~prif_ucobound_with_dim prif_ucobound_with_dim interface~prif_ucobound_with_dim->proc~prif_ucobound_with_dim Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_ucobound_with_dim.html"},{"title":"prif_atomic_add – Caffeine","text":"module procedure prif_atomic_add module module subroutine prif_atomic_add(image_num, coarray_handle, offset, value, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat Calls proc~~prif_atomic_add~~CallsGraph proc~prif_atomic_add prif_atomic_add proc~unimplemented unimplemented proc~prif_atomic_add->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_atomic_add~~CalledByGraph proc~prif_atomic_add prif_atomic_add interface~prif_atomic_add prif_atomic_add interface~prif_atomic_add->proc~prif_atomic_add Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_atomic_add.html"},{"title":"prif_atomic_add_indirect – Caffeine","text":"module procedure prif_atomic_add_indirect module module subroutine prif_atomic_add_indirect(image_num, atom_remote_ptr, value, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat Calls proc~~prif_atomic_add_indirect~~CallsGraph proc~prif_atomic_add_indirect prif_atomic_add_indirect proc~unimplemented unimplemented proc~prif_atomic_add_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_atomic_add_indirect~~CalledByGraph proc~prif_atomic_add_indirect prif_atomic_add_indirect interface~prif_atomic_add_indirect prif_atomic_add_indirect interface~prif_atomic_add_indirect->proc~prif_atomic_add_indirect Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_atomic_add_indirect.html"},{"title":"prif_atomic_and – Caffeine","text":"module procedure prif_atomic_and module module subroutine prif_atomic_and(image_num, coarray_handle, offset, value, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat Calls proc~~prif_atomic_and~~CallsGraph proc~prif_atomic_and prif_atomic_and proc~unimplemented unimplemented proc~prif_atomic_and->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_atomic_and~~CalledByGraph proc~prif_atomic_and prif_atomic_and interface~prif_atomic_and prif_atomic_and interface~prif_atomic_and->proc~prif_atomic_and Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_atomic_and.html"},{"title":"prif_atomic_and_indirect – Caffeine","text":"module procedure prif_atomic_and_indirect module module subroutine prif_atomic_and_indirect(image_num, atom_remote_ptr, value, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat Calls proc~~prif_atomic_and_indirect~~CallsGraph proc~prif_atomic_and_indirect prif_atomic_and_indirect proc~unimplemented unimplemented proc~prif_atomic_and_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_atomic_and_indirect~~CalledByGraph proc~prif_atomic_and_indirect prif_atomic_and_indirect interface~prif_atomic_and_indirect prif_atomic_and_indirect interface~prif_atomic_and_indirect->proc~prif_atomic_and_indirect Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_atomic_and_indirect.html"},{"title":"prif_atomic_cas_int – Caffeine","text":"module procedure prif_atomic_cas_int module module subroutine prif_atomic_cas_int(image_num, coarray_handle, offset, old, compare, new, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=prif_atomic_int_kind), intent(out) :: old integer(kind=prif_atomic_int_kind), intent(in) :: compare integer(kind=prif_atomic_int_kind), intent(in) :: new integer(kind=c_int), intent(out), optional :: stat Calls proc~~prif_atomic_cas_int~~CallsGraph proc~prif_atomic_cas_int prif_atomic_cas_int proc~unimplemented unimplemented proc~prif_atomic_cas_int->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_atomic_cas_int~~CalledByGraph proc~prif_atomic_cas_int prif_atomic_cas_int interface~prif_atomic_cas_int prif_atomic_cas_int interface~prif_atomic_cas_int->proc~prif_atomic_cas_int Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_atomic_cas_int.html"},{"title":"prif_atomic_cas_int_indirect – Caffeine","text":"module procedure prif_atomic_cas_int_indirect module module subroutine prif_atomic_cas_int_indirect(image_num, atom_remote_ptr, old, compare, new, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=prif_atomic_int_kind), intent(out) :: old integer(kind=prif_atomic_int_kind), intent(in) :: compare integer(kind=prif_atomic_int_kind), intent(in) :: new integer(kind=c_int), intent(out), optional :: stat Calls proc~~prif_atomic_cas_int_indirect~~CallsGraph proc~prif_atomic_cas_int_indirect prif_atomic_cas_int_indirect proc~unimplemented unimplemented proc~prif_atomic_cas_int_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_atomic_cas_int_indirect~~CalledByGraph proc~prif_atomic_cas_int_indirect prif_atomic_cas_int_indirect interface~prif_atomic_cas_int_indirect prif_atomic_cas_int_indirect interface~prif_atomic_cas_int_indirect->proc~prif_atomic_cas_int_indirect Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_atomic_cas_int_indirect.html"},{"title":"prif_atomic_cas_logical – Caffeine","text":"module procedure prif_atomic_cas_logical module module subroutine prif_atomic_cas_logical(image_num, coarray_handle, offset, old, compare, new, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset logical(kind=prif_atomic_logical_kind), intent(out) :: old logical(kind=prif_atomic_logical_kind), intent(in) :: compare logical(kind=prif_atomic_logical_kind), intent(in) :: new integer(kind=c_int), intent(out), optional :: stat Calls proc~~prif_atomic_cas_logical~~CallsGraph proc~prif_atomic_cas_logical prif_atomic_cas_logical proc~unimplemented unimplemented proc~prif_atomic_cas_logical->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_atomic_cas_logical~~CalledByGraph proc~prif_atomic_cas_logical prif_atomic_cas_logical interface~prif_atomic_cas_logical prif_atomic_cas_logical interface~prif_atomic_cas_logical->proc~prif_atomic_cas_logical Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_atomic_cas_logical.html"},{"title":"prif_atomic_cas_logical_indirect – Caffeine","text":"module procedure prif_atomic_cas_logical_indirect module module subroutine prif_atomic_cas_logical_indirect(image_num, atom_remote_ptr, old, compare, new, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr logical(kind=prif_atomic_logical_kind), intent(out) :: old logical(kind=prif_atomic_logical_kind), intent(in) :: compare logical(kind=prif_atomic_logical_kind), intent(in) :: new integer(kind=c_int), intent(out), optional :: stat Calls proc~~prif_atomic_cas_logical_indirect~~CallsGraph proc~prif_atomic_cas_logical_indirect prif_atomic_cas_logical_indirect proc~unimplemented unimplemented proc~prif_atomic_cas_logical_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_atomic_cas_logical_indirect~~CalledByGraph proc~prif_atomic_cas_logical_indirect prif_atomic_cas_logical_indirect interface~prif_atomic_cas_logical_indirect prif_atomic_cas_logical_indirect interface~prif_atomic_cas_logical_indirect->proc~prif_atomic_cas_logical_indirect Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_atomic_cas_logical_indirect.html"},{"title":"prif_atomic_define_int – Caffeine","text":"module procedure prif_atomic_define_int module module subroutine prif_atomic_define_int(image_num, coarray_handle, offset, value, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat Calls proc~~prif_atomic_define_int~~CallsGraph proc~prif_atomic_define_int prif_atomic_define_int proc~unimplemented unimplemented proc~prif_atomic_define_int->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_atomic_define_int~~CalledByGraph proc~prif_atomic_define_int prif_atomic_define_int interface~prif_atomic_define_int prif_atomic_define_int interface~prif_atomic_define_int->proc~prif_atomic_define_int Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_atomic_define_int.html"},{"title":"prif_atomic_define_int_indirect – Caffeine","text":"module procedure prif_atomic_define_int_indirect module module subroutine prif_atomic_define_int_indirect(image_num, atom_remote_ptr, value, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat Calls proc~~prif_atomic_define_int_indirect~~CallsGraph proc~prif_atomic_define_int_indirect prif_atomic_define_int_indirect proc~unimplemented unimplemented proc~prif_atomic_define_int_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_atomic_define_int_indirect~~CalledByGraph proc~prif_atomic_define_int_indirect prif_atomic_define_int_indirect interface~prif_atomic_define_int_indirect prif_atomic_define_int_indirect interface~prif_atomic_define_int_indirect->proc~prif_atomic_define_int_indirect Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_atomic_define_int_indirect.html"},{"title":"prif_atomic_define_logical – Caffeine","text":"module procedure prif_atomic_define_logical module module subroutine prif_atomic_define_logical(image_num, coarray_handle, offset, value, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset logical(kind=prif_atomic_logical_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat Calls proc~~prif_atomic_define_logical~~CallsGraph proc~prif_atomic_define_logical prif_atomic_define_logical proc~unimplemented unimplemented proc~prif_atomic_define_logical->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_atomic_define_logical~~CalledByGraph proc~prif_atomic_define_logical prif_atomic_define_logical interface~prif_atomic_define_logical prif_atomic_define_logical interface~prif_atomic_define_logical->proc~prif_atomic_define_logical Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_atomic_define_logical.html"},{"title":"prif_atomic_define_logical_indirect – Caffeine","text":"module procedure prif_atomic_define_logical_indirect module module subroutine prif_atomic_define_logical_indirect(image_num, atom_remote_ptr, value, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr logical(kind=prif_atomic_logical_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat Calls proc~~prif_atomic_define_logical_indirect~~CallsGraph proc~prif_atomic_define_logical_indirect prif_atomic_define_logical_indirect proc~unimplemented unimplemented proc~prif_atomic_define_logical_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_atomic_define_logical_indirect~~CalledByGraph proc~prif_atomic_define_logical_indirect prif_atomic_define_logical_indirect interface~prif_atomic_define_logical_indirect prif_atomic_define_logical_indirect interface~prif_atomic_define_logical_indirect->proc~prif_atomic_define_logical_indirect Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_atomic_define_logical_indirect.html"},{"title":"prif_atomic_fetch_add – Caffeine","text":"module procedure prif_atomic_fetch_add module module subroutine prif_atomic_fetch_add(image_num, coarray_handle, offset, value, old, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=prif_atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat Calls proc~~prif_atomic_fetch_add~~CallsGraph proc~prif_atomic_fetch_add prif_atomic_fetch_add proc~unimplemented unimplemented proc~prif_atomic_fetch_add->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_atomic_fetch_add~~CalledByGraph proc~prif_atomic_fetch_add prif_atomic_fetch_add interface~prif_atomic_fetch_add prif_atomic_fetch_add interface~prif_atomic_fetch_add->proc~prif_atomic_fetch_add Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_atomic_fetch_add.html"},{"title":"prif_atomic_fetch_add_indirect – Caffeine","text":"module procedure prif_atomic_fetch_add_indirect module module subroutine prif_atomic_fetch_add_indirect(image_num, atom_remote_ptr, value, old, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=prif_atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat Calls proc~~prif_atomic_fetch_add_indirect~~CallsGraph proc~prif_atomic_fetch_add_indirect prif_atomic_fetch_add_indirect proc~unimplemented unimplemented proc~prif_atomic_fetch_add_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_atomic_fetch_add_indirect~~CalledByGraph proc~prif_atomic_fetch_add_indirect prif_atomic_fetch_add_indirect interface~prif_atomic_fetch_add_indirect prif_atomic_fetch_add_indirect interface~prif_atomic_fetch_add_indirect->proc~prif_atomic_fetch_add_indirect Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_atomic_fetch_add_indirect.html"},{"title":"prif_atomic_fetch_and – Caffeine","text":"module procedure prif_atomic_fetch_and module module subroutine prif_atomic_fetch_and(image_num, coarray_handle, offset, value, old, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=prif_atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat Calls proc~~prif_atomic_fetch_and~~CallsGraph proc~prif_atomic_fetch_and prif_atomic_fetch_and proc~unimplemented unimplemented proc~prif_atomic_fetch_and->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_atomic_fetch_and~~CalledByGraph proc~prif_atomic_fetch_and prif_atomic_fetch_and interface~prif_atomic_fetch_and prif_atomic_fetch_and interface~prif_atomic_fetch_and->proc~prif_atomic_fetch_and Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_atomic_fetch_and.html"},{"title":"prif_atomic_fetch_and_indirect – Caffeine","text":"module procedure prif_atomic_fetch_and_indirect module module subroutine prif_atomic_fetch_and_indirect(image_num, atom_remote_ptr, value, old, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=prif_atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat Calls proc~~prif_atomic_fetch_and_indirect~~CallsGraph proc~prif_atomic_fetch_and_indirect prif_atomic_fetch_and_indirect proc~unimplemented unimplemented proc~prif_atomic_fetch_and_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_atomic_fetch_and_indirect~~CalledByGraph proc~prif_atomic_fetch_and_indirect prif_atomic_fetch_and_indirect interface~prif_atomic_fetch_and_indirect prif_atomic_fetch_and_indirect interface~prif_atomic_fetch_and_indirect->proc~prif_atomic_fetch_and_indirect Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_atomic_fetch_and_indirect.html"},{"title":"prif_atomic_fetch_or – Caffeine","text":"module procedure prif_atomic_fetch_or module module subroutine prif_atomic_fetch_or(image_num, coarray_handle, offset, value, old, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=prif_atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat Calls proc~~prif_atomic_fetch_or~~CallsGraph proc~prif_atomic_fetch_or prif_atomic_fetch_or proc~unimplemented unimplemented proc~prif_atomic_fetch_or->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_atomic_fetch_or~~CalledByGraph proc~prif_atomic_fetch_or prif_atomic_fetch_or interface~prif_atomic_fetch_or prif_atomic_fetch_or interface~prif_atomic_fetch_or->proc~prif_atomic_fetch_or Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_atomic_fetch_or.html"},{"title":"prif_atomic_fetch_or_indirect – Caffeine","text":"module procedure prif_atomic_fetch_or_indirect module module subroutine prif_atomic_fetch_or_indirect(image_num, atom_remote_ptr, value, old, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=prif_atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat Calls proc~~prif_atomic_fetch_or_indirect~~CallsGraph proc~prif_atomic_fetch_or_indirect prif_atomic_fetch_or_indirect proc~unimplemented unimplemented proc~prif_atomic_fetch_or_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_atomic_fetch_or_indirect~~CalledByGraph proc~prif_atomic_fetch_or_indirect prif_atomic_fetch_or_indirect interface~prif_atomic_fetch_or_indirect prif_atomic_fetch_or_indirect interface~prif_atomic_fetch_or_indirect->proc~prif_atomic_fetch_or_indirect Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_atomic_fetch_or_indirect.html"},{"title":"prif_atomic_fetch_xor – Caffeine","text":"module procedure prif_atomic_fetch_xor module module subroutine prif_atomic_fetch_xor(image_num, coarray_handle, offset, value, old, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=prif_atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat Calls proc~~prif_atomic_fetch_xor~~CallsGraph proc~prif_atomic_fetch_xor prif_atomic_fetch_xor proc~unimplemented unimplemented proc~prif_atomic_fetch_xor->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_atomic_fetch_xor~~CalledByGraph proc~prif_atomic_fetch_xor prif_atomic_fetch_xor interface~prif_atomic_fetch_xor prif_atomic_fetch_xor interface~prif_atomic_fetch_xor->proc~prif_atomic_fetch_xor Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_atomic_fetch_xor.html"},{"title":"prif_atomic_fetch_xor_indirect – Caffeine","text":"module procedure prif_atomic_fetch_xor_indirect module module subroutine prif_atomic_fetch_xor_indirect(image_num, atom_remote_ptr, value, old, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=prif_atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat Calls proc~~prif_atomic_fetch_xor_indirect~~CallsGraph proc~prif_atomic_fetch_xor_indirect prif_atomic_fetch_xor_indirect proc~unimplemented unimplemented proc~prif_atomic_fetch_xor_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_atomic_fetch_xor_indirect~~CalledByGraph proc~prif_atomic_fetch_xor_indirect prif_atomic_fetch_xor_indirect interface~prif_atomic_fetch_xor_indirect prif_atomic_fetch_xor_indirect interface~prif_atomic_fetch_xor_indirect->proc~prif_atomic_fetch_xor_indirect Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_atomic_fetch_xor_indirect.html"},{"title":"prif_atomic_or – Caffeine","text":"module procedure prif_atomic_or module module subroutine prif_atomic_or(image_num, coarray_handle, offset, value, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat Calls proc~~prif_atomic_or~~CallsGraph proc~prif_atomic_or prif_atomic_or proc~unimplemented unimplemented proc~prif_atomic_or->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_atomic_or~~CalledByGraph proc~prif_atomic_or prif_atomic_or interface~prif_atomic_or prif_atomic_or interface~prif_atomic_or->proc~prif_atomic_or Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_atomic_or.html"},{"title":"prif_atomic_or_indirect – Caffeine","text":"module procedure prif_atomic_or_indirect module module subroutine prif_atomic_or_indirect(image_num, atom_remote_ptr, value, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat Calls proc~~prif_atomic_or_indirect~~CallsGraph proc~prif_atomic_or_indirect prif_atomic_or_indirect proc~unimplemented unimplemented proc~prif_atomic_or_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_atomic_or_indirect~~CalledByGraph proc~prif_atomic_or_indirect prif_atomic_or_indirect interface~prif_atomic_or_indirect prif_atomic_or_indirect interface~prif_atomic_or_indirect->proc~prif_atomic_or_indirect Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_atomic_or_indirect.html"},{"title":"prif_atomic_ref_int – Caffeine","text":"module procedure prif_atomic_ref_int module module subroutine prif_atomic_ref_int(image_num, coarray_handle, offset, value, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=prif_atomic_int_kind), intent(out) :: value integer(kind=c_int), intent(out), optional :: stat Calls proc~~prif_atomic_ref_int~~CallsGraph proc~prif_atomic_ref_int prif_atomic_ref_int proc~unimplemented unimplemented proc~prif_atomic_ref_int->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_atomic_ref_int~~CalledByGraph proc~prif_atomic_ref_int prif_atomic_ref_int interface~prif_atomic_ref_int prif_atomic_ref_int interface~prif_atomic_ref_int->proc~prif_atomic_ref_int Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_atomic_ref_int.html"},{"title":"prif_atomic_ref_int_indirect – Caffeine","text":"module procedure prif_atomic_ref_int_indirect module module subroutine prif_atomic_ref_int_indirect(image_num, atom_remote_ptr, value, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=prif_atomic_int_kind), intent(out) :: value integer(kind=c_int), intent(out), optional :: stat Calls proc~~prif_atomic_ref_int_indirect~~CallsGraph proc~prif_atomic_ref_int_indirect prif_atomic_ref_int_indirect proc~unimplemented unimplemented proc~prif_atomic_ref_int_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_atomic_ref_int_indirect~~CalledByGraph proc~prif_atomic_ref_int_indirect prif_atomic_ref_int_indirect interface~prif_atomic_ref_int_indirect prif_atomic_ref_int_indirect interface~prif_atomic_ref_int_indirect->proc~prif_atomic_ref_int_indirect Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_atomic_ref_int_indirect.html"},{"title":"prif_atomic_ref_logical – Caffeine","text":"module procedure prif_atomic_ref_logical module module subroutine prif_atomic_ref_logical(image_num, coarray_handle, offset, value, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset logical(kind=prif_atomic_logical_kind), intent(out) :: value integer(kind=c_int), intent(out), optional :: stat Calls proc~~prif_atomic_ref_logical~~CallsGraph proc~prif_atomic_ref_logical prif_atomic_ref_logical proc~unimplemented unimplemented proc~prif_atomic_ref_logical->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_atomic_ref_logical~~CalledByGraph proc~prif_atomic_ref_logical prif_atomic_ref_logical interface~prif_atomic_ref_logical prif_atomic_ref_logical interface~prif_atomic_ref_logical->proc~prif_atomic_ref_logical Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_atomic_ref_logical.html"},{"title":"prif_atomic_ref_logical_indirect – Caffeine","text":"module procedure prif_atomic_ref_logical_indirect module module subroutine prif_atomic_ref_logical_indirect(image_num, atom_remote_ptr, value, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr logical(kind=prif_atomic_logical_kind), intent(out) :: value integer(kind=c_int), intent(out), optional :: stat Calls proc~~prif_atomic_ref_logical_indirect~~CallsGraph proc~prif_atomic_ref_logical_indirect prif_atomic_ref_logical_indirect proc~unimplemented unimplemented proc~prif_atomic_ref_logical_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_atomic_ref_logical_indirect~~CalledByGraph proc~prif_atomic_ref_logical_indirect prif_atomic_ref_logical_indirect interface~prif_atomic_ref_logical_indirect prif_atomic_ref_logical_indirect interface~prif_atomic_ref_logical_indirect->proc~prif_atomic_ref_logical_indirect Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_atomic_ref_logical_indirect.html"},{"title":"prif_atomic_xor – Caffeine","text":"module procedure prif_atomic_xor module module subroutine prif_atomic_xor(image_num, coarray_handle, offset, value, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat Calls proc~~prif_atomic_xor~~CallsGraph proc~prif_atomic_xor prif_atomic_xor proc~unimplemented unimplemented proc~prif_atomic_xor->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_atomic_xor~~CalledByGraph proc~prif_atomic_xor prif_atomic_xor interface~prif_atomic_xor prif_atomic_xor interface~prif_atomic_xor->proc~prif_atomic_xor Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_atomic_xor.html"},{"title":"prif_atomic_xor_indirect – Caffeine","text":"module procedure prif_atomic_xor_indirect module module subroutine prif_atomic_xor_indirect(image_num, atom_remote_ptr, value, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat Calls proc~~prif_atomic_xor_indirect~~CallsGraph proc~prif_atomic_xor_indirect prif_atomic_xor_indirect proc~unimplemented unimplemented proc~prif_atomic_xor_indirect->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_atomic_xor_indirect~~CalledByGraph proc~prif_atomic_xor_indirect prif_atomic_xor_indirect interface~prif_atomic_xor_indirect prif_atomic_xor_indirect interface~prif_atomic_xor_indirect->proc~prif_atomic_xor_indirect Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_atomic_xor_indirect.html"},{"title":"prif_get_context_data – Caffeine","text":"module procedure prif_get_context_data module module subroutine prif_get_context_data(coarray_handle, context_data) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle type(c_ptr), intent(out) :: context_data Calls proc~~prif_get_context_data~~CallsGraph proc~prif_get_context_data prif_get_context_data proc~unimplemented unimplemented proc~prif_get_context_data->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_get_context_data~~CalledByGraph proc~prif_get_context_data prif_get_context_data interface~prif_get_context_data prif_get_context_data interface~prif_get_context_data->proc~prif_get_context_data Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_get_context_data.html"},{"title":"prif_set_context_data – Caffeine","text":"module procedure prif_set_context_data module module subroutine prif_set_context_data(coarray_handle, context_data) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle type(c_ptr), intent(in) :: context_data Calls proc~~prif_set_context_data~~CallsGraph proc~prif_set_context_data prif_set_context_data proc~unimplemented unimplemented proc~prif_set_context_data->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_set_context_data~~CalledByGraph proc~prif_set_context_data prif_set_context_data interface~prif_set_context_data prif_set_context_data interface~prif_set_context_data->proc~prif_set_context_data Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_set_context_data.html"},{"title":"prif_size_bytes – Caffeine","text":"module procedure prif_size_bytes module module subroutine prif_size_bytes(coarray_handle, data_size) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(out) :: data_size Calls proc~~prif_size_bytes~~CallsGraph proc~prif_size_bytes prif_size_bytes proc~unimplemented unimplemented proc~prif_size_bytes->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_size_bytes~~CalledByGraph proc~prif_size_bytes prif_size_bytes interface~prif_size_bytes prif_size_bytes interface~prif_size_bytes->proc~prif_size_bytes Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_size_bytes.html"},{"title":"prif_change_team – Caffeine","text":"module procedure prif_change_team module module subroutine prif_change_team(team, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in) :: team integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_change_team~~CallsGraph proc~prif_change_team prif_change_team proc~unimplemented unimplemented proc~prif_change_team->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_change_team~~CalledByGraph proc~prif_change_team prif_change_team interface~prif_change_team prif_change_team interface~prif_change_team->proc~prif_change_team Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_change_team.html"},{"title":"prif_end_team – Caffeine","text":"module procedure prif_end_team module module subroutine prif_end_team(stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_end_team~~CallsGraph proc~prif_end_team prif_end_team proc~unimplemented unimplemented proc~prif_end_team->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_end_team~~CalledByGraph proc~prif_end_team prif_end_team interface~prif_end_team prif_end_team interface~prif_end_team->proc~prif_end_team Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_end_team.html"},{"title":"prif_form_team – Caffeine","text":"module procedure prif_form_team module module subroutine prif_form_team(team_number, team, new_index, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_intmax_t), intent(in) :: team_number type( prif_team_type ), intent(out) :: team integer(kind=c_int), intent(in), optional :: new_index integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_form_team~~CallsGraph proc~prif_form_team prif_form_team proc~unimplemented unimplemented proc~prif_form_team->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_form_team~~CalledByGraph proc~prif_form_team prif_form_team interface~prif_form_team prif_form_team interface~prif_form_team->proc~prif_form_team Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_form_team.html"},{"title":"prif_get_team – Caffeine","text":"module procedure prif_get_team module module subroutine prif_get_team(level, team) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in), optional :: level type( prif_team_type ), intent(out) :: team Calls proc~~prif_get_team~~CallsGraph proc~prif_get_team prif_get_team proc~unimplemented unimplemented proc~prif_get_team->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_get_team~~CalledByGraph proc~prif_get_team prif_get_team interface~prif_get_team prif_get_team interface~prif_get_team->proc~prif_get_team Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_get_team.html"},{"title":"prif_team_number – Caffeine","text":"module procedure prif_team_number module module subroutine prif_team_number(team, team_number) Interface → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in), optional :: team integer(kind=c_intmax_t), intent(out) :: team_number Calls proc~~prif_team_number~~CallsGraph proc~prif_team_number prif_team_number proc~unimplemented unimplemented proc~prif_team_number->proc~unimplemented interface~prif_error_stop prif_error_stop proc~unimplemented->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_team_number~~CalledByGraph proc~prif_team_number prif_team_number interface~prif_team_number prif_team_number interface~prif_team_number->proc~prif_team_number Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_team_number.html"},{"title":"prif_co_max – Caffeine","text":"module procedure prif_co_max module module subroutine prif_co_max(a, result_image, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer(kind=c_int), intent(in), optional :: result_image integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_co_max~~CallsGraph proc~prif_co_max prif_co_max interface~caf_co_max caf_co_max proc~prif_co_max->interface~caf_co_max interface~prif_co_reduce prif_co_reduce proc~prif_co_max->interface~prif_co_reduce interface~caf_is_f_string caf_is_f_string proc~prif_co_max->interface~caf_is_f_string proc~optional_value optional_value proc~prif_co_max->proc~optional_value interface~caf_numeric_type caf_numeric_type proc~prif_co_max->interface~caf_numeric_type interface~prif_error_stop prif_error_stop proc~prif_co_max->interface~prif_error_stop proc~prif_co_reduce prif_co_reduce interface~prif_co_reduce->proc~prif_co_reduce proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_co_reduce->interface~caf_is_f_string proc~prif_co_reduce->proc~optional_value proc~prif_co_reduce->interface~prif_error_stop interface~caf_co_reduce caf_co_reduce proc~prif_co_reduce->interface~caf_co_reduce interface~caf_same_cfi_type caf_same_cfi_type proc~prif_co_reduce->interface~caf_same_cfi_type interface~caf_elem_len caf_elem_len proc~prif_co_reduce->interface~caf_elem_len interface~assert assert proc~prif_co_reduce->interface~assert proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string proc~assert assert interface~assert->proc~assert proc~assert->interface~prif_error_stop Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_co_max~~CalledByGraph proc~prif_co_max prif_co_max interface~prif_co_max prif_co_max interface~prif_co_max->proc~prif_co_max Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_co_max.html"},{"title":"prif_co_broadcast – Caffeine","text":"module procedure prif_co_broadcast module module subroutine prif_co_broadcast(a, source_image, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer(kind=c_int), intent(in) :: source_image integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_co_broadcast~~CallsGraph proc~prif_co_broadcast prif_co_broadcast interface~caf_co_broadcast caf_co_broadcast proc~prif_co_broadcast->interface~caf_co_broadcast Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_co_broadcast~~CalledByGraph proc~prif_co_broadcast prif_co_broadcast interface~prif_co_broadcast prif_co_broadcast interface~prif_co_broadcast->proc~prif_co_broadcast Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_co_broadcast.html"},{"title":"prif_co_min – Caffeine","text":"module procedure prif_co_min module module subroutine prif_co_min(a, result_image, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer(kind=c_int), intent(in), optional :: result_image integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_co_min~~CallsGraph proc~prif_co_min prif_co_min interface~prif_co_reduce prif_co_reduce proc~prif_co_min->interface~prif_co_reduce interface~caf_co_min caf_co_min proc~prif_co_min->interface~caf_co_min interface~caf_is_f_string caf_is_f_string proc~prif_co_min->interface~caf_is_f_string proc~optional_value optional_value proc~prif_co_min->proc~optional_value interface~caf_numeric_type caf_numeric_type proc~prif_co_min->interface~caf_numeric_type interface~prif_error_stop prif_error_stop proc~prif_co_min->interface~prif_error_stop proc~prif_co_reduce prif_co_reduce interface~prif_co_reduce->proc~prif_co_reduce proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_co_reduce->interface~caf_is_f_string proc~prif_co_reduce->proc~optional_value proc~prif_co_reduce->interface~prif_error_stop interface~caf_co_reduce caf_co_reduce proc~prif_co_reduce->interface~caf_co_reduce interface~caf_same_cfi_type caf_same_cfi_type proc~prif_co_reduce->interface~caf_same_cfi_type interface~caf_elem_len caf_elem_len proc~prif_co_reduce->interface~caf_elem_len interface~assert assert proc~prif_co_reduce->interface~assert proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string proc~assert assert interface~assert->proc~assert proc~assert->interface~prif_error_stop Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_co_min~~CalledByGraph proc~prif_co_min prif_co_min interface~prif_co_min prif_co_min interface~prif_co_min->proc~prif_co_min Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_co_min.html"},{"title":"prif_co_reduce – Caffeine","text":"module procedure prif_co_reduce module module subroutine prif_co_reduce(a, operation, result_image, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) type(c_funptr), value :: operation integer(kind=c_int), intent(in), optional :: result_image integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_co_reduce~~CallsGraph proc~prif_co_reduce prif_co_reduce interface~caf_co_reduce caf_co_reduce proc~prif_co_reduce->interface~caf_co_reduce interface~caf_is_f_string caf_is_f_string proc~prif_co_reduce->interface~caf_is_f_string interface~caf_same_cfi_type caf_same_cfi_type proc~prif_co_reduce->interface~caf_same_cfi_type proc~optional_value optional_value proc~prif_co_reduce->proc~optional_value interface~assert assert proc~prif_co_reduce->interface~assert interface~caf_elem_len caf_elem_len proc~prif_co_reduce->interface~caf_elem_len interface~prif_error_stop prif_error_stop proc~prif_co_reduce->interface~prif_error_stop proc~assert assert interface~assert->proc~assert proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~assert->interface~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_co_reduce~~CalledByGraph proc~prif_co_reduce prif_co_reduce interface~prif_co_reduce prif_co_reduce interface~prif_co_reduce->proc~prif_co_reduce proc~prif_co_max prif_co_max proc~prif_co_max->interface~prif_co_reduce proc~prif_co_min prif_co_min proc~prif_co_min->interface~prif_co_reduce interface~prif_co_max prif_co_max interface~prif_co_max->proc~prif_co_max interface~prif_co_min prif_co_min interface~prif_co_min->proc~prif_co_min Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_co_reduce.html"},{"title":"prif_co_sum – Caffeine","text":"module procedure prif_co_sum module module subroutine prif_co_sum(a, result_image, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer(kind=c_int), intent(in), optional :: result_image integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_co_sum~~CallsGraph proc~prif_co_sum prif_co_sum proc~optional_value optional_value proc~prif_co_sum->proc~optional_value interface~caf_co_sum caf_co_sum proc~prif_co_sum->interface~caf_co_sum Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_co_sum~~CalledByGraph proc~prif_co_sum prif_co_sum interface~prif_co_sum prif_co_sum interface~prif_co_sum->proc~prif_co_sum proc~prif_allocate_coarray prif_allocate_coarray proc~prif_allocate_coarray->interface~prif_co_sum interface~prif_allocate_coarray prif_allocate_coarray interface~prif_allocate_coarray->proc~prif_allocate_coarray Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_co_sum.html"},{"title":"prif – Caffeine","text":"Uses iso_c_binding module~~prif~~UsesGraph module~prif prif iso_c_binding iso_c_binding module~prif->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by Descendants: prif_private_s module~~prif~~UsedByGraph module~prif prif module~prif_private_s prif_private_s module~prif_private_s->module~prif module~allocation_s allocation_s module~allocation_s->module~prif_private_s module~prif_queries_s prif_queries_s module~prif_queries_s->module~prif_private_s module~notify_s notify_s module~notify_s->module~prif_private_s module~caffeine_assert_s caffeine_assert_s module~caffeine_assert_s->module~prif_private_s module~critical_s critical_s module~critical_s->module~prif_private_s module~co_broadcast_s co_broadcast_s module~co_broadcast_s->module~prif_private_s module~coarray_access_s coarray_access_s module~coarray_access_s->module~prif_private_s module~coarray_queries_s coarray_queries_s module~coarray_queries_s->module~prif_private_s module~co_sum_s co_sum_s module~co_sum_s->module~prif_private_s module~sychronization_s sychronization_s module~sychronization_s->module~prif_private_s module~teams_s teams_s module~teams_s->module~prif_private_s module~locks_s locks_s module~locks_s->module~prif_private_s module~program_termination_s program_termination_s module~program_termination_s->module~prif_private_s module~co_min_s co_min_s module~co_min_s->module~prif_private_s module~events_s events_s module~events_s->module~prif_private_s module~atomic_s atomic_s module~atomic_s->module~prif_private_s module~alias_s alias_s module~alias_s->module~prif_private_s module~program_startup_s program_startup_s module~program_startup_s->module~prif_private_s module~co_max_s co_max_s module~co_max_s->module~prif_private_s module~image_queries_s image_queries_s module~image_queries_s->module~prif_private_s module~co_reduce_s co_reduce_s module~co_reduce_s->module~prif_private_s Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables prif_atomic_int_kind prif_atomic_logical_kind prif_current_team prif_initial_team prif_parent_team prif_stat_already_init prif_stat_failed_image prif_stat_locked prif_stat_locked_other_image prif_stat_out_of_memory prif_stat_stopped_image prif_stat_unlocked prif_stat_unlocked_failed_image prif_version_major prif_version_minor Interfaces prif_alias_create prif_alias_destroy prif_allocate prif_allocate_coarray prif_atomic_add prif_atomic_add_indirect prif_atomic_and prif_atomic_and_indirect prif_atomic_cas_int prif_atomic_cas_int_indirect prif_atomic_cas_logical prif_atomic_cas_logical_indirect prif_atomic_define_int prif_atomic_define_int_indirect prif_atomic_define_logical prif_atomic_define_logical_indirect prif_atomic_fetch_add prif_atomic_fetch_add_indirect prif_atomic_fetch_and prif_atomic_fetch_and_indirect prif_atomic_fetch_or prif_atomic_fetch_or_indirect prif_atomic_fetch_xor prif_atomic_fetch_xor_indirect prif_atomic_or prif_atomic_or_indirect prif_atomic_ref_int prif_atomic_ref_int_indirect prif_atomic_ref_logical prif_atomic_ref_logical_indirect prif_atomic_xor prif_atomic_xor_indirect prif_change_team prif_co_broadcast prif_co_max prif_co_min prif_co_reduce prif_co_sum prif_coshape prif_critical prif_deallocate prif_deallocate_coarray prif_end_critical prif_end_team prif_error_stop prif_event_post prif_event_post_indirect prif_event_query prif_event_wait prif_fail_image prif_failed_images prif_form_team prif_get prif_get_context_data prif_get_indirect prif_get_strided prif_get_strided_indirect prif_get_team prif_image_index prif_image_index_with_team prif_image_index_with_team_number prif_image_status prif_init prif_lcobound_no_dim prif_lcobound_with_dim prif_lock prif_lock_indirect prif_notify_wait prif_num_images prif_num_images_with_team prif_num_images_with_team_number prif_put prif_put_indirect prif_put_indirect_with_notify prif_put_indirect_with_notify_indirect prif_put_strided prif_put_strided_indirect prif_put_strided_indirect_with_notify prif_put_strided_indirect_with_notify_indirect prif_put_strided_with_notify prif_put_strided_with_notify_indirect prif_put_with_notify prif_put_with_notify_indirect prif_set_context_data prif_size_bytes prif_stop prif_stopped_images prif_sync_all prif_sync_images prif_sync_memory prif_sync_team prif_team_number prif_this_image_no_coarray prif_this_image_with_coarray prif_this_image_with_dim prif_ucobound_no_dim prif_ucobound_with_dim prif_unlock prif_unlock_indirect Derived Types prif_coarray_handle prif_critical_type prif_event_type prif_lock_type prif_notify_type prif_team_type handle_data team_data Variables Type Visibility Attributes Name Initial integer(kind=c_int), public, parameter :: prif_atomic_int_kind = selected_int_kind(18) integer(kind=c_int), public, parameter :: prif_atomic_logical_kind = prif_atomic_int_kind integer(kind=c_int), public, parameter :: prif_current_team = 101 integer(kind=c_int), public, parameter :: prif_initial_team = 102 integer(kind=c_int), public, parameter :: prif_parent_team = 103 integer(kind=c_int), public, parameter :: prif_stat_already_init = 302 integer(kind=c_int), public, parameter :: prif_stat_failed_image = 201 integer(kind=c_int), public, parameter :: prif_stat_locked = 202 integer(kind=c_int), public, parameter :: prif_stat_locked_other_image = 203 integer(kind=c_int), public, parameter :: prif_stat_out_of_memory = 301 integer(kind=c_int), public, parameter :: prif_stat_stopped_image = 204 integer(kind=c_int), public, parameter :: prif_stat_unlocked = 205 integer(kind=c_int), public, parameter :: prif_stat_unlocked_failed_image = 206 integer(kind=c_int), public, parameter :: prif_version_major = 0 integer(kind=c_int), public, parameter :: prif_version_minor = 4 Interfaces interface public module module subroutine prif_alias_create(source_handle, alias_lcobounds, alias_ucobounds, alias_handle) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: source_handle integer(kind=c_intmax_t), intent(in) :: alias_lcobounds (:) integer(kind=c_intmax_t), intent(in) :: alias_ucobounds (:) type( prif_coarray_handle ), intent(out) :: alias_handle interface public module module subroutine prif_alias_destroy(alias_handle) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: alias_handle interface public module module subroutine prif_allocate(size_in_bytes, allocated_memory, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_size_t) :: size_in_bytes type(c_ptr), intent(out) :: allocated_memory integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_allocate_coarray(lcobounds, ucobounds, lbounds, ubounds, element_size, final_func, coarray_handle, allocated_memory, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_intmax_t), intent(in), dimension(:) :: lcobounds integer(kind=c_intmax_t), intent(in), dimension(:) :: ucobounds integer(kind=c_intmax_t), intent(in), dimension(:) :: lbounds integer(kind=c_intmax_t), intent(in), dimension(:) :: ubounds integer(kind=c_size_t), intent(in) :: element_size type(c_funptr), intent(in) :: final_func type( prif_coarray_handle ), intent(out) :: coarray_handle type(c_ptr), intent(out) :: allocated_memory integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_atomic_add(image_num, coarray_handle, offset, value, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat interface public module module subroutine prif_atomic_add_indirect(image_num, atom_remote_ptr, value, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat interface public module module subroutine prif_atomic_and(image_num, coarray_handle, offset, value, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat interface public module module subroutine prif_atomic_and_indirect(image_num, atom_remote_ptr, value, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat interface public module module subroutine prif_atomic_cas_int(image_num, coarray_handle, offset, old, compare, new, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=prif_atomic_int_kind), intent(out) :: old integer(kind=prif_atomic_int_kind), intent(in) :: compare integer(kind=prif_atomic_int_kind), intent(in) :: new integer(kind=c_int), intent(out), optional :: stat interface public module module subroutine prif_atomic_cas_int_indirect(image_num, atom_remote_ptr, old, compare, new, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=prif_atomic_int_kind), intent(out) :: old integer(kind=prif_atomic_int_kind), intent(in) :: compare integer(kind=prif_atomic_int_kind), intent(in) :: new integer(kind=c_int), intent(out), optional :: stat interface public module module subroutine prif_atomic_cas_logical(image_num, coarray_handle, offset, old, compare, new, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset logical(kind=prif_atomic_logical_kind), intent(out) :: old logical(kind=prif_atomic_logical_kind), intent(in) :: compare logical(kind=prif_atomic_logical_kind), intent(in) :: new integer(kind=c_int), intent(out), optional :: stat interface public module module subroutine prif_atomic_cas_logical_indirect(image_num, atom_remote_ptr, old, compare, new, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr logical(kind=prif_atomic_logical_kind), intent(out) :: old logical(kind=prif_atomic_logical_kind), intent(in) :: compare logical(kind=prif_atomic_logical_kind), intent(in) :: new integer(kind=c_int), intent(out), optional :: stat interface public module module subroutine prif_atomic_define_int(image_num, coarray_handle, offset, value, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat interface public module module subroutine prif_atomic_define_int_indirect(image_num, atom_remote_ptr, value, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat interface public module module subroutine prif_atomic_define_logical(image_num, coarray_handle, offset, value, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset logical(kind=prif_atomic_logical_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat interface public module module subroutine prif_atomic_define_logical_indirect(image_num, atom_remote_ptr, value, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr logical(kind=prif_atomic_logical_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat interface public module module subroutine prif_atomic_fetch_add(image_num, coarray_handle, offset, value, old, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=prif_atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat interface public module module subroutine prif_atomic_fetch_add_indirect(image_num, atom_remote_ptr, value, old, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=prif_atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat interface public module module subroutine prif_atomic_fetch_and(image_num, coarray_handle, offset, value, old, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=prif_atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat interface public module module subroutine prif_atomic_fetch_and_indirect(image_num, atom_remote_ptr, value, old, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=prif_atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat interface public module module subroutine prif_atomic_fetch_or(image_num, coarray_handle, offset, value, old, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=prif_atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat interface public module module subroutine prif_atomic_fetch_or_indirect(image_num, atom_remote_ptr, value, old, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=prif_atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat interface public module module subroutine prif_atomic_fetch_xor(image_num, coarray_handle, offset, value, old, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=prif_atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat interface public module module subroutine prif_atomic_fetch_xor_indirect(image_num, atom_remote_ptr, value, old, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=prif_atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat interface public module module subroutine prif_atomic_or(image_num, coarray_handle, offset, value, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat interface public module module subroutine prif_atomic_or_indirect(image_num, atom_remote_ptr, value, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat interface public module module subroutine prif_atomic_ref_int(image_num, coarray_handle, offset, value, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=prif_atomic_int_kind), intent(out) :: value integer(kind=c_int), intent(out), optional :: stat interface public module module subroutine prif_atomic_ref_int_indirect(image_num, atom_remote_ptr, value, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=prif_atomic_int_kind), intent(out) :: value integer(kind=c_int), intent(out), optional :: stat interface public module module subroutine prif_atomic_ref_logical(image_num, coarray_handle, offset, value, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset logical(kind=prif_atomic_logical_kind), intent(out) :: value integer(kind=c_int), intent(out), optional :: stat interface public module module subroutine prif_atomic_ref_logical_indirect(image_num, atom_remote_ptr, value, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr logical(kind=prif_atomic_logical_kind), intent(out) :: value integer(kind=c_int), intent(out), optional :: stat interface public module module subroutine prif_atomic_xor(image_num, coarray_handle, offset, value, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat interface public module module subroutine prif_atomic_xor_indirect(image_num, atom_remote_ptr, value, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat interface public module module subroutine prif_change_team(team, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in) :: team integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_co_broadcast(a, source_image, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer(kind=c_int), intent(in) :: source_image integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_co_max(a, result_image, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer(kind=c_int), intent(in), optional :: result_image integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_co_min(a, result_image, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer(kind=c_int), intent(in), optional :: result_image integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_co_reduce(a, operation, result_image, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) type(c_funptr), value :: operation integer(kind=c_int), intent(in), optional :: result_image integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_co_sum(a, result_image, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer(kind=c_int), intent(in), optional :: result_image integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_coshape(coarray_handle, sizes) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(out) :: sizes (:) interface public module module subroutine prif_critical(critical_coarray, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: critical_coarray integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_deallocate(mem, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in) :: mem integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_deallocate_coarray(coarray_handles, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handles (:) integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_end_critical(critical_coarray) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: critical_coarray interface public module module subroutine prif_end_team(stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public pure module module subroutine prif_error_stop(quiet, stop_code_int, stop_code_char) Implementation → Arguments Type Intent Optional Attributes Name logical(kind=c_bool), intent(in) :: quiet integer(kind=c_int), intent(in), optional :: stop_code_int character(len=*), intent(in), optional :: stop_code_char interface public module module subroutine prif_event_post(image_num, coarray_handle, offset, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_event_post_indirect(image_num, event_var_ptr, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: event_var_ptr integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_event_query(event_var_ptr, count, stat) Implementation → Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in) :: event_var_ptr integer(kind=c_intmax_t), intent(out) :: count integer(kind=c_int), intent(out), optional :: stat interface public module module subroutine prif_event_wait(event_var_ptr, until_count, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in) :: event_var_ptr integer(kind=c_intmax_t), intent(in), optional :: until_count integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_fail_image() Implementation → Arguments None interface public module module subroutine prif_failed_images(team, failed_images) Implementation → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in), optional :: team integer(kind=c_int), intent(out), allocatable :: failed_images (:) interface public module module subroutine prif_form_team(team_number, team, new_index, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_intmax_t), intent(in) :: team_number type( prif_team_type ), intent(out) :: team integer(kind=c_int), intent(in), optional :: new_index integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_get(image_num, coarray_handle, offset, current_image_buffer, size_in_bytes, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_size_t), intent(in) :: size_in_bytes integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_get_context_data(coarray_handle, context_data) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle type(c_ptr), intent(out) :: context_data interface public module module subroutine prif_get_indirect(image_num, remote_ptr, current_image_buffer, size_in_bytes, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: remote_ptr type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_size_t), intent(in) :: size_in_bytes integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_get_strided(image_num, coarray_handle, offset, remote_stride, current_image_buffer, current_image_stride, element_size, extent, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=c_ptrdiff_t), intent(in) :: remote_stride (:) type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_ptrdiff_t), intent(in) :: current_image_stride (:) integer(kind=c_size_t), intent(in) :: element_size integer(kind=c_size_t), intent(in) :: extent (:) integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_get_strided_indirect(image_num, remote_ptr, remote_stride, current_image_buffer, current_image_stride, element_size, extent, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: remote_ptr integer(kind=c_ptrdiff_t), intent(in) :: remote_stride (:) type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_ptrdiff_t), intent(in) :: current_image_stride (:) integer(kind=c_size_t), intent(in) :: element_size integer(kind=c_size_t), intent(in) :: extent (:) integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_get_team(level, team) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in), optional :: level type( prif_team_type ), intent(out) :: team interface public module module subroutine prif_image_index(coarray_handle, sub, image_index) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_intmax_t), intent(in) :: sub (:) integer(kind=c_int), intent(out) :: image_index interface public module module subroutine prif_image_index_with_team(coarray_handle, sub, team, image_index) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_intmax_t), intent(in) :: sub (:) type( prif_team_type ), intent(in) :: team integer(kind=c_int), intent(out) :: image_index interface public module module subroutine prif_image_index_with_team_number(coarray_handle, sub, team_number, image_index) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_intmax_t), intent(in) :: sub (:) integer(kind=c_int), intent(in) :: team_number integer(kind=c_int), intent(out) :: image_index interface public impure elemental module module subroutine prif_image_status(image, team, image_status) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image type( prif_team_type ), intent(in), optional :: team integer(kind=c_int), intent(out) :: image_status interface public module module subroutine prif_init(stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(out) :: stat interface public module module subroutine prif_lcobound_no_dim(coarray_handle, lcobounds) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_intmax_t), intent(out) :: lcobounds (:) interface public module module subroutine prif_lcobound_with_dim(coarray_handle, dim, lcobound) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_int), intent(in) :: dim integer(kind=c_intmax_t), intent(out) :: lcobound interface public module module subroutine prif_lock(image_num, coarray_handle, offset, acquired_lock, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset logical(kind=c_bool), intent(out), optional :: acquired_lock integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_lock_indirect(image_num, lock_var_ptr, acquired_lock, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: lock_var_ptr logical(kind=c_bool), intent(out), optional :: acquired_lock integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_notify_wait(notify_var_ptr, until_count, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in) :: notify_var_ptr integer(kind=c_intmax_t), intent(in), optional :: until_count integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_num_images(num_images) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(out) :: num_images interface public module module subroutine prif_num_images_with_team(team, num_images) Implementation → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in) :: team integer(kind=c_int), intent(out) :: num_images interface public module module subroutine prif_num_images_with_team_number(team_number, num_images) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_intmax_t), intent(in) :: team_number integer(kind=c_int), intent(out) :: num_images interface public module module subroutine prif_put(image_num, coarray_handle, offset, current_image_buffer, size_in_bytes, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_size_t), intent(in) :: size_in_bytes integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_put_indirect(image_num, remote_ptr, current_image_buffer, size_in_bytes, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: remote_ptr type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_size_t), intent(in) :: size_in_bytes integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_put_indirect_with_notify(image_num, remote_ptr, current_image_buffer, size_in_bytes, notify_coarray_handle, notify_offset, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: remote_ptr type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_size_t), intent(in) :: size_in_bytes type( prif_coarray_handle ), intent(in) :: notify_coarray_handle integer(kind=c_size_t), intent(in) :: notify_offset integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_put_indirect_with_notify_indirect(image_num, remote_ptr, current_image_buffer, size_in_bytes, notify_ptr, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: remote_ptr type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_size_t), intent(in) :: size_in_bytes integer(kind=c_intptr_t), intent(in) :: notify_ptr integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_put_strided(image_num, coarray_handle, offset, remote_stride, current_image_buffer, current_image_stride, element_size, extent, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=c_ptrdiff_t), intent(in) :: remote_stride (:) type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_ptrdiff_t), intent(in) :: current_image_stride (:) integer(kind=c_size_t), intent(in) :: element_size integer(kind=c_size_t), intent(in) :: extent (:) integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_put_strided_indirect(image_num, remote_ptr, remote_stride, current_image_buffer, current_image_stride, element_size, extent, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: remote_ptr integer(kind=c_ptrdiff_t), intent(in) :: remote_stride (:) type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_ptrdiff_t), intent(in) :: current_image_stride (:) integer(kind=c_size_t), intent(in) :: element_size integer(kind=c_size_t), intent(in) :: extent (:) integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_put_strided_indirect_with_notify(image_num, remote_ptr, remote_stride, current_image_buffer, current_image_stride, element_size, extent, notify_coarray_handle, notify_offset, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: remote_ptr integer(kind=c_ptrdiff_t), intent(in) :: remote_stride (:) type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_ptrdiff_t), intent(in) :: current_image_stride (:) integer(kind=c_size_t), intent(in) :: element_size integer(kind=c_size_t), intent(in) :: extent (:) type( prif_coarray_handle ), intent(in) :: notify_coarray_handle integer(kind=c_size_t), intent(in) :: notify_offset integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_put_strided_indirect_with_notify_indirect(image_num, remote_ptr, remote_stride, current_image_buffer, current_image_stride, element_size, extent, notify_ptr, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: remote_ptr integer(kind=c_ptrdiff_t), intent(in) :: remote_stride (:) type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_ptrdiff_t), intent(in) :: current_image_stride (:) integer(kind=c_size_t), intent(in) :: element_size integer(kind=c_size_t), intent(in) :: extent (:) integer(kind=c_intptr_t), intent(in) :: notify_ptr integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_put_strided_with_notify(image_num, coarray_handle, offset, remote_stride, current_image_buffer, current_image_stride, element_size, extent, notify_coarray_handle, notify_offset, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=c_ptrdiff_t), intent(in) :: remote_stride (:) type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_ptrdiff_t), intent(in) :: current_image_stride (:) integer(kind=c_size_t), intent(in) :: element_size integer(kind=c_size_t), intent(in) :: extent (:) type( prif_coarray_handle ), intent(in) :: notify_coarray_handle integer(kind=c_size_t), intent(in) :: notify_offset integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_put_strided_with_notify_indirect(image_num, coarray_handle, offset, remote_stride, current_image_buffer, current_image_stride, element_size, extent, notify_ptr, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=c_ptrdiff_t), intent(in) :: remote_stride (:) type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_ptrdiff_t), intent(in) :: current_image_stride (:) integer(kind=c_size_t), intent(in) :: element_size integer(kind=c_size_t), intent(in) :: extent (:) integer(kind=c_intptr_t), intent(in) :: notify_ptr integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_put_with_notify(image_num, coarray_handle, offset, current_image_buffer, size_in_bytes, notify_coarray_handle, notify_offset, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_size_t), intent(in) :: size_in_bytes type( prif_coarray_handle ), intent(in) :: notify_coarray_handle integer(kind=c_size_t), intent(in) :: notify_offset integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_put_with_notify_indirect(image_num, coarray_handle, offset, current_image_buffer, size_in_bytes, notify_ptr, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_size_t), intent(in) :: size_in_bytes integer(kind=c_intptr_t), intent(in) :: notify_ptr integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_set_context_data(coarray_handle, context_data) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle type(c_ptr), intent(in) :: context_data interface public module module subroutine prif_size_bytes(coarray_handle, data_size) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(out) :: data_size interface public module module subroutine prif_stop(quiet, stop_code_int, stop_code_char) Implementation → Arguments Type Intent Optional Attributes Name logical(kind=c_bool), intent(in) :: quiet integer(kind=c_int), intent(in), optional :: stop_code_int character(len=*), intent(in), optional :: stop_code_char interface public module module subroutine prif_stopped_images(team, stopped_images) Implementation → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in), optional :: team integer(kind=c_int), intent(out), allocatable :: stopped_images (:) interface public module module subroutine prif_sync_all(stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_sync_images(image_set, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in), optional :: image_set (:) integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_sync_memory(stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_sync_team(team, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in) :: team integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_team_number(team, team_number) Implementation → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in), optional :: team integer(kind=c_intmax_t), intent(out) :: team_number interface public module module subroutine prif_this_image_no_coarray(team, this_image) Implementation → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in), optional :: team integer(kind=c_int), intent(out) :: this_image interface public module module subroutine prif_this_image_with_coarray(coarray_handle, team, cosubscripts) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle type( prif_team_type ), intent(in), optional :: team integer(kind=c_intmax_t), intent(out) :: cosubscripts (:) interface public module module subroutine prif_this_image_with_dim(coarray_handle, dim, team, cosubscript) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_int), intent(in) :: dim type( prif_team_type ), intent(in), optional :: team integer(kind=c_intmax_t), intent(out) :: cosubscript interface public module module subroutine prif_ucobound_no_dim(coarray_handle, ucobounds) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_intmax_t), intent(out) :: ucobounds (:) interface public module module subroutine prif_ucobound_with_dim(coarray_handle, dim, ucobound) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_int), intent(in) :: dim integer(kind=c_intmax_t), intent(out) :: ucobound interface public module module subroutine prif_unlock(image_num, coarray_handle, offset, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_unlock_indirect(image_num, lock_var_ptr, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: lock_var_ptr integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Derived Types type, public :: prif_coarray_handle Components Type Visibility Attributes Name Initial type( handle_data ), public, pointer :: info type, public :: prif_critical_type Components Type Visibility Attributes Name Initial integer, public :: unimplemented_feature_placeholder = 0 type, public :: prif_event_type Components Type Visibility Attributes Name Initial integer, public :: unimplemented_feature_placeholder = 0 type, public :: prif_lock_type Components Type Visibility Attributes Name Initial integer, public :: unimplemented_feature_placeholder = 0 type, public :: prif_notify_type Components Type Visibility Attributes Name Initial integer, public :: unimplemented_feature_placeholder = 0 type, public :: prif_team_type Components Type Visibility Attributes Name Initial type( team_data ), public, pointer :: info => null() type, private, bind(c) :: handle_data Components Type Visibility Attributes Name Initial type(c_ptr), private :: coarray_data integer(kind=c_size_t), private :: coarray_size integer(kind=c_int), private :: corank integer(kind=c_size_t), private :: element_size type(c_funptr), private :: final_func integer(kind=c_intmax_t), private :: lcobounds (15) type(c_ptr), private :: next_handle type(c_ptr), private :: previous_handle integer(kind=c_intmax_t), private :: ucobounds (15) type, private :: team_data Components Type Visibility Attributes Name Initial type( handle_data ), private, pointer :: coarrays => null() type(c_ptr), private :: gex_team type(c_ptr), private :: heap_mspace integer(kind=c_intptr_t), private :: heap_start type( team_data ), private, pointer :: parent_team => null()","tags":"","loc":"module/prif.html"},{"title":"allocation_s – Caffeine","text":"Uses iso_c_binding Ancestors: prif : prif_private_s module~~allocation_s~~UsesGraph module~allocation_s allocation_s iso_c_binding iso_c_binding module~allocation_s->iso_c_binding module~prif_private_s prif_private_s module~allocation_s->module~prif_private_s module~prif prif module~prif_private_s->module~prif module~prif->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Subroutines add_to_team_list remove_from_team_list Module Procedures prif_allocate prif_allocate_coarray prif_deallocate prif_deallocate_coarray Subroutines subroutine add_to_team_list (current_team, coarray_handle) Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(inout) :: current_team type( prif_coarray_handle ), intent(inout) :: coarray_handle subroutine remove_from_team_list (coarray_handle) Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle Module Procedures module procedure prif_allocate module module subroutine prif_allocate(size_in_bytes, allocated_memory, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_size_t) :: size_in_bytes type(c_ptr), intent(out) :: allocated_memory integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_allocate_coarray module module subroutine prif_allocate_coarray(lcobounds, ucobounds, lbounds, ubounds, element_size, final_func, coarray_handle, allocated_memory, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_intmax_t), intent(in), dimension(:) :: lcobounds integer(kind=c_intmax_t), intent(in), dimension(:) :: ucobounds integer(kind=c_intmax_t), intent(in), dimension(:) :: lbounds integer(kind=c_intmax_t), intent(in), dimension(:) :: ubounds integer(kind=c_size_t), intent(in) :: element_size type(c_funptr), intent(in) :: final_func type( prif_coarray_handle ), intent(out) :: coarray_handle type(c_ptr), intent(out) :: allocated_memory integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_deallocate module module subroutine prif_deallocate(mem, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in) :: mem integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_deallocate_coarray module module subroutine prif_deallocate_coarray(coarray_handles, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handles (:) integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"module/allocation_s.html"},{"title":"alias_s – Caffeine","text":"Uses Ancestors: prif : prif_private_s module~~alias_s~~UsesGraph module~alias_s alias_s module~prif_private_s prif_private_s module~alias_s->module~prif_private_s module~prif prif module~prif_private_s->module~prif iso_c_binding iso_c_binding module~prif->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures prif_alias_create prif_alias_destroy Module Procedures module procedure prif_alias_create module module subroutine prif_alias_create(source_handle, alias_lcobounds, alias_ucobounds, alias_handle) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: source_handle integer(kind=c_intmax_t), intent(in) :: alias_lcobounds (:) integer(kind=c_intmax_t), intent(in) :: alias_ucobounds (:) type( prif_coarray_handle ), intent(out) :: alias_handle module procedure prif_alias_destroy module module subroutine prif_alias_destroy(alias_handle) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: alias_handle","tags":"","loc":"module/alias_s.html"},{"title":"critical_s – Caffeine","text":"Uses Ancestors: prif : prif_private_s module~~critical_s~~UsesGraph module~critical_s critical_s module~prif_private_s prif_private_s module~critical_s->module~prif_private_s module~prif prif module~prif_private_s->module~prif iso_c_binding iso_c_binding module~prif->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures prif_critical prif_end_critical Module Procedures module procedure prif_critical module module subroutine prif_critical(critical_coarray, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: critical_coarray integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_end_critical module module subroutine prif_end_critical(critical_coarray) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: critical_coarray","tags":"","loc":"module/critical_s.html"},{"title":"locks_s – Caffeine","text":"Uses Ancestors: prif : prif_private_s module~~locks_s~~UsesGraph module~locks_s locks_s module~prif_private_s prif_private_s module~locks_s->module~prif_private_s module~prif prif module~prif_private_s->module~prif iso_c_binding iso_c_binding module~prif->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures prif_lock prif_lock_indirect prif_unlock prif_unlock_indirect Module Procedures module procedure prif_lock module module subroutine prif_lock(image_num, coarray_handle, offset, acquired_lock, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset logical(kind=c_bool), intent(out), optional :: acquired_lock integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_lock_indirect module module subroutine prif_lock_indirect(image_num, lock_var_ptr, acquired_lock, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: lock_var_ptr logical(kind=c_bool), intent(out), optional :: acquired_lock integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_unlock module module subroutine prif_unlock(image_num, coarray_handle, offset, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_unlock_indirect module module subroutine prif_unlock_indirect(image_num, lock_var_ptr, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: lock_var_ptr integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"module/locks_s.html"},{"title":"image_queries_s – Caffeine","text":"Uses Ancestors: prif : prif_private_s module~~image_queries_s~~UsesGraph module~image_queries_s image_queries_s module~prif_private_s prif_private_s module~image_queries_s->module~prif_private_s module~prif prif module~prif_private_s->module~prif iso_c_binding iso_c_binding module~prif->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures prif_failed_images prif_image_status prif_num_images prif_num_images_with_team prif_num_images_with_team_number prif_stopped_images prif_this_image_no_coarray prif_this_image_with_coarray prif_this_image_with_dim Module Procedures module procedure prif_failed_images module module subroutine prif_failed_images(team, failed_images) Interface → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in), optional :: team integer(kind=c_int), intent(out), allocatable :: failed_images (:) module procedure prif_image_status impure elemental module module subroutine prif_image_status(image, team, image_status) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image type( prif_team_type ), intent(in), optional :: team integer(kind=c_int), intent(out) :: image_status module procedure prif_num_images module module subroutine prif_num_images(num_images) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(out) :: num_images module procedure prif_num_images_with_team module module subroutine prif_num_images_with_team(team, num_images) Interface → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in) :: team integer(kind=c_int), intent(out) :: num_images module procedure prif_num_images_with_team_number module module subroutine prif_num_images_with_team_number(team_number, num_images) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_intmax_t), intent(in) :: team_number integer(kind=c_int), intent(out) :: num_images module procedure prif_stopped_images module module subroutine prif_stopped_images(team, stopped_images) Interface → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in), optional :: team integer(kind=c_int), intent(out), allocatable :: stopped_images (:) module procedure prif_this_image_no_coarray module module subroutine prif_this_image_no_coarray(team, this_image) Interface → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in), optional :: team integer(kind=c_int), intent(out) :: this_image module procedure prif_this_image_with_coarray module module subroutine prif_this_image_with_coarray(coarray_handle, team, cosubscripts) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle type( prif_team_type ), intent(in), optional :: team integer(kind=c_intmax_t), intent(out) :: cosubscripts (:) module procedure prif_this_image_with_dim module module subroutine prif_this_image_with_dim(coarray_handle, dim, team, cosubscript) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_int), intent(in) :: dim type( prif_team_type ), intent(in), optional :: team integer(kind=c_intmax_t), intent(out) :: cosubscript","tags":"","loc":"module/image_queries_s.html"},{"title":"coarray_access_s – Caffeine","text":"Uses iso_c_binding Ancestors: prif : prif_private_s module~~coarray_access_s~~UsesGraph module~coarray_access_s coarray_access_s iso_c_binding iso_c_binding module~coarray_access_s->iso_c_binding module~prif_private_s prif_private_s module~coarray_access_s->module~prif_private_s module~prif prif module~prif_private_s->module~prif module~prif->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures prif_get prif_get_indirect prif_get_strided prif_get_strided_indirect prif_put prif_put_indirect prif_put_indirect_with_notify prif_put_indirect_with_notify_indirect prif_put_strided prif_put_strided_indirect prif_put_strided_indirect_with_notify prif_put_strided_indirect_with_notify_indirect prif_put_strided_with_notify prif_put_strided_with_notify_indirect prif_put_with_notify prif_put_with_notify_indirect Module Procedures module procedure prif_get module module subroutine prif_get(image_num, coarray_handle, offset, current_image_buffer, size_in_bytes, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_size_t), intent(in) :: size_in_bytes integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_get_indirect module module subroutine prif_get_indirect(image_num, remote_ptr, current_image_buffer, size_in_bytes, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: remote_ptr type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_size_t), intent(in) :: size_in_bytes integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_get_strided module module subroutine prif_get_strided(image_num, coarray_handle, offset, remote_stride, current_image_buffer, current_image_stride, element_size, extent, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=c_ptrdiff_t), intent(in) :: remote_stride (:) type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_ptrdiff_t), intent(in) :: current_image_stride (:) integer(kind=c_size_t), intent(in) :: element_size integer(kind=c_size_t), intent(in) :: extent (:) integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_get_strided_indirect module module subroutine prif_get_strided_indirect(image_num, remote_ptr, remote_stride, current_image_buffer, current_image_stride, element_size, extent, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: remote_ptr integer(kind=c_ptrdiff_t), intent(in) :: remote_stride (:) type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_ptrdiff_t), intent(in) :: current_image_stride (:) integer(kind=c_size_t), intent(in) :: element_size integer(kind=c_size_t), intent(in) :: extent (:) integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_put module module subroutine prif_put(image_num, coarray_handle, offset, current_image_buffer, size_in_bytes, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_size_t), intent(in) :: size_in_bytes integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_put_indirect module module subroutine prif_put_indirect(image_num, remote_ptr, current_image_buffer, size_in_bytes, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: remote_ptr type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_size_t), intent(in) :: size_in_bytes integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_put_indirect_with_notify module module subroutine prif_put_indirect_with_notify(image_num, remote_ptr, current_image_buffer, size_in_bytes, notify_coarray_handle, notify_offset, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: remote_ptr type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_size_t), intent(in) :: size_in_bytes type( prif_coarray_handle ), intent(in) :: notify_coarray_handle integer(kind=c_size_t), intent(in) :: notify_offset integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_put_indirect_with_notify_indirect module module subroutine prif_put_indirect_with_notify_indirect(image_num, remote_ptr, current_image_buffer, size_in_bytes, notify_ptr, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: remote_ptr type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_size_t), intent(in) :: size_in_bytes integer(kind=c_intptr_t), intent(in) :: notify_ptr integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_put_strided module module subroutine prif_put_strided(image_num, coarray_handle, offset, remote_stride, current_image_buffer, current_image_stride, element_size, extent, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=c_ptrdiff_t), intent(in) :: remote_stride (:) type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_ptrdiff_t), intent(in) :: current_image_stride (:) integer(kind=c_size_t), intent(in) :: element_size integer(kind=c_size_t), intent(in) :: extent (:) integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_put_strided_indirect module module subroutine prif_put_strided_indirect(image_num, remote_ptr, remote_stride, current_image_buffer, current_image_stride, element_size, extent, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: remote_ptr integer(kind=c_ptrdiff_t), intent(in) :: remote_stride (:) type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_ptrdiff_t), intent(in) :: current_image_stride (:) integer(kind=c_size_t), intent(in) :: element_size integer(kind=c_size_t), intent(in) :: extent (:) integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_put_strided_indirect_with_notify module module subroutine prif_put_strided_indirect_with_notify(image_num, remote_ptr, remote_stride, current_image_buffer, current_image_stride, element_size, extent, notify_coarray_handle, notify_offset, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: remote_ptr integer(kind=c_ptrdiff_t), intent(in) :: remote_stride (:) type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_ptrdiff_t), intent(in) :: current_image_stride (:) integer(kind=c_size_t), intent(in) :: element_size integer(kind=c_size_t), intent(in) :: extent (:) type( prif_coarray_handle ), intent(in) :: notify_coarray_handle integer(kind=c_size_t), intent(in) :: notify_offset integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_put_strided_indirect_with_notify_indirect module module subroutine prif_put_strided_indirect_with_notify_indirect(image_num, remote_ptr, remote_stride, current_image_buffer, current_image_stride, element_size, extent, notify_ptr, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: remote_ptr integer(kind=c_ptrdiff_t), intent(in) :: remote_stride (:) type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_ptrdiff_t), intent(in) :: current_image_stride (:) integer(kind=c_size_t), intent(in) :: element_size integer(kind=c_size_t), intent(in) :: extent (:) integer(kind=c_intptr_t), intent(in) :: notify_ptr integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_put_strided_with_notify module module subroutine prif_put_strided_with_notify(image_num, coarray_handle, offset, remote_stride, current_image_buffer, current_image_stride, element_size, extent, notify_coarray_handle, notify_offset, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=c_ptrdiff_t), intent(in) :: remote_stride (:) type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_ptrdiff_t), intent(in) :: current_image_stride (:) integer(kind=c_size_t), intent(in) :: element_size integer(kind=c_size_t), intent(in) :: extent (:) type( prif_coarray_handle ), intent(in) :: notify_coarray_handle integer(kind=c_size_t), intent(in) :: notify_offset integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_put_strided_with_notify_indirect module module subroutine prif_put_strided_with_notify_indirect(image_num, coarray_handle, offset, remote_stride, current_image_buffer, current_image_stride, element_size, extent, notify_ptr, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=c_ptrdiff_t), intent(in) :: remote_stride (:) type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_ptrdiff_t), intent(in) :: current_image_stride (:) integer(kind=c_size_t), intent(in) :: element_size integer(kind=c_size_t), intent(in) :: extent (:) integer(kind=c_intptr_t), intent(in) :: notify_ptr integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_put_with_notify module module subroutine prif_put_with_notify(image_num, coarray_handle, offset, current_image_buffer, size_in_bytes, notify_coarray_handle, notify_offset, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_size_t), intent(in) :: size_in_bytes type( prif_coarray_handle ), intent(in) :: notify_coarray_handle integer(kind=c_size_t), intent(in) :: notify_offset integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_put_with_notify_indirect module module subroutine prif_put_with_notify_indirect(image_num, coarray_handle, offset, current_image_buffer, size_in_bytes, notify_ptr, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset type(c_ptr), intent(in) :: current_image_buffer integer(kind=c_size_t), intent(in) :: size_in_bytes integer(kind=c_intptr_t), intent(in) :: notify_ptr integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"module/coarray_access_s.html"},{"title":"events_s – Caffeine","text":"Uses Ancestors: prif : prif_private_s module~~events_s~~UsesGraph module~events_s events_s module~prif_private_s prif_private_s module~events_s->module~prif_private_s module~prif prif module~prif_private_s->module~prif iso_c_binding iso_c_binding module~prif->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures prif_event_post prif_event_post_indirect prif_event_query prif_event_wait Module Procedures module procedure prif_event_post module module subroutine prif_event_post(image_num, coarray_handle, offset, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_event_post_indirect module module subroutine prif_event_post_indirect(image_num, event_var_ptr, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: event_var_ptr integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_event_query module module subroutine prif_event_query(event_var_ptr, count, stat) Interface → Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in) :: event_var_ptr integer(kind=c_intmax_t), intent(out) :: count integer(kind=c_int), intent(out), optional :: stat module procedure prif_event_wait module module subroutine prif_event_wait(event_var_ptr, until_count, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in) :: event_var_ptr integer(kind=c_intmax_t), intent(in), optional :: until_count integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"module/events_s.html"},{"title":"notify_s – Caffeine","text":"Uses Ancestors: prif : prif_private_s module~~notify_s~~UsesGraph module~notify_s notify_s module~prif_private_s prif_private_s module~notify_s->module~prif_private_s module~prif prif module~prif_private_s->module~prif iso_c_binding iso_c_binding module~prif->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures prif_notify_wait Module Procedures module procedure prif_notify_wait module module subroutine prif_notify_wait(notify_var_ptr, until_count, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in) :: notify_var_ptr integer(kind=c_intmax_t), intent(in), optional :: until_count integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"module/notify_s.html"},{"title":"sychronization_s – Caffeine","text":"Uses Ancestors: prif : prif_private_s module~~sychronization_s~~UsesGraph module~sychronization_s sychronization_s module~prif_private_s prif_private_s module~sychronization_s->module~prif_private_s module~prif prif module~prif_private_s->module~prif iso_c_binding iso_c_binding module~prif->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures prif_sync_all prif_sync_images prif_sync_memory prif_sync_team Module Procedures module procedure prif_sync_all module module subroutine prif_sync_all(stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_sync_images module module subroutine prif_sync_images(image_set, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in), optional :: image_set (:) integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_sync_memory module module subroutine prif_sync_memory(stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_sync_team module module subroutine prif_sync_team(team, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in) :: team integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"module/sychronization_s.html"},{"title":"prif_private_s – Caffeine","text":"Uses Ancestors: prif module~~prif_private_s~~UsesGraph module~prif_private_s prif_private_s module~prif prif module~prif_private_s->module~prif iso_c_binding iso_c_binding module~prif->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by Descendants: alias_s allocation_s atomic_s caffeine_assert_s co_broadcast_s co_max_s co_min_s co_reduce_s co_sum_s coarray_access_s coarray_queries_s critical_s events_s image_queries_s locks_s notify_s prif_queries_s program_startup_s program_termination_s sychronization_s teams_s module~~prif_private_s~~UsedByGraph module~prif_private_s prif_private_s module~allocation_s allocation_s module~allocation_s->module~prif_private_s module~prif_queries_s prif_queries_s module~prif_queries_s->module~prif_private_s module~notify_s notify_s module~notify_s->module~prif_private_s module~caffeine_assert_s caffeine_assert_s module~caffeine_assert_s->module~prif_private_s module~critical_s critical_s module~critical_s->module~prif_private_s module~co_broadcast_s co_broadcast_s module~co_broadcast_s->module~prif_private_s module~coarray_access_s coarray_access_s module~coarray_access_s->module~prif_private_s module~coarray_queries_s coarray_queries_s module~coarray_queries_s->module~prif_private_s module~co_sum_s co_sum_s module~co_sum_s->module~prif_private_s module~sychronization_s sychronization_s module~sychronization_s->module~prif_private_s module~teams_s teams_s module~teams_s->module~prif_private_s module~locks_s locks_s module~locks_s->module~prif_private_s module~program_termination_s program_termination_s module~program_termination_s->module~prif_private_s module~co_min_s co_min_s module~co_min_s->module~prif_private_s module~events_s events_s module~events_s->module~prif_private_s module~atomic_s atomic_s module~atomic_s->module~prif_private_s module~alias_s alias_s module~alias_s->module~prif_private_s module~program_startup_s program_startup_s module~program_startup_s->module~prif_private_s module~co_max_s co_max_s module~co_max_s->module~prif_private_s module~image_queries_s image_queries_s module~image_queries_s->module~prif_private_s module~co_reduce_s co_reduce_s module~co_reduce_s->module~prif_private_s Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables current_team initial_team non_symmetric_heap_mspace Interfaces assert caf_allocate caf_caffeinate caf_co_broadcast caf_co_max caf_co_min caf_co_reduce caf_co_sum caf_convert_base_addr caf_deallocate caf_decaffeinate caf_elem_len caf_get caf_is_f_string caf_num_images caf_numeric_type caf_put caf_same_cfi_type caf_sync_all caf_this_image Functions as_c_ptr as_int optional_value Subroutines base_pointer unimplemented Variables Type Visibility Attributes Name Initial type( prif_team_type ), private :: current_team type( team_data ), private, target :: initial_team type(c_ptr), private :: non_symmetric_heap_mspace Interfaces interface pure module module subroutine assert(assertion, description, diagnostics) Implementation → Arguments Type Intent Optional Attributes Name logical, intent(in) :: assertion character(len=*), intent(in) :: description class(*), intent(in), optional :: diagnostics interface function caf_allocate(mspace, bytes) result(ptr) bind(c) Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in), value :: mspace integer(kind=c_size_t), intent(in), value :: bytes Return Value type(c_ptr) interface subroutine caf_caffeinate(symmetric_heap, symmetric_heap_start, non_symmetric_heap, initial_team) bind(c) Arguments Type Intent Optional Attributes Name type(c_ptr), intent(out) :: symmetric_heap integer(kind=c_intptr_t), intent(out) :: symmetric_heap_start type(c_ptr), intent(out) :: non_symmetric_heap type(c_ptr), intent(out) :: initial_team interface subroutine caf_co_broadcast(a, source_image, nelem, team) bind(c) void c_co_broadcast(CFI_cdesc_t * a_desc, int source_image, int num_elements, gex_TM_t team); Arguments Type Intent Optional Attributes Name type(*) :: a (..) integer(kind=c_int), value :: source_image integer(kind=c_int), value :: nelem type(c_ptr), value :: team interface subroutine caf_co_max(a, result_image, num_elements, team) bind(c) void c_co_max(CFI_cdesc_t* a_desc, int result_image, size_t num_elements, gex_TM_t team); Arguments Type Intent Optional Attributes Name type(*) :: a (..) integer(kind=c_int), value :: result_image integer(kind=c_size_t), value :: num_elements type(c_ptr), value :: team interface subroutine caf_co_min(a, result_image, num_elements, team) bind(c) void c_co_min(CFI_cdesc_t* a_desc, int result_image, size_t num_elements, gex_TM_t team); Arguments Type Intent Optional Attributes Name type(*) :: a (..) integer(kind=c_int), value :: result_image integer(kind=c_size_t), value :: num_elements type(c_ptr), value :: team interface subroutine caf_co_reduce(a, result_image, num_elements, coll_reducesub, client_data, team) bind(c) void caf_co_reduce(CFI_cdesc_t a_desc, int result_image, int num_elements, gex_Coll_ReduceFn_t user_op, void* client_data) Arguments Type Intent Optional Attributes Name type(*) :: a (..) integer(kind=c_int), value :: result_image integer(kind=c_size_t), value :: num_elements type(c_funptr), value :: coll_reducesub type(c_ptr), value :: client_data type(c_ptr), value :: team interface subroutine caf_co_sum(a, result_image, num_elements, team) bind(c) void c_co_sum(CFI_cdesc_t* a_desc, int result_image, size_t num_elements, gex_TM_t team); Arguments Type Intent Optional Attributes Name type(*) :: a (..) integer(kind=c_int), value :: result_image integer(kind=c_size_t), value :: num_elements type(c_ptr), value :: team interface module function caf_convert_base_addr(addr, image) result(ptr) bind(c) Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in), value :: addr integer(kind=c_int), intent(in), value :: image Return Value integer(kind=c_intptr_t) interface subroutine caf_deallocate(mspace, mem) bind(c) Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in), value :: mspace type(c_ptr), intent(in), value :: mem interface subroutine caf_decaffeinate(exit_code) bind(c) void c_decaffeinate(); Arguments Type Intent Optional Attributes Name integer(kind=c_int), value :: exit_code interface pure function caf_elem_len(a) result(a_elem_len) bind(c) size_t caf_elem_len(CFI_cdesc_t* a_desc); Arguments Type Intent Optional Attributes Name type(*), intent(in) :: a (..) Return Value integer(kind=c_size_t),target interface subroutine caf_get(image, dest, src, size) bind(c) void caf_get(int image, void* dest, intptr_t src, size_t size) Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in), value :: image type(c_ptr), intent(in), value :: dest integer(kind=c_intptr_t), intent(in), value :: src integer(kind=c_size_t), intent(in), value :: size interface pure function caf_is_f_string(a) bind(c) bool caf_is_f_string(CFI_cdesc_t* a_desc); Arguments Type Intent Optional Attributes Name type(*), intent(in) :: a (..) Return Value logical(kind=c_bool) interface pure function caf_num_images(team) bind(c) int caf_num_images(); Arguments Type Intent Optional Attributes Name type(c_ptr), value :: team Return Value integer(kind=c_int) interface pure function caf_numeric_type(a) bind(c) bool caf_numeric_type(CFI_cdesc_t* a_desc); Arguments Type Intent Optional Attributes Name type(*), intent(in) :: a (..) Return Value logical(kind=c_bool) interface subroutine caf_put(image, dest, src, size) bind(c) void caf_put(int image, intptr_t dest, void* src, size_t size) Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in), value :: image integer(kind=c_intptr_t), intent(in), value :: dest type(c_ptr), intent(in), value :: src integer(kind=c_size_t), intent(in), value :: size interface pure function caf_same_cfi_type(a, b) bind(c) bool caf_same_cfi_type(CFI_cdesc_t a_desc, CFI_cdesc_t a_desc); Arguments Type Intent Optional Attributes Name type(*), intent(in) :: a (..) type(*), intent(in) :: b (..) Return Value logical(kind=c_bool) interface subroutine caf_sync_all() bind(c) void caf_sync_all(); Arguments None interface function caf_this_image(team) bind(c) int caf_this_image(); Arguments Type Intent Optional Attributes Name type(c_ptr), value :: team Return Value integer(kind=c_int) Functions pure function as_c_ptr (i) Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: i Return Value type(c_ptr) pure function as_int (ptr) Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in) :: ptr Return Value integer(kind=c_intptr_t) pure function optional_value (var) result(c_val) Arguments Type Intent Optional Attributes Name integer, intent(in), optional :: var Return Value integer(kind=c_int) Subroutines subroutine base_pointer (coarray_handle, image_num, ptr) Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(out) :: ptr subroutine unimplemented (proc_name) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: proc_name","tags":"","loc":"module/prif_private_s.html"},{"title":"program_startup_s – Caffeine","text":"Uses Ancestors: prif : prif_private_s module~~program_startup_s~~UsesGraph module~program_startup_s program_startup_s module~prif_private_s prif_private_s module~program_startup_s->module~prif_private_s module~prif prif module~prif_private_s->module~prif iso_c_binding iso_c_binding module~prif->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures prif_init Module Procedures module procedure prif_init module module subroutine prif_init(stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(out) :: stat","tags":"","loc":"module/program_startup_s.html"},{"title":"caffeine_assert_s – Caffeine","text":"Uses Ancestors: prif : prif_private_s module~~caffeine_assert_s~~UsesGraph module~caffeine_assert_s caffeine_assert_s module~prif_private_s prif_private_s module~caffeine_assert_s->module~prif_private_s module~prif prif module~prif_private_s->module~prif iso_c_binding iso_c_binding module~prif->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables assertions_ Module Procedures assert Variables Type Visibility Attributes Name Initial logical, private, parameter :: assertions_ = .true. Disable assertions by compiling with preprocessor setting: -DCAF_ASSERTIONS=0 Module Procedures module procedure assert pure module module subroutine assert(assertion, description, diagnostics) Interface → Arguments Type Intent Optional Attributes Name logical, intent(in) :: assertion character(len=*), intent(in) :: description class(*), intent(in), optional :: diagnostics","tags":"","loc":"module/caffeine_assert_s.html"},{"title":"program_termination_s – Caffeine","text":"Uses iso_c_binding iso_fortran_env Ancestors: prif : prif_private_s module~~program_termination_s~~UsesGraph module~program_termination_s program_termination_s iso_c_binding iso_c_binding module~program_termination_s->iso_c_binding module~prif_private_s prif_private_s module~program_termination_s->module~prif_private_s iso_fortran_env iso_fortran_env module~program_termination_s->iso_fortran_env module~prif prif module~prif_private_s->module~prif module~prif->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Functions c_f_string f_c_string Subroutines inner_caf_error_stop_character inner_caf_error_stop_integer prif_error_stop_character prif_error_stop_integer Module Procedures prif_error_stop prif_fail_image prif_stop Functions pure function c_f_string (c_string, length) result(f_string) Arguments Type Intent Optional Attributes Name character(kind=c_char,len=1), intent(in) :: c_string (length) integer(kind=c_int), intent(in) :: length Return Value character(len=length) pure function f_c_string (f_string) result(c_string) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: f_string Return Value character(kind=c_char,len=1)(len(f_string)) Subroutines subroutine inner_caf_error_stop_character (stop_code, length) bind(c, name = \"0\") Arguments Type Intent Optional Attributes Name character(kind=c_char,len=1), intent(in) :: stop_code (length) integer(kind=c_int), intent(in) :: length subroutine inner_caf_error_stop_integer (stop_code) bind(c, name = \"0\") Arguments Type Intent Optional Attributes Name integer, intent(in), optional :: stop_code pure subroutine prif_error_stop_character (stop_code) stop all images and provide the stop_code as the process exit status Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: stop_code pure subroutine prif_error_stop_integer (stop_code) stop all images and provide the stop_code, or 0 if not present, as the process exit status Arguments Type Intent Optional Attributes Name integer, intent(in), optional :: stop_code Module Procedures module procedure prif_error_stop pure module module subroutine prif_error_stop(quiet, stop_code_int, stop_code_char) Interface → Arguments Type Intent Optional Attributes Name logical(kind=c_bool), intent(in) :: quiet integer(kind=c_int), intent(in), optional :: stop_code_int character(len=*), intent(in), optional :: stop_code_char module procedure prif_fail_image module module subroutine prif_fail_image() Interface → Arguments None module procedure prif_stop module module subroutine prif_stop(quiet, stop_code_int, stop_code_char) Interface → Arguments Type Intent Optional Attributes Name logical(kind=c_bool), intent(in) :: quiet integer(kind=c_int), intent(in), optional :: stop_code_int character(len=*), intent(in), optional :: stop_code_char","tags":"","loc":"module/program_termination_s.html"},{"title":"coarray_queries_s – Caffeine","text":"Uses Ancestors: prif : prif_private_s module~~coarray_queries_s~~UsesGraph module~coarray_queries_s coarray_queries_s module~prif_private_s prif_private_s module~coarray_queries_s->module~prif_private_s module~prif prif module~prif_private_s->module~prif iso_c_binding iso_c_binding module~prif->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures prif_coshape prif_image_index prif_image_index_with_team prif_image_index_with_team_number prif_lcobound_no_dim prif_lcobound_with_dim prif_ucobound_no_dim prif_ucobound_with_dim Module Procedures module procedure prif_coshape module module subroutine prif_coshape(coarray_handle, sizes) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(out) :: sizes (:) module procedure prif_image_index module module subroutine prif_image_index(coarray_handle, sub, image_index) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_intmax_t), intent(in) :: sub (:) integer(kind=c_int), intent(out) :: image_index module procedure prif_image_index_with_team module module subroutine prif_image_index_with_team(coarray_handle, sub, team, image_index) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_intmax_t), intent(in) :: sub (:) type( prif_team_type ), intent(in) :: team integer(kind=c_int), intent(out) :: image_index module procedure prif_image_index_with_team_number module module subroutine prif_image_index_with_team_number(coarray_handle, sub, team_number, image_index) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_intmax_t), intent(in) :: sub (:) integer(kind=c_int), intent(in) :: team_number integer(kind=c_int), intent(out) :: image_index module procedure prif_lcobound_no_dim module module subroutine prif_lcobound_no_dim(coarray_handle, lcobounds) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_intmax_t), intent(out) :: lcobounds (:) module procedure prif_lcobound_with_dim module module subroutine prif_lcobound_with_dim(coarray_handle, dim, lcobound) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_int), intent(in) :: dim integer(kind=c_intmax_t), intent(out) :: lcobound module procedure prif_ucobound_no_dim module module subroutine prif_ucobound_no_dim(coarray_handle, ucobounds) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_intmax_t), intent(out) :: ucobounds (:) module procedure prif_ucobound_with_dim module module subroutine prif_ucobound_with_dim(coarray_handle, dim, ucobound) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_int), intent(in) :: dim integer(kind=c_intmax_t), intent(out) :: ucobound","tags":"","loc":"module/coarray_queries_s.html"},{"title":"atomic_s – Caffeine","text":"Uses Ancestors: prif : prif_private_s module~~atomic_s~~UsesGraph module~atomic_s atomic_s module~prif_private_s prif_private_s module~atomic_s->module~prif_private_s module~prif prif module~prif_private_s->module~prif iso_c_binding iso_c_binding module~prif->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures prif_atomic_add prif_atomic_add_indirect prif_atomic_and prif_atomic_and_indirect prif_atomic_cas_int prif_atomic_cas_int_indirect prif_atomic_cas_logical prif_atomic_cas_logical_indirect prif_atomic_define_int prif_atomic_define_int_indirect prif_atomic_define_logical prif_atomic_define_logical_indirect prif_atomic_fetch_add prif_atomic_fetch_add_indirect prif_atomic_fetch_and prif_atomic_fetch_and_indirect prif_atomic_fetch_or prif_atomic_fetch_or_indirect prif_atomic_fetch_xor prif_atomic_fetch_xor_indirect prif_atomic_or prif_atomic_or_indirect prif_atomic_ref_int prif_atomic_ref_int_indirect prif_atomic_ref_logical prif_atomic_ref_logical_indirect prif_atomic_xor prif_atomic_xor_indirect Module Procedures module procedure prif_atomic_add module module subroutine prif_atomic_add(image_num, coarray_handle, offset, value, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat module procedure prif_atomic_add_indirect module module subroutine prif_atomic_add_indirect(image_num, atom_remote_ptr, value, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat module procedure prif_atomic_and module module subroutine prif_atomic_and(image_num, coarray_handle, offset, value, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat module procedure prif_atomic_and_indirect module module subroutine prif_atomic_and_indirect(image_num, atom_remote_ptr, value, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat module procedure prif_atomic_cas_int module module subroutine prif_atomic_cas_int(image_num, coarray_handle, offset, old, compare, new, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=prif_atomic_int_kind), intent(out) :: old integer(kind=prif_atomic_int_kind), intent(in) :: compare integer(kind=prif_atomic_int_kind), intent(in) :: new integer(kind=c_int), intent(out), optional :: stat module procedure prif_atomic_cas_int_indirect module module subroutine prif_atomic_cas_int_indirect(image_num, atom_remote_ptr, old, compare, new, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=prif_atomic_int_kind), intent(out) :: old integer(kind=prif_atomic_int_kind), intent(in) :: compare integer(kind=prif_atomic_int_kind), intent(in) :: new integer(kind=c_int), intent(out), optional :: stat module procedure prif_atomic_cas_logical module module subroutine prif_atomic_cas_logical(image_num, coarray_handle, offset, old, compare, new, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset logical(kind=prif_atomic_logical_kind), intent(out) :: old logical(kind=prif_atomic_logical_kind), intent(in) :: compare logical(kind=prif_atomic_logical_kind), intent(in) :: new integer(kind=c_int), intent(out), optional :: stat module procedure prif_atomic_cas_logical_indirect module module subroutine prif_atomic_cas_logical_indirect(image_num, atom_remote_ptr, old, compare, new, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr logical(kind=prif_atomic_logical_kind), intent(out) :: old logical(kind=prif_atomic_logical_kind), intent(in) :: compare logical(kind=prif_atomic_logical_kind), intent(in) :: new integer(kind=c_int), intent(out), optional :: stat module procedure prif_atomic_define_int module module subroutine prif_atomic_define_int(image_num, coarray_handle, offset, value, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat module procedure prif_atomic_define_int_indirect module module subroutine prif_atomic_define_int_indirect(image_num, atom_remote_ptr, value, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat module procedure prif_atomic_define_logical module module subroutine prif_atomic_define_logical(image_num, coarray_handle, offset, value, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset logical(kind=prif_atomic_logical_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat module procedure prif_atomic_define_logical_indirect module module subroutine prif_atomic_define_logical_indirect(image_num, atom_remote_ptr, value, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr logical(kind=prif_atomic_logical_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat module procedure prif_atomic_fetch_add module module subroutine prif_atomic_fetch_add(image_num, coarray_handle, offset, value, old, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=prif_atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat module procedure prif_atomic_fetch_add_indirect module module subroutine prif_atomic_fetch_add_indirect(image_num, atom_remote_ptr, value, old, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=prif_atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat module procedure prif_atomic_fetch_and module module subroutine prif_atomic_fetch_and(image_num, coarray_handle, offset, value, old, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=prif_atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat module procedure prif_atomic_fetch_and_indirect module module subroutine prif_atomic_fetch_and_indirect(image_num, atom_remote_ptr, value, old, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=prif_atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat module procedure prif_atomic_fetch_or module module subroutine prif_atomic_fetch_or(image_num, coarray_handle, offset, value, old, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=prif_atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat module procedure prif_atomic_fetch_or_indirect module module subroutine prif_atomic_fetch_or_indirect(image_num, atom_remote_ptr, value, old, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=prif_atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat module procedure prif_atomic_fetch_xor module module subroutine prif_atomic_fetch_xor(image_num, coarray_handle, offset, value, old, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=prif_atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat module procedure prif_atomic_fetch_xor_indirect module module subroutine prif_atomic_fetch_xor_indirect(image_num, atom_remote_ptr, value, old, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=prif_atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat module procedure prif_atomic_or module module subroutine prif_atomic_or(image_num, coarray_handle, offset, value, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat module procedure prif_atomic_or_indirect module module subroutine prif_atomic_or_indirect(image_num, atom_remote_ptr, value, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat module procedure prif_atomic_ref_int module module subroutine prif_atomic_ref_int(image_num, coarray_handle, offset, value, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=prif_atomic_int_kind), intent(out) :: value integer(kind=c_int), intent(out), optional :: stat module procedure prif_atomic_ref_int_indirect module module subroutine prif_atomic_ref_int_indirect(image_num, atom_remote_ptr, value, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=prif_atomic_int_kind), intent(out) :: value integer(kind=c_int), intent(out), optional :: stat module procedure prif_atomic_ref_logical module module subroutine prif_atomic_ref_logical(image_num, coarray_handle, offset, value, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset logical(kind=prif_atomic_logical_kind), intent(out) :: value integer(kind=c_int), intent(out), optional :: stat module procedure prif_atomic_ref_logical_indirect module module subroutine prif_atomic_ref_logical_indirect(image_num, atom_remote_ptr, value, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr logical(kind=prif_atomic_logical_kind), intent(out) :: value integer(kind=c_int), intent(out), optional :: stat module procedure prif_atomic_xor module module subroutine prif_atomic_xor(image_num, coarray_handle, offset, value, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(in) :: offset integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat module procedure prif_atomic_xor_indirect module module subroutine prif_atomic_xor_indirect(image_num, atom_remote_ptr, value, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=prif_atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"module/atomic_s.html"},{"title":"prif_queries_s – Caffeine","text":"Uses Ancestors: prif : prif_private_s module~~prif_queries_s~~UsesGraph module~prif_queries_s prif_queries_s module~prif_private_s prif_private_s module~prif_queries_s->module~prif_private_s module~prif prif module~prif_private_s->module~prif iso_c_binding iso_c_binding module~prif->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures prif_get_context_data prif_set_context_data prif_size_bytes Module Procedures module procedure prif_get_context_data module module subroutine prif_get_context_data(coarray_handle, context_data) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle type(c_ptr), intent(out) :: context_data module procedure prif_set_context_data module module subroutine prif_set_context_data(coarray_handle, context_data) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle type(c_ptr), intent(in) :: context_data module procedure prif_size_bytes module module subroutine prif_size_bytes(coarray_handle, data_size) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(out) :: data_size","tags":"","loc":"module/prif_queries_s.html"},{"title":"teams_s – Caffeine","text":"Uses Ancestors: prif : prif_private_s module~~teams_s~~UsesGraph module~teams_s teams_s module~prif_private_s prif_private_s module~teams_s->module~prif_private_s module~prif prif module~prif_private_s->module~prif iso_c_binding iso_c_binding module~prif->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures prif_change_team prif_end_team prif_form_team prif_get_team prif_team_number Module Procedures module procedure prif_change_team module module subroutine prif_change_team(team, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in) :: team integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_end_team module module subroutine prif_end_team(stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_form_team module module subroutine prif_form_team(team_number, team, new_index, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_intmax_t), intent(in) :: team_number type( prif_team_type ), intent(out) :: team integer(kind=c_int), intent(in), optional :: new_index integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_get_team module module subroutine prif_get_team(level, team) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in), optional :: level type( prif_team_type ), intent(out) :: team module procedure prif_team_number module module subroutine prif_team_number(team, team_number) Interface → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in), optional :: team integer(kind=c_intmax_t), intent(out) :: team_number","tags":"","loc":"module/teams_s.html"},{"title":"co_max_s – Caffeine","text":"Uses iso_c_binding Ancestors: prif : prif_private_s module~~co_max_s~~UsesGraph module~co_max_s co_max_s iso_c_binding iso_c_binding module~co_max_s->iso_c_binding module~prif_private_s prif_private_s module~co_max_s->module~prif_private_s module~prif prif module~prif_private_s->module~prif module~prif->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures prif_co_max Module Procedures module procedure prif_co_max module module subroutine prif_co_max(a, result_image, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer(kind=c_int), intent(in), optional :: result_image integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"module/co_max_s.html"},{"title":"co_broadcast_s – Caffeine","text":"Uses Ancestors: prif : prif_private_s module~~co_broadcast_s~~UsesGraph module~co_broadcast_s co_broadcast_s module~prif_private_s prif_private_s module~co_broadcast_s->module~prif_private_s module~prif prif module~prif_private_s->module~prif iso_c_binding iso_c_binding module~prif->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures prif_co_broadcast Module Procedures module procedure prif_co_broadcast module module subroutine prif_co_broadcast(a, source_image, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer(kind=c_int), intent(in) :: source_image integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"module/co_broadcast_s.html"},{"title":"co_min_s – Caffeine","text":"Uses iso_c_binding Ancestors: prif : prif_private_s module~~co_min_s~~UsesGraph module~co_min_s co_min_s iso_c_binding iso_c_binding module~co_min_s->iso_c_binding module~prif_private_s prif_private_s module~co_min_s->module~prif_private_s module~prif prif module~prif_private_s->module~prif module~prif->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures prif_co_min Module Procedures module procedure prif_co_min module module subroutine prif_co_min(a, result_image, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer(kind=c_int), intent(in), optional :: result_image integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"module/co_min_s.html"},{"title":"co_reduce_s – Caffeine","text":"Uses iso_c_binding Ancestors: prif : prif_private_s module~~co_reduce_s~~UsesGraph module~co_reduce_s co_reduce_s iso_c_binding iso_c_binding module~co_reduce_s->iso_c_binding module~prif_private_s prif_private_s module~co_reduce_s->module~prif_private_s module~prif prif module~prif_private_s->module~prif module~prif->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables dummy Abstract Interfaces c_bool_operation c_char_operation c_double_complex_operation c_double_operation c_float_complex_operation c_float_operation c_int32_t_operation c_int64_t_operation Module Procedures prif_co_reduce Variables Type Visibility Attributes Name Initial character(kind=c_char,len=5), private, parameter :: dummy = \"     \" Abstract Interfaces abstract interface pure function c_bool_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name logical(kind=c_bool), intent(in) :: lhs logical(kind=c_bool), intent(in) :: rhs Return Value logical(kind=c_bool) abstract interface function c_char_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name character(kind=c_char,len=*), intent(in) :: lhs character(kind=c_char,len=*), intent(in) :: rhs Return Value character(kind=c_char,len=:),allocatable abstract interface pure function c_double_complex_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name complex(kind=c_double), intent(in) :: lhs complex(kind=c_double), intent(in) :: rhs Return Value complex(kind=c_double) abstract interface pure function c_double_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name real(kind=c_double), intent(in) :: lhs real(kind=c_double), intent(in) :: rhs Return Value real(kind=c_double) abstract interface pure function c_float_complex_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name complex(kind=c_float), intent(in) :: lhs complex(kind=c_float), intent(in) :: rhs Return Value complex(kind=c_float) abstract interface pure function c_float_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name real(kind=c_float), intent(in) :: lhs real(kind=c_float), intent(in) :: rhs Return Value real(kind=c_float) abstract interface pure function c_int32_t_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name integer(kind=c_int32_t), intent(in) :: lhs integer(kind=c_int32_t), intent(in) :: rhs Return Value integer(kind=c_int32_t) abstract interface pure function c_int64_t_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name integer(kind=c_int64_t), intent(in) :: lhs integer(kind=c_int64_t), intent(in) :: rhs Return Value integer(kind=c_int64_t) Module Procedures module procedure prif_co_reduce module module subroutine prif_co_reduce(a, operation, result_image, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) type(c_funptr), value :: operation integer(kind=c_int), intent(in), optional :: result_image integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"module/co_reduce_s.html"},{"title":"co_sum_s – Caffeine","text":"Uses Ancestors: prif : prif_private_s module~~co_sum_s~~UsesGraph module~co_sum_s co_sum_s module~prif_private_s prif_private_s module~co_sum_s->module~prif_private_s module~prif prif module~prif_private_s->module~prif iso_c_binding iso_c_binding module~prif->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures prif_co_sum Module Procedures module procedure prif_co_sum module module subroutine prif_co_sum(a, result_image, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer(kind=c_int), intent(in), optional :: result_image integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"module/co_sum_s.html"},{"title":"prif.f90 – Caffeine","text":"Files dependent on this one sourcefile~~prif.f90~~AfferentGraph sourcefile~prif.f90 prif.f90 sourcefile~prif_private_s.f90 prif_private_s.f90 sourcefile~prif_private_s.f90->sourcefile~prif.f90 sourcefile~events_s.f90 events_s.f90 sourcefile~events_s.f90->sourcefile~prif_private_s.f90 sourcefile~prif_queries_s.f90 prif_queries_s.f90 sourcefile~prif_queries_s.f90->sourcefile~prif_private_s.f90 sourcefile~critical_s.f90 critical_s.f90 sourcefile~critical_s.f90->sourcefile~prif_private_s.f90 sourcefile~co_broadcast_s.f90 co_broadcast_s.f90 sourcefile~co_broadcast_s.f90->sourcefile~prif_private_s.f90 sourcefile~program_startup_s.f90 program_startup_s.F90 sourcefile~program_startup_s.f90->sourcefile~prif_private_s.f90 sourcefile~coarray_access_s.f90 coarray_access_s.f90 sourcefile~coarray_access_s.f90->sourcefile~prif_private_s.f90 sourcefile~coarray_queries_s.f90 coarray_queries_s.f90 sourcefile~coarray_queries_s.f90->sourcefile~prif_private_s.f90 sourcefile~co_sum_s.f90 co_sum_s.f90 sourcefile~co_sum_s.f90->sourcefile~prif_private_s.f90 sourcefile~allocation_s.f90 allocation_s.f90 sourcefile~allocation_s.f90->sourcefile~prif_private_s.f90 sourcefile~notify_s.f90 notify_s.f90 sourcefile~notify_s.f90->sourcefile~prif_private_s.f90 sourcefile~teams_s.f90 teams_s.f90 sourcefile~teams_s.f90->sourcefile~prif_private_s.f90 sourcefile~locks_s.f90 locks_s.f90 sourcefile~locks_s.f90->sourcefile~prif_private_s.f90 sourcefile~caffeine_assert_s.f90 caffeine_assert_s.F90 sourcefile~caffeine_assert_s.f90->sourcefile~prif_private_s.f90 sourcefile~co_min_s.f90 co_min_s.f90 sourcefile~co_min_s.f90->sourcefile~prif_private_s.f90 sourcefile~image_queries_s.f90 image_queries_s.f90 sourcefile~image_queries_s.f90->sourcefile~prif_private_s.f90 sourcefile~atomic_s.f90 atomic_s.f90 sourcefile~atomic_s.f90->sourcefile~prif_private_s.f90 sourcefile~alias_s.f90 alias_s.f90 sourcefile~alias_s.f90->sourcefile~prif_private_s.f90 sourcefile~synchronization_s.f90 synchronization_s.f90 sourcefile~synchronization_s.f90->sourcefile~prif_private_s.f90 sourcefile~co_max_s.f90 co_max_s.f90 sourcefile~co_max_s.f90->sourcefile~prif_private_s.f90 sourcefile~program_termination_s.f90 program_termination_s.f90 sourcefile~program_termination_s.f90->sourcefile~prif_private_s.f90 sourcefile~co_reduce_s.f90 co_reduce_s.f90 sourcefile~co_reduce_s.f90->sourcefile~prif_private_s.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules prif Source Code prif.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt module prif use iso_c_binding , only : c_int , c_bool , c_intptr_t , c_intmax_t , c_ptr , c_funptr , c_size_t , c_ptrdiff_t implicit none private public :: prif_init public :: prif_stop , prif_error_stop , prif_fail_image public :: prif_allocate_coarray , prif_allocate , prif_deallocate_coarray , prif_deallocate public :: prif_put , prif_put_indirect , prif_get , prif_get_indirect , prif_put_with_notify , prif_put_with_notify_indirect public :: prif_put_indirect_with_notify , prif_put_indirect_with_notify_indirect public :: prif_get_strided , prif_get_strided_indirect , prif_put_strided , prif_put_strided_indirect public :: prif_put_strided_with_notify , prif_put_strided_with_notify_indirect public :: prif_put_strided_indirect_with_notify , prif_put_strided_indirect_with_notify_indirect public :: prif_alias_create , prif_alias_destroy public :: prif_lcobound_with_dim , prif_lcobound_no_dim , prif_ucobound_with_dim , prif_ucobound_no_dim , prif_coshape public :: prif_image_index , prif_image_index_with_team , prif_image_index_with_team_number public :: prif_this_image_no_coarray , prif_this_image_with_coarray , prif_this_image_with_dim public :: prif_num_images , prif_num_images_with_team , prif_num_images_with_team_number public :: prif_failed_images , prif_stopped_images , prif_image_status public :: prif_set_context_data , prif_get_context_data , prif_size_bytes public :: prif_co_sum , prif_co_max , prif_co_min , prif_co_reduce , prif_co_broadcast public :: prif_form_team , prif_change_team , prif_end_team , prif_get_team , prif_team_number public :: prif_sync_all , prif_sync_images , prif_sync_team , prif_sync_memory public :: prif_lock , prif_lock_indirect , prif_unlock , prif_unlock_indirect public :: prif_critical , prif_end_critical public :: prif_event_post , prif_event_post_indirect , prif_event_wait , prif_event_query public :: prif_notify_wait public :: prif_atomic_add , prif_atomic_add_indirect , prif_atomic_and , prif_atomic_and_indirect public :: prif_atomic_or , prif_atomic_or_indirect , prif_atomic_xor , prif_atomic_xor_indirect public :: prif_atomic_cas_int , prif_atomic_cas_int_indirect , prif_atomic_cas_logical , prif_atomic_cas_logical_indirect public :: prif_atomic_fetch_add , prif_atomic_fetch_add_indirect public :: prif_atomic_fetch_and , prif_atomic_fetch_and_indirect , prif_atomic_fetch_or , prif_atomic_fetch_or_indirect public :: prif_atomic_fetch_xor , prif_atomic_fetch_xor_indirect public :: prif_atomic_define_int , prif_atomic_define_int_indirect , prif_atomic_define_logical , prif_atomic_define_logical_indirect public :: prif_atomic_ref_int , prif_atomic_ref_int_indirect , prif_atomic_ref_logical , prif_atomic_ref_logical_indirect integer ( c_int ), parameter , public :: PRIF_VERSION_MAJOR = 0 integer ( c_int ), parameter , public :: PRIF_VERSION_MINOR = 4 integer ( c_int ), parameter , public :: PRIF_ATOMIC_INT_KIND = selected_int_kind ( 18 ) ! gfortran-14 doesn't currently support the intrinsic selected_logical_kind ! The following commented-out definition is the desired definition and should replace ! the temporary definition when possible ! integer(c_int), parameter, public :: PRIF_ATOMIC_LOGICAL_KIND = selected_logical_kind(32) integer ( c_int ), parameter , public :: PRIF_ATOMIC_LOGICAL_KIND = PRIF_ATOMIC_INT_KIND integer ( c_int ), parameter , public :: & PRIF_CURRENT_TEAM = 101 , & PRIF_INITIAL_TEAM = 102 , & PRIF_PARENT_TEAM = 103 , & PRIF_STAT_FAILED_IMAGE = 201 , & PRIF_STAT_LOCKED = 202 , & PRIF_STAT_LOCKED_OTHER_IMAGE = 203 , & PRIF_STAT_STOPPED_IMAGE = 204 , & PRIF_STAT_UNLOCKED = 205 , & PRIF_STAT_UNLOCKED_FAILED_IMAGE = 206 , & PRIF_STAT_OUT_OF_MEMORY = 301 , & PRIF_STAT_ALREADY_INIT = 302 type , public :: prif_event_type private ! TODO: actual implementation integer :: unimplemented_feature_placeholder = 0 end type type , public :: prif_lock_type private ! TODO: actual implementation integer :: unimplemented_feature_placeholder = 0 end type type , public :: prif_critical_type private ! TODO: actual implementation integer :: unimplemented_feature_placeholder = 0 end type type , public :: prif_notify_type private ! TODO: actual implementation integer :: unimplemented_feature_placeholder = 0 end type type , public :: prif_coarray_handle private type ( handle_data ), pointer :: info end type type , public :: prif_team_type private type ( team_data ), pointer :: info => null () end type interface module subroutine prif_init ( stat ) implicit none integer ( c_int ), intent ( out ) :: stat end subroutine module subroutine prif_stop ( quiet , stop_code_int , stop_code_char ) implicit none logical ( c_bool ), intent ( in ) :: quiet integer ( c_int ), intent ( in ), optional :: stop_code_int character ( len =* ), intent ( in ), optional :: stop_code_char end subroutine module pure subroutine prif_error_stop ( quiet , stop_code_int , stop_code_char ) implicit none logical ( c_bool ), intent ( in ) :: quiet integer ( c_int ), intent ( in ), optional :: stop_code_int character ( len =* ), intent ( in ), optional :: stop_code_char end subroutine module subroutine prif_fail_image () implicit none end subroutine module subroutine prif_allocate_coarray ( & lcobounds , ucobounds , lbounds , ubounds , element_size , final_func , coarray_handle , & allocated_memory , stat , errmsg , errmsg_alloc ) implicit none integer ( c_intmax_t ), dimension (:), intent ( in ) :: lcobounds , ucobounds integer ( c_intmax_t ), dimension (:), intent ( in ) :: lbounds , ubounds integer ( c_size_t ), intent ( in ) :: element_size type ( c_funptr ), intent ( in ) :: final_func type ( prif_coarray_handle ), intent ( out ) :: coarray_handle type ( c_ptr ), intent ( out ) :: allocated_memory integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_allocate ( size_in_bytes , allocated_memory , stat , errmsg , errmsg_alloc ) implicit none integer ( c_size_t ) :: size_in_bytes type ( c_ptr ), intent ( out ) :: allocated_memory integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_deallocate_coarray ( coarray_handles , stat , errmsg , errmsg_alloc ) implicit none type ( prif_coarray_handle ), intent ( in ) :: coarray_handles (:) integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_deallocate ( mem , stat , errmsg , errmsg_alloc ) implicit none type ( c_ptr ), intent ( in ) :: mem integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_put ( & image_num , coarray_handle , offset , current_image_buffer , size_in_bytes , stat , errmsg , errmsg_alloc ) implicit none integer ( c_int ), intent ( in ) :: image_num type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( c_size_t ), intent ( in ) :: offset type ( c_ptr ), intent ( in ) :: current_image_buffer integer ( c_size_t ), intent ( in ) :: size_in_bytes integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_put_indirect ( & image_num , remote_ptr , current_image_buffer , size_in_bytes , stat , errmsg , errmsg_alloc ) implicit none integer ( c_int ), intent ( in ) :: image_num integer ( c_intptr_t ), intent ( in ) :: remote_ptr type ( c_ptr ), intent ( in ) :: current_image_buffer integer ( c_size_t ), intent ( in ) :: size_in_bytes integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_put_with_notify ( & image_num , coarray_handle , offset , current_image_buffer , size_in_bytes , & notify_coarray_handle , notify_offset , stat , errmsg , errmsg_alloc ) implicit none integer ( c_int ), intent ( in ) :: image_num type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( c_size_t ), intent ( in ) :: offset type ( c_ptr ), intent ( in ) :: current_image_buffer integer ( c_size_t ), intent ( in ) :: size_in_bytes type ( prif_coarray_handle ), intent ( in ) :: notify_coarray_handle integer ( c_size_t ), intent ( in ) :: notify_offset integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_put_with_notify_indirect ( & image_num , coarray_handle , offset , current_image_buffer , size_in_bytes , notify_ptr , stat , errmsg , errmsg_alloc ) implicit none integer ( c_int ), intent ( in ) :: image_num type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( c_size_t ), intent ( in ) :: offset type ( c_ptr ), intent ( in ) :: current_image_buffer integer ( c_size_t ), intent ( in ) :: size_in_bytes integer ( c_intptr_t ), intent ( in ) :: notify_ptr integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_put_indirect_with_notify ( & image_num , remote_ptr , current_image_buffer , size_in_bytes , notify_coarray_handle , notify_offset , & stat , errmsg , errmsg_alloc ) implicit none integer ( c_int ), intent ( in ) :: image_num integer ( c_intptr_t ), intent ( in ) :: remote_ptr type ( c_ptr ), intent ( in ) :: current_image_buffer integer ( c_size_t ), intent ( in ) :: size_in_bytes type ( prif_coarray_handle ), intent ( in ) :: notify_coarray_handle integer ( c_size_t ), intent ( in ) :: notify_offset integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_put_indirect_with_notify_indirect ( & image_num , remote_ptr , current_image_buffer , size_in_bytes , notify_ptr , stat , errmsg , errmsg_alloc ) implicit none integer ( c_int ), intent ( in ) :: image_num integer ( c_intptr_t ), intent ( in ) :: remote_ptr type ( c_ptr ), intent ( in ) :: current_image_buffer integer ( c_size_t ), intent ( in ) :: size_in_bytes integer ( c_intptr_t ), intent ( in ) :: notify_ptr integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_get ( & image_num , coarray_handle , offset , current_image_buffer , size_in_bytes , stat , errmsg , errmsg_alloc ) implicit none integer ( c_int ), intent ( in ) :: image_num type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( c_size_t ), intent ( in ) :: offset type ( c_ptr ), intent ( in ) :: current_image_buffer integer ( c_size_t ), intent ( in ) :: size_in_bytes integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_get_indirect ( image_num , remote_ptr , current_image_buffer , size_in_bytes , stat , errmsg , errmsg_alloc ) implicit none integer ( c_int ), intent ( in ) :: image_num integer ( c_intptr_t ), intent ( in ) :: remote_ptr type ( c_ptr ), intent ( in ) :: current_image_buffer integer ( c_size_t ), intent ( in ) :: size_in_bytes integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_get_strided ( & image_num , coarray_handle , offset , remote_stride , current_image_buffer , current_image_stride , & element_size , extent , stat , errmsg , errmsg_alloc ) implicit none integer ( c_int ), intent ( in ) :: image_num type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( c_size_t ), intent ( in ) :: offset integer ( c_ptrdiff_t ), intent ( in ) :: remote_stride (:) type ( c_ptr ), intent ( in ) :: current_image_buffer integer ( c_ptrdiff_t ), intent ( in ) :: current_image_stride (:) integer ( c_size_t ), intent ( in ) :: element_size integer ( c_size_t ), intent ( in ) :: extent (:) integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_get_strided_indirect ( & image_num , remote_ptr , remote_stride , current_image_buffer , current_image_stride , element_size , extent , & stat , errmsg , errmsg_alloc ) implicit none integer ( c_int ), intent ( in ) :: image_num integer ( c_intptr_t ), intent ( in ) :: remote_ptr integer ( c_ptrdiff_t ), intent ( in ) :: remote_stride (:) type ( c_ptr ), intent ( in ) :: current_image_buffer integer ( c_ptrdiff_t ), intent ( in ) :: current_image_stride (:) integer ( c_size_t ), intent ( in ) :: element_size integer ( c_size_t ), intent ( in ) :: extent (:) integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_put_strided ( & image_num , coarray_handle , offset , remote_stride , current_image_buffer , current_image_stride , element_size , & extent , stat , errmsg , errmsg_alloc ) implicit none integer ( c_int ), intent ( in ) :: image_num type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( c_size_t ), intent ( in ) :: offset integer ( c_ptrdiff_t ), intent ( in ) :: remote_stride (:) type ( c_ptr ), intent ( in ) :: current_image_buffer integer ( c_ptrdiff_t ), intent ( in ) :: current_image_stride (:) integer ( c_size_t ), intent ( in ) :: element_size integer ( c_size_t ), intent ( in ) :: extent (:) integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_put_strided_indirect ( & image_num , remote_ptr , remote_stride , current_image_buffer , current_image_stride , element_size , extent , & stat , errmsg , errmsg_alloc ) implicit none integer ( c_int ), intent ( in ) :: image_num integer ( c_intptr_t ), intent ( in ) :: remote_ptr integer ( c_ptrdiff_t ), intent ( in ) :: remote_stride (:) type ( c_ptr ), intent ( in ) :: current_image_buffer integer ( c_ptrdiff_t ), intent ( in ) :: current_image_stride (:) integer ( c_size_t ), intent ( in ) :: element_size integer ( c_size_t ), intent ( in ) :: extent (:) integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_put_strided_with_notify ( & image_num , coarray_handle , offset , remote_stride , current_image_buffer , current_image_stride , element_size , & extent , notify_coarray_handle , notify_offset , stat , errmsg , errmsg_alloc ) implicit none integer ( c_int ), intent ( in ) :: image_num type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( c_size_t ), intent ( in ) :: offset integer ( c_ptrdiff_t ), intent ( in ) :: remote_stride (:) type ( c_ptr ), intent ( in ) :: current_image_buffer integer ( c_ptrdiff_t ), intent ( in ) :: current_image_stride (:) integer ( c_size_t ), intent ( in ) :: element_size integer ( c_size_t ), intent ( in ) :: extent (:) type ( prif_coarray_handle ), intent ( in ) :: notify_coarray_handle integer ( c_size_t ), intent ( in ) :: notify_offset integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_put_strided_with_notify_indirect ( & image_num , coarray_handle , offset , remote_stride , current_image_buffer , current_image_stride , element_size , & extent , notify_ptr , stat , errmsg , errmsg_alloc ) implicit none integer ( c_int ), intent ( in ) :: image_num type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( c_size_t ), intent ( in ) :: offset integer ( c_ptrdiff_t ), intent ( in ) :: remote_stride (:) type ( c_ptr ), intent ( in ) :: current_image_buffer integer ( c_ptrdiff_t ), intent ( in ) :: current_image_stride (:) integer ( c_size_t ), intent ( in ) :: element_size integer ( c_size_t ), intent ( in ) :: extent (:) integer ( c_intptr_t ), intent ( in ) :: notify_ptr integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_put_strided_indirect_with_notify ( & image_num , remote_ptr , remote_stride , current_image_buffer , current_image_stride , element_size , extent , & notify_coarray_handle , notify_offset , stat , errmsg , errmsg_alloc ) implicit none integer ( c_int ), intent ( in ) :: image_num integer ( c_intptr_t ), intent ( in ) :: remote_ptr integer ( c_ptrdiff_t ), intent ( in ) :: remote_stride (:) type ( c_ptr ), intent ( in ) :: current_image_buffer integer ( c_ptrdiff_t ), intent ( in ) :: current_image_stride (:) integer ( c_size_t ), intent ( in ) :: element_size integer ( c_size_t ), intent ( in ) :: extent (:) type ( prif_coarray_handle ), intent ( in ) :: notify_coarray_handle integer ( c_size_t ), intent ( in ) :: notify_offset integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_put_strided_indirect_with_notify_indirect ( & image_num , remote_ptr , remote_stride , current_image_buffer , current_image_stride , element_size , extent , & notify_ptr , stat , errmsg , errmsg_alloc ) implicit none integer ( c_int ), intent ( in ) :: image_num integer ( c_intptr_t ), intent ( in ) :: remote_ptr integer ( c_ptrdiff_t ), intent ( in ) :: remote_stride (:) type ( c_ptr ), intent ( in ) :: current_image_buffer integer ( c_ptrdiff_t ), intent ( in ) :: current_image_stride (:) integer ( c_size_t ), intent ( in ) :: element_size integer ( c_size_t ), intent ( in ) :: extent (:) integer ( c_intptr_t ), intent ( in ) :: notify_ptr integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_alias_create ( source_handle , alias_lcobounds , alias_ucobounds , alias_handle ) implicit none type ( prif_coarray_handle ), intent ( in ) :: source_handle integer ( c_intmax_t ), intent ( in ) :: alias_lcobounds (:) integer ( c_intmax_t ), intent ( in ) :: alias_ucobounds (:) type ( prif_coarray_handle ), intent ( out ) :: alias_handle end subroutine module subroutine prif_alias_destroy ( alias_handle ) implicit none type ( prif_coarray_handle ), intent ( in ) :: alias_handle end subroutine module subroutine prif_lcobound_with_dim ( coarray_handle , dim , lcobound ) implicit none type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( c_int ), intent ( in ) :: dim integer ( c_intmax_t ), intent ( out ) :: lcobound end subroutine module subroutine prif_lcobound_no_dim ( coarray_handle , lcobounds ) implicit none type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( c_intmax_t ), intent ( out ) :: lcobounds (:) end subroutine module subroutine prif_ucobound_with_dim ( coarray_handle , dim , ucobound ) implicit none type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( c_int ), intent ( in ) :: dim integer ( c_intmax_t ), intent ( out ) :: ucobound end subroutine module subroutine prif_ucobound_no_dim ( coarray_handle , ucobounds ) implicit none type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( c_intmax_t ), intent ( out ) :: ucobounds (:) end subroutine module subroutine prif_coshape ( coarray_handle , sizes ) implicit none type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( c_size_t ), intent ( out ) :: sizes (:) end subroutine module subroutine prif_image_index ( coarray_handle , sub , image_index ) implicit none type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( c_intmax_t ), intent ( in ) :: sub (:) integer ( c_int ), intent ( out ) :: image_index end subroutine module subroutine prif_image_index_with_team ( coarray_handle , sub , team , image_index ) implicit none type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( c_intmax_t ), intent ( in ) :: sub (:) type ( prif_team_type ), intent ( in ) :: team integer ( c_int ), intent ( out ) :: image_index end subroutine module subroutine prif_image_index_with_team_number ( coarray_handle , sub , team_number , image_index ) implicit none type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( c_intmax_t ), intent ( in ) :: sub (:) integer ( c_int ), intent ( in ) :: team_number integer ( c_int ), intent ( out ) :: image_index end subroutine module subroutine prif_num_images ( num_images ) implicit none integer ( c_int ), intent ( out ) :: num_images end subroutine module subroutine prif_num_images_with_team ( team , num_images ) implicit none type ( prif_team_type ), intent ( in ) :: team integer ( c_int ), intent ( out ) :: num_images end subroutine module subroutine prif_num_images_with_team_number ( team_number , num_images ) implicit none integer ( c_intmax_t ), intent ( in ) :: team_number integer ( c_int ), intent ( out ) :: num_images end subroutine module subroutine prif_this_image_no_coarray ( team , this_image ) implicit none type ( prif_team_type ), intent ( in ), optional :: team integer ( c_int ), intent ( out ) :: this_image end subroutine module subroutine prif_this_image_with_coarray ( coarray_handle , team , cosubscripts ) implicit none type ( prif_coarray_handle ), intent ( in ) :: coarray_handle type ( prif_team_type ), intent ( in ), optional :: team integer ( c_intmax_t ), intent ( out ) :: cosubscripts (:) end subroutine module subroutine prif_this_image_with_dim ( coarray_handle , dim , team , cosubscript ) implicit none type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( c_int ), intent ( in ) :: dim type ( prif_team_type ), intent ( in ), optional :: team integer ( c_intmax_t ), intent ( out ) :: cosubscript end subroutine module subroutine prif_failed_images ( team , failed_images ) implicit none type ( prif_team_type ), intent ( in ), optional :: team integer ( c_int ), allocatable , intent ( out ) :: failed_images (:) end subroutine module subroutine prif_stopped_images ( team , stopped_images ) implicit none type ( prif_team_type ), intent ( in ), optional :: team integer ( c_int ), allocatable , intent ( out ) :: stopped_images (:) end subroutine module impure elemental subroutine prif_image_status ( image , team , image_status ) implicit none integer ( c_int ), intent ( in ) :: image type ( prif_team_type ), intent ( in ), optional :: team integer ( c_int ), intent ( out ) :: image_status end subroutine module subroutine prif_set_context_data ( coarray_handle , context_data ) implicit none type ( prif_coarray_handle ), intent ( in ) :: coarray_handle type ( c_ptr ), intent ( in ) :: context_data end subroutine module subroutine prif_get_context_data ( coarray_handle , context_data ) implicit none type ( prif_coarray_handle ), intent ( in ) :: coarray_handle type ( c_ptr ), intent ( out ) :: context_data end subroutine module subroutine prif_size_bytes ( coarray_handle , data_size ) implicit none type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( c_size_t ), intent ( out ) :: data_size end subroutine module subroutine prif_co_sum ( a , result_image , stat , errmsg , errmsg_alloc ) implicit none type ( * ), intent ( inout ), contiguous , target :: a (..) integer ( c_int ), intent ( in ), optional :: result_image integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_co_max ( a , result_image , stat , errmsg , errmsg_alloc ) implicit none type ( * ), intent ( inout ), contiguous , target :: a (..) integer ( c_int ), intent ( in ), optional :: result_image integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_co_min ( a , result_image , stat , errmsg , errmsg_alloc ) implicit none type ( * ), intent ( inout ), contiguous , target :: a (..) integer ( c_int ), intent ( in ), optional :: result_image integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_co_reduce ( a , operation , result_image , stat , errmsg , errmsg_alloc ) implicit none type ( * ), intent ( inout ), contiguous , target :: a (..) type ( c_funptr ), value :: operation integer ( c_int ), intent ( in ), optional :: result_image integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_co_broadcast ( a , source_image , stat , errmsg , errmsg_alloc ) implicit none type ( * ), intent ( inout ), contiguous , target :: a (..) integer ( c_int ), intent ( in ) :: source_image integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_form_team ( team_number , team , new_index , stat , errmsg , errmsg_alloc ) implicit none integer ( c_intmax_t ), intent ( in ) :: team_number type ( prif_team_type ), intent ( out ) :: team integer ( c_int ), intent ( in ), optional :: new_index integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_change_team ( team , stat , errmsg , errmsg_alloc ) implicit none type ( prif_team_type ), intent ( in ) :: team integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_end_team ( stat , errmsg , errmsg_alloc ) implicit none integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_get_team ( level , team ) implicit none integer ( c_int ), intent ( in ), optional :: level type ( prif_team_type ), intent ( out ) :: team end subroutine module subroutine prif_team_number ( team , team_number ) implicit none type ( prif_team_type ), intent ( in ), optional :: team integer ( c_intmax_t ), intent ( out ) :: team_number end subroutine module subroutine prif_sync_all ( stat , errmsg , errmsg_alloc ) implicit none integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_sync_images ( image_set , stat , errmsg , errmsg_alloc ) implicit none integer ( c_int ), intent ( in ), optional :: image_set (:) integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_sync_team ( team , stat , errmsg , errmsg_alloc ) implicit none type ( prif_team_type ), intent ( in ) :: team integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_sync_memory ( stat , errmsg , errmsg_alloc ) implicit none integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_lock ( image_num , coarray_handle , offset , acquired_lock , stat , errmsg , errmsg_alloc ) implicit none integer ( c_int ), intent ( in ) :: image_num type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( c_size_t ), intent ( in ) :: offset logical ( c_bool ), intent ( out ), optional :: acquired_lock integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_lock_indirect ( image_num , lock_var_ptr , acquired_lock , stat , errmsg , errmsg_alloc ) implicit none integer ( c_int ), intent ( in ) :: image_num integer ( c_intptr_t ), intent ( in ) :: lock_var_ptr logical ( c_bool ), intent ( out ), optional :: acquired_lock integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_unlock ( image_num , coarray_handle , offset , stat , errmsg , errmsg_alloc ) implicit none integer ( c_int ), intent ( in ) :: image_num type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( c_size_t ), intent ( in ) :: offset integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_unlock_indirect ( image_num , lock_var_ptr , stat , errmsg , errmsg_alloc ) implicit none integer ( c_int ), intent ( in ) :: image_num integer ( c_intptr_t ), intent ( in ) :: lock_var_ptr integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_critical ( critical_coarray , stat , errmsg , errmsg_alloc ) implicit none type ( prif_coarray_handle ), intent ( in ) :: critical_coarray integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_end_critical ( critical_coarray ) implicit none type ( prif_coarray_handle ), intent ( in ) :: critical_coarray end subroutine module subroutine prif_event_post ( image_num , coarray_handle , offset , stat , errmsg , errmsg_alloc ) implicit none integer ( c_int ), intent ( in ) :: image_num type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( c_size_t ), intent ( in ) :: offset integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_event_post_indirect ( image_num , event_var_ptr , stat , errmsg , errmsg_alloc ) implicit none integer ( c_int ), intent ( in ) :: image_num integer ( c_intptr_t ), intent ( in ) :: event_var_ptr integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_event_wait ( event_var_ptr , until_count , stat , errmsg , errmsg_alloc ) implicit none type ( c_ptr ), intent ( in ) :: event_var_ptr integer ( c_intmax_t ), intent ( in ), optional :: until_count integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_event_query ( event_var_ptr , count , stat ) implicit none type ( c_ptr ), intent ( in ) :: event_var_ptr integer ( c_intmax_t ), intent ( out ) :: count integer ( c_int ), intent ( out ), optional :: stat end subroutine module subroutine prif_notify_wait ( notify_var_ptr , until_count , stat , errmsg , errmsg_alloc ) implicit none type ( c_ptr ), intent ( in ) :: notify_var_ptr integer ( c_intmax_t ), intent ( in ), optional :: until_count integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_atomic_add ( image_num , coarray_handle , offset , value , stat ) implicit none integer ( c_int ), intent ( in ) :: image_num type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( c_size_t ), intent ( in ) :: offset integer ( PRIF_ATOMIC_INT_KIND ), intent ( in ) :: value integer ( c_int ), intent ( out ), optional :: stat end subroutine module subroutine prif_atomic_add_indirect ( image_num , atom_remote_ptr , value , stat ) implicit none integer ( c_int ), intent ( in ) :: image_num integer ( c_intptr_t ), intent ( in ) :: atom_remote_ptr integer ( PRIF_ATOMIC_INT_KIND ), intent ( in ) :: value integer ( c_int ), intent ( out ), optional :: stat end subroutine module subroutine prif_atomic_and ( image_num , coarray_handle , offset , value , stat ) implicit none integer ( c_int ), intent ( in ) :: image_num type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( c_size_t ), intent ( in ) :: offset integer ( PRIF_ATOMIC_INT_KIND ), intent ( in ) :: value integer ( c_int ), intent ( out ), optional :: stat end subroutine module subroutine prif_atomic_and_indirect ( image_num , atom_remote_ptr , value , stat ) implicit none integer ( c_int ), intent ( in ) :: image_num integer ( c_intptr_t ), intent ( in ) :: atom_remote_ptr integer ( PRIF_ATOMIC_INT_KIND ), intent ( in ) :: value integer ( c_int ), intent ( out ), optional :: stat end subroutine module subroutine prif_atomic_or ( image_num , coarray_handle , offset , value , stat ) implicit none integer ( c_int ), intent ( in ) :: image_num type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( c_size_t ), intent ( in ) :: offset integer ( PRIF_ATOMIC_INT_KIND ), intent ( in ) :: value integer ( c_int ), intent ( out ), optional :: stat end subroutine module subroutine prif_atomic_or_indirect ( image_num , atom_remote_ptr , value , stat ) implicit none integer ( c_int ), intent ( in ) :: image_num integer ( c_intptr_t ), intent ( in ) :: atom_remote_ptr integer ( PRIF_ATOMIC_INT_KIND ), intent ( in ) :: value integer ( c_int ), intent ( out ), optional :: stat end subroutine module subroutine prif_atomic_xor ( image_num , coarray_handle , offset , value , stat ) implicit none integer ( c_int ), intent ( in ) :: image_num type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( c_size_t ), intent ( in ) :: offset integer ( PRIF_ATOMIC_INT_KIND ), intent ( in ) :: value integer ( c_int ), intent ( out ), optional :: stat end subroutine module subroutine prif_atomic_xor_indirect ( image_num , atom_remote_ptr , value , stat ) implicit none integer ( c_int ), intent ( in ) :: image_num integer ( c_intptr_t ), intent ( in ) :: atom_remote_ptr integer ( PRIF_ATOMIC_INT_KIND ), intent ( in ) :: value integer ( c_int ), intent ( out ), optional :: stat end subroutine module subroutine prif_atomic_cas_int ( image_num , coarray_handle , offset , old , compare , new , stat ) implicit none integer ( c_int ), intent ( in ) :: image_num type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( c_size_t ), intent ( in ) :: offset integer ( PRIF_ATOMIC_INT_KIND ), intent ( out ) :: old integer ( PRIF_ATOMIC_INT_KIND ), intent ( in ) :: compare integer ( PRIF_ATOMIC_INT_KIND ), intent ( in ) :: new integer ( c_int ), intent ( out ), optional :: stat end subroutine module subroutine prif_atomic_cas_int_indirect ( image_num , atom_remote_ptr , old , compare , new , stat ) implicit none integer ( c_int ), intent ( in ) :: image_num integer ( c_intptr_t ), intent ( in ) :: atom_remote_ptr integer ( PRIF_ATOMIC_INT_KIND ), intent ( out ) :: old integer ( PRIF_ATOMIC_INT_KIND ), intent ( in ) :: compare integer ( PRIF_ATOMIC_INT_KIND ), intent ( in ) :: new integer ( c_int ), intent ( out ), optional :: stat end subroutine module subroutine prif_atomic_cas_logical ( image_num , coarray_handle , offset , old , compare , new , stat ) implicit none integer ( c_int ), intent ( in ) :: image_num type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( c_size_t ), intent ( in ) :: offset logical ( PRIF_ATOMIC_LOGICAL_KIND ), intent ( out ) :: old logical ( PRIF_ATOMIC_LOGICAL_KIND ), intent ( in ) :: compare logical ( PRIF_ATOMIC_LOGICAL_KIND ), intent ( in ) :: new integer ( c_int ), intent ( out ), optional :: stat end subroutine module subroutine prif_atomic_cas_logical_indirect ( image_num , atom_remote_ptr , old , compare , new , stat ) implicit none integer ( c_int ), intent ( in ) :: image_num integer ( c_intptr_t ), intent ( in ) :: atom_remote_ptr logical ( PRIF_ATOMIC_LOGICAL_KIND ), intent ( out ) :: old logical ( PRIF_ATOMIC_LOGICAL_KIND ), intent ( in ) :: compare logical ( PRIF_ATOMIC_LOGICAL_KIND ), intent ( in ) :: new integer ( c_int ), intent ( out ), optional :: stat end subroutine module subroutine prif_atomic_fetch_add ( image_num , coarray_handle , offset , value , old , stat ) implicit none integer ( c_int ), intent ( in ) :: image_num type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( c_size_t ), intent ( in ) :: offset integer ( PRIF_ATOMIC_INT_KIND ), intent ( in ) :: value integer ( PRIF_ATOMIC_INT_KIND ), intent ( out ) :: old integer ( c_int ), intent ( out ), optional :: stat end subroutine module subroutine prif_atomic_fetch_add_indirect ( image_num , atom_remote_ptr , value , old , stat ) implicit none integer ( c_int ), intent ( in ) :: image_num integer ( c_intptr_t ), intent ( in ) :: atom_remote_ptr integer ( PRIF_ATOMIC_INT_KIND ), intent ( in ) :: value integer ( PRIF_ATOMIC_INT_KIND ), intent ( out ) :: old integer ( c_int ), intent ( out ), optional :: stat end subroutine module subroutine prif_atomic_fetch_and ( image_num , coarray_handle , offset , value , old , stat ) implicit none integer ( c_int ), intent ( in ) :: image_num type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( c_size_t ), intent ( in ) :: offset integer ( PRIF_ATOMIC_INT_KIND ), intent ( in ) :: value integer ( PRIF_ATOMIC_INT_KIND ), intent ( out ) :: old integer ( c_int ), intent ( out ), optional :: stat end subroutine module subroutine prif_atomic_fetch_and_indirect ( image_num , atom_remote_ptr , value , old , stat ) implicit none integer ( c_int ), intent ( in ) :: image_num integer ( c_intptr_t ), intent ( in ) :: atom_remote_ptr integer ( PRIF_ATOMIC_INT_KIND ), intent ( in ) :: value integer ( PRIF_ATOMIC_INT_KIND ), intent ( out ) :: old integer ( c_int ), intent ( out ), optional :: stat end subroutine module subroutine prif_atomic_fetch_or ( image_num , coarray_handle , offset , value , old , stat ) implicit none integer ( c_int ), intent ( in ) :: image_num type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( c_size_t ), intent ( in ) :: offset integer ( PRIF_ATOMIC_INT_KIND ), intent ( in ) :: value integer ( PRIF_ATOMIC_INT_KIND ), intent ( out ) :: old integer ( c_int ), intent ( out ), optional :: stat end subroutine module subroutine prif_atomic_fetch_or_indirect ( image_num , atom_remote_ptr , value , old , stat ) implicit none integer ( c_int ), intent ( in ) :: image_num integer ( c_intptr_t ), intent ( in ) :: atom_remote_ptr integer ( PRIF_ATOMIC_INT_KIND ), intent ( in ) :: value integer ( PRIF_ATOMIC_INT_KIND ), intent ( out ) :: old integer ( c_int ), intent ( out ), optional :: stat end subroutine module subroutine prif_atomic_fetch_xor ( image_num , coarray_handle , offset , value , old , stat ) implicit none integer ( c_int ), intent ( in ) :: image_num type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( c_size_t ), intent ( in ) :: offset integer ( PRIF_ATOMIC_INT_KIND ), intent ( in ) :: value integer ( PRIF_ATOMIC_INT_KIND ), intent ( out ) :: old integer ( c_int ), intent ( out ), optional :: stat end subroutine module subroutine prif_atomic_fetch_xor_indirect ( image_num , atom_remote_ptr , value , old , stat ) implicit none integer ( c_int ), intent ( in ) :: image_num integer ( c_intptr_t ), intent ( in ) :: atom_remote_ptr integer ( PRIF_ATOMIC_INT_KIND ), intent ( in ) :: value integer ( PRIF_ATOMIC_INT_KIND ), intent ( out ) :: old integer ( c_int ), intent ( out ), optional :: stat end subroutine module subroutine prif_atomic_define_int ( image_num , coarray_handle , offset , value , stat ) implicit none integer ( c_int ), intent ( in ) :: image_num type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( c_size_t ), intent ( in ) :: offset integer ( PRIF_ATOMIC_INT_KIND ), intent ( in ) :: value integer ( c_int ), intent ( out ), optional :: stat end subroutine module subroutine prif_atomic_define_int_indirect ( image_num , atom_remote_ptr , value , stat ) implicit none integer ( c_int ), intent ( in ) :: image_num integer ( c_intptr_t ), intent ( in ) :: atom_remote_ptr integer ( PRIF_ATOMIC_INT_KIND ), intent ( in ) :: value integer ( c_int ), intent ( out ), optional :: stat end subroutine module subroutine prif_atomic_define_logical ( image_num , coarray_handle , offset , value , stat ) implicit none integer ( c_int ), intent ( in ) :: image_num type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( c_size_t ), intent ( in ) :: offset logical ( PRIF_ATOMIC_LOGICAL_KIND ), intent ( in ) :: value integer ( c_int ), intent ( out ), optional :: stat end subroutine module subroutine prif_atomic_define_logical_indirect ( image_num , atom_remote_ptr , value , stat ) implicit none integer ( c_int ), intent ( in ) :: image_num integer ( c_intptr_t ), intent ( in ) :: atom_remote_ptr logical ( PRIF_ATOMIC_LOGICAL_KIND ), intent ( in ) :: value integer ( c_int ), intent ( out ), optional :: stat end subroutine module subroutine prif_atomic_ref_int ( image_num , coarray_handle , offset , value , stat ) implicit none integer ( c_int ), intent ( in ) :: image_num type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( c_size_t ), intent ( in ) :: offset integer ( PRIF_ATOMIC_INT_KIND ), intent ( out ) :: value integer ( c_int ), intent ( out ), optional :: stat end subroutine module subroutine prif_atomic_ref_int_indirect ( image_num , atom_remote_ptr , value , stat ) implicit none integer ( c_int ), intent ( in ) :: image_num integer ( c_intptr_t ), intent ( in ) :: atom_remote_ptr integer ( PRIF_ATOMIC_INT_KIND ), intent ( out ) :: value integer ( c_int ), intent ( out ), optional :: stat end subroutine module subroutine prif_atomic_ref_logical ( image_num , coarray_handle , offset , value , stat ) implicit none integer ( c_int ), intent ( in ) :: image_num type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( c_size_t ), intent ( in ) :: offset logical ( PRIF_ATOMIC_LOGICAL_KIND ), intent ( out ) :: value integer ( c_int ), intent ( out ), optional :: stat end subroutine module subroutine prif_atomic_ref_logical_indirect ( image_num , atom_remote_ptr , value , stat ) implicit none integer ( c_int ), intent ( in ) :: image_num integer ( c_intptr_t ), intent ( in ) :: atom_remote_ptr logical ( PRIF_ATOMIC_LOGICAL_KIND ), intent ( out ) :: value integer ( c_int ), intent ( out ), optional :: stat end subroutine end interface ! Type definitions only relevant to Caffeine internals type , private , bind ( C ) :: handle_data private type ( c_ptr ) :: coarray_data integer ( c_int ) :: corank integer ( c_size_t ) :: coarray_size integer ( c_size_t ) :: element_size type ( c_funptr ) :: final_func type ( c_ptr ) :: previous_handle , next_handle integer ( c_intmax_t ) :: lcobounds ( 15 ), ucobounds ( 15 ) end type type , private :: team_data type ( c_ptr ) :: gex_team type ( c_ptr ) :: heap_mspace integer ( c_intptr_t ) :: heap_start type ( team_data ), pointer :: parent_team => null () type ( handle_data ), pointer :: coarrays => null () end type end module prif","tags":"","loc":"sourcefile/prif.f90.html"},{"title":"allocation_s.f90 – Caffeine","text":"This file depends on sourcefile~~allocation_s.f90~~EfferentGraph sourcefile~allocation_s.f90 allocation_s.f90 sourcefile~prif_private_s.f90 prif_private_s.f90 sourcefile~allocation_s.f90->sourcefile~prif_private_s.f90 sourcefile~prif.f90 prif.f90 sourcefile~prif_private_s.f90->sourcefile~prif.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules allocation_s Source Code allocation_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( prif : prif_private_s ) allocation_s use iso_c_binding , only : & c_sizeof , & c_f_pointer , & c_f_procpointer , & c_loc , & c_associated , & c_null_ptr , & c_null_funptr implicit none contains module procedure prif_allocate_coarray ! TODO: determining the size of the handle and where the coarray begins !       becomes a bit more complicated if we don't allocate space for !       15 cobounds integer :: me type ( c_ptr ) :: whole_block integer ( c_ptrdiff_t ) :: block_offset integer ( c_size_t ) :: handle_size , coarray_size , total_size type ( handle_data ) :: unused type ( handle_data ), pointer :: unused2 (:) coarray_size = product ( ubounds - lbounds + 1 ) * element_size me = caf_this_image ( current_team % info % gex_team ) if ( me == 1 ) then handle_size = c_sizeof ( unused ) total_size = handle_size + coarray_size whole_block = caf_allocate ( current_team % info % heap_mspace , total_size ) block_offset = as_int ( whole_block ) - current_team % info % heap_start else block_offset = 0 end if call prif_co_sum ( block_offset ) if ( me /= 1 ) whole_block = as_c_ptr ( current_team % info % heap_start + block_offset ) call c_f_pointer ( whole_block , coarray_handle % info ) call c_f_pointer ( whole_block , unused2 , [ 2 ]) coarray_handle % info % coarray_data = c_loc ( unused2 ( 2 )) coarray_handle % info % corank = size ( lcobounds ) coarray_handle % info % coarray_size = coarray_size coarray_handle % info % element_size = element_size coarray_handle % info % final_func = final_func coarray_handle % info % lcobounds ( 1 : size ( lcobounds )) = lcobounds coarray_handle % info % ucobounds ( 1 : size ( ucobounds )) = ucobounds call add_to_team_list ( current_team , coarray_handle ) allocated_memory = coarray_handle % info % coarray_data end procedure module procedure prif_allocate allocated_memory = caf_allocate ( non_symmetric_heap_mspace , size_in_bytes ) end procedure module procedure prif_deallocate_coarray ! gfortran is yelling that this isn't valid for bind(C) ! https://gcc.gnu.org/bugzilla/show_bug.cgi?id=113338 ! abstract interface !   subroutine coarray_cleanup_i(handle, stat, errmsg) bind(C) !     import c_int, prif_coarray_handle !     implicit none !     type(prif_coarray_handle), pointer, intent(in) :: handle !     integer(c_int), intent(out) :: stat !     character(len=:), intent(out), allocatable :: errmsg !   end subroutine ! end interface integer :: i , num_handles integer ( c_int ) :: local_stat character ( len = :), allocatable :: local_errmsg ! procedure(coarray_cleanup_i), pointer :: coarray_cleanup character ( len =* ), parameter :: unallocated_message = \"Attempted to deallocate unallocated coarray\" call prif_sync_all ! Need to ensure we don't deallocate anything till everyone gets here num_handles = size ( coarray_handles ) if (. not . all ([( associated ( coarray_handles ( i )% info ), i = 1 , num_handles )])) then if ( present ( stat )) then stat = 1 ! TODO: decide what our stat codes should be if ( present ( errmsg )) then errmsg = unallocated_message else if ( present ( errmsg_alloc )) then errmsg_alloc = unallocated_message end if return else call prif_error_stop (. false . _ c_bool , stop_code_char = unallocated_message ) end if end if ! TODO: invoke finalizers from coarray_handles(:)%info%final_func ! do i = 1, num_handles !   if (coarray_handles(i)%info%final_func /= c_null_funptr) then !     call c_f_procpointer(coarray_handles(i)%info%final_func, coarray_cleanup) !     call coarray_cleanup(coarray_handles(i), local_stat, local_errmsg) !     call prif_co_sum(local_stat) ! Need to be sure it didn't fail on any images !     if (local_stat /= 0) then !       if (present(stat)) then !         stat = local_stat !         if (present(errmsg)) then !           errmsg = local_errmsg !         else if (present(errmsg_alloc)) then !           call move_alloc(local_errmsg, errmsg_alloc) !         end if !         return ! NOTE: We no longer have guarantees that coarrays are in consistent state !       else !         call prif_error_stop(.false._c_bool, stop_code_char=local_errmsg) !       end if !     end if !   end if ! end do do i = 1 , num_handles call remove_from_team_list ( coarray_handles ( i )) if ( caf_this_image ( current_team % info % gex_team ) == 1 ) & call caf_deallocate ( current_team % info % heap_mspace , c_loc ( coarray_handles ( i )% info )) end do if ( present ( stat )) stat = 0 end procedure module procedure prif_deallocate call caf_deallocate ( non_symmetric_heap_mspace , mem ) end procedure subroutine add_to_team_list ( current_team , coarray_handle ) type ( prif_team_type ), intent ( inout ) :: current_team type ( prif_coarray_handle ), intent ( inout ) :: coarray_handle if ( associated ( current_team % info % coarrays )) then current_team % info % coarrays % previous_handle = c_loc ( coarray_handle % info ) coarray_handle % info % next_handle = c_loc ( current_team % info % coarrays ) coarray_handle % info % previous_handle = c_null_ptr current_team % info % coarrays => coarray_handle % info else current_team % info % coarrays => coarray_handle % info coarray_handle % info % next_handle = c_null_ptr coarray_handle % info % previous_handle = c_null_ptr end if end subroutine subroutine remove_from_team_list ( coarray_handle ) type ( prif_coarray_handle ), intent ( in ) :: coarray_handle type ( handle_data ), pointer :: tmp_data if ( c_associated ( coarray_handle % info % previous_handle )) then call c_f_pointer ( coarray_handle % info % previous_handle , tmp_data ) tmp_data % next_handle = coarray_handle % info % next_handle end if if ( c_associated ( coarray_handle % info % next_handle )) then call c_f_pointer ( coarray_handle % info % next_handle , tmp_data ) tmp_data % previous_handle = coarray_handle % info % previous_handle end if end subroutine end submodule allocation_s","tags":"","loc":"sourcefile/allocation_s.f90.html"},{"title":"alias_s.f90 – Caffeine","text":"This file depends on sourcefile~~alias_s.f90~~EfferentGraph sourcefile~alias_s.f90 alias_s.f90 sourcefile~prif_private_s.f90 prif_private_s.f90 sourcefile~alias_s.f90->sourcefile~prif_private_s.f90 sourcefile~prif.f90 prif.f90 sourcefile~prif_private_s.f90->sourcefile~prif.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules alias_s Source Code alias_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( prif : prif_private_s ) alias_s implicit none contains module procedure prif_alias_create call unimplemented ( \"prif_alias_create\" ) end procedure module procedure prif_alias_destroy call unimplemented ( \"prif_alias_destroy\" ) end procedure end submodule alias_s","tags":"","loc":"sourcefile/alias_s.f90.html"},{"title":"critical_s.f90 – Caffeine","text":"This file depends on sourcefile~~critical_s.f90~~EfferentGraph sourcefile~critical_s.f90 critical_s.f90 sourcefile~prif_private_s.f90 prif_private_s.f90 sourcefile~critical_s.f90->sourcefile~prif_private_s.f90 sourcefile~prif.f90 prif.f90 sourcefile~prif_private_s.f90->sourcefile~prif.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules critical_s Source Code critical_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( prif : prif_private_s ) critical_s implicit none contains module procedure prif_critical call unimplemented ( \"prif_critical\" ) end procedure module procedure prif_end_critical call unimplemented ( \"prif_end_critical\" ) end procedure end submodule critical_s","tags":"","loc":"sourcefile/critical_s.f90.html"},{"title":"locks_s.f90 – Caffeine","text":"This file depends on sourcefile~~locks_s.f90~~EfferentGraph sourcefile~locks_s.f90 locks_s.f90 sourcefile~prif_private_s.f90 prif_private_s.f90 sourcefile~locks_s.f90->sourcefile~prif_private_s.f90 sourcefile~prif.f90 prif.f90 sourcefile~prif_private_s.f90->sourcefile~prif.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules locks_s Source Code locks_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( prif : prif_private_s ) locks_s implicit none contains module procedure prif_lock call unimplemented ( \"prif_lock\" ) end procedure module procedure prif_lock_indirect call unimplemented ( \"prif_lock_indirect\" ) end procedure module procedure prif_unlock call unimplemented ( \"prif_unlock\" ) end procedure module procedure prif_unlock_indirect call unimplemented ( \"prif_unlock_indirect\" ) end procedure end submodule locks_s","tags":"","loc":"sourcefile/locks_s.f90.html"},{"title":"image_queries_s.f90 – Caffeine","text":"This file depends on sourcefile~~image_queries_s.f90~~EfferentGraph sourcefile~image_queries_s.f90 image_queries_s.f90 sourcefile~prif_private_s.f90 prif_private_s.f90 sourcefile~image_queries_s.f90->sourcefile~prif_private_s.f90 sourcefile~prif.f90 prif.f90 sourcefile~prif_private_s.f90->sourcefile~prif.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules image_queries_s Source Code image_queries_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( prif : prif_private_s ) image_queries_s implicit none contains module procedure prif_num_images num_images = caf_num_images ( current_team % info % gex_team ) end procedure module procedure prif_num_images_with_team call unimplemented ( \"prif_num_images_with_team\" ) end procedure module procedure prif_num_images_with_team_number call unimplemented ( \"prif_num_images_with_team_number\" ) end procedure module procedure prif_this_image_no_coarray ! TODO: handle optional arg `team` this_image = caf_this_image ( current_team % info % gex_team ) end procedure module procedure prif_this_image_with_coarray call unimplemented ( \"prif_this_image_with_coarray\" ) end procedure module procedure prif_this_image_with_dim call unimplemented ( \"prif_this_image_with_dim\" ) end procedure module procedure prif_failed_images call unimplemented ( \"prif_failed_images\" ) end procedure module procedure prif_stopped_images call unimplemented ( \"prif_stopped_images\" ) end procedure module procedure prif_image_status call unimplemented ( \"prif_image_status\" ) end procedure end submodule image_queries_s","tags":"","loc":"sourcefile/image_queries_s.f90.html"},{"title":"coarray_access_s.f90 – Caffeine","text":"This file depends on sourcefile~~coarray_access_s.f90~~EfferentGraph sourcefile~coarray_access_s.f90 coarray_access_s.f90 sourcefile~prif_private_s.f90 prif_private_s.f90 sourcefile~coarray_access_s.f90->sourcefile~prif_private_s.f90 sourcefile~prif.f90 prif.f90 sourcefile~prif_private_s.f90->sourcefile~prif.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules coarray_access_s Source Code coarray_access_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( prif : prif_private_s ) coarray_access_s use iso_c_binding , only : c_loc implicit none contains module procedure prif_put integer ( c_intptr_t ) :: remote_base call base_pointer ( coarray_handle , image_num , remote_base ) call prif_put_indirect ( & image_num = image_num , & remote_ptr = remote_base + offset , & current_image_buffer = current_image_buffer , & size_in_bytes = size_in_bytes ) end procedure module procedure prif_put_indirect call caf_put ( & image = image_num , & dest = remote_ptr , & src = current_image_buffer , & size = size_in_bytes ) end procedure module procedure prif_put_with_notify call unimplemented ( \"prif_put_with_notify\" ) end procedure module procedure prif_put_with_notify_indirect call unimplemented ( \"prif_put_with_notify_indirect\" ) end procedure module procedure prif_put_indirect_with_notify call unimplemented ( \"prif_put_indirect_with_notify\" ) end procedure module procedure prif_put_indirect_with_notify_indirect call unimplemented ( \"prif_put_indirect_with_notify_indirect\" ) end procedure module procedure prif_get integer ( c_intptr_t ) :: remote_base call base_pointer ( coarray_handle , image_num , remote_base ) call prif_get_indirect ( & image_num = image_num , & remote_ptr = remote_base + offset , & current_image_buffer = current_image_buffer , & size_in_bytes = size_in_bytes , & stat = stat , & errmsg = errmsg , & errmsg_alloc = errmsg_alloc ) end procedure module procedure prif_get_indirect call caf_get ( & image = image_num , & dest = current_image_buffer , & src = remote_ptr , & size = size_in_bytes ) end procedure module procedure prif_get_strided call unimplemented ( \"prif_get_strided\" ) end procedure module procedure prif_get_strided_indirect call unimplemented ( \"prif_get_strided_indirect\" ) end procedure module procedure prif_put_strided call unimplemented ( \"prif_put_strided\" ) end procedure module procedure prif_put_strided_indirect call unimplemented ( \"prif_put_strided_indirect\" ) end procedure module procedure prif_put_strided_with_notify call unimplemented ( \"prif_put_strided_with_notify\" ) end procedure module procedure prif_put_strided_with_notify_indirect call unimplemented ( \"prif_put_strided_with_notify_indirect\" ) end procedure module procedure prif_put_strided_indirect_with_notify call unimplemented ( \"prif_put_strided_indirect_with_notify\" ) end procedure module procedure prif_put_strided_indirect_with_notify_indirect call unimplemented ( \"prif_put_strided_indirect_with_notify_indirect\" ) end procedure end submodule coarray_access_s","tags":"","loc":"sourcefile/coarray_access_s.f90.html"},{"title":"events_s.f90 – Caffeine","text":"This file depends on sourcefile~~events_s.f90~~EfferentGraph sourcefile~events_s.f90 events_s.f90 sourcefile~prif_private_s.f90 prif_private_s.f90 sourcefile~events_s.f90->sourcefile~prif_private_s.f90 sourcefile~prif.f90 prif.f90 sourcefile~prif_private_s.f90->sourcefile~prif.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules events_s Source Code events_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( prif : prif_private_s ) events_s implicit none contains module procedure prif_event_post call unimplemented ( \"prif_event_post\" ) end procedure module procedure prif_event_post_indirect call unimplemented ( \"prif_event_post_indirect\" ) end procedure module procedure prif_event_wait call unimplemented ( \"prif_event_wait\" ) end procedure module procedure prif_event_query call unimplemented ( \"prif_event_query\" ) end procedure end submodule events_s","tags":"","loc":"sourcefile/events_s.f90.html"},{"title":"notify_s.f90 – Caffeine","text":"This file depends on sourcefile~~notify_s.f90~~EfferentGraph sourcefile~notify_s.f90 notify_s.f90 sourcefile~prif_private_s.f90 prif_private_s.f90 sourcefile~notify_s.f90->sourcefile~prif_private_s.f90 sourcefile~prif.f90 prif.f90 sourcefile~prif_private_s.f90->sourcefile~prif.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules notify_s Source Code notify_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( prif : prif_private_s ) notify_s implicit none contains module procedure prif_notify_wait call unimplemented ( \"prif_notify_wait\" ) end procedure end submodule notify_s","tags":"","loc":"sourcefile/notify_s.f90.html"},{"title":"synchronization_s.f90 – Caffeine","text":"This file depends on sourcefile~~synchronization_s.f90~~EfferentGraph sourcefile~synchronization_s.f90 synchronization_s.f90 sourcefile~prif_private_s.f90 prif_private_s.f90 sourcefile~synchronization_s.f90->sourcefile~prif_private_s.f90 sourcefile~prif.f90 prif.f90 sourcefile~prif_private_s.f90->sourcefile~prif.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules sychronization_s Source Code synchronization_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( prif : prif_private_s ) sychronization_s implicit none contains module procedure prif_sync_all !TODO: handle optional args stat, errmsg, errmsg_alloc call caf_sync_all end procedure module procedure prif_sync_images call unimplemented ( \"prif_sync_images\" ) end procedure module procedure prif_sync_team call unimplemented ( \"prif_sync_team\" ) end procedure module procedure prif_sync_memory call unimplemented ( \"prif_sync_memory\" ) end procedure end submodule","tags":"","loc":"sourcefile/synchronization_s.f90.html"},{"title":"prif_private_s.f90 – Caffeine","text":"This file depends on sourcefile~~prif_private_s.f90~~EfferentGraph sourcefile~prif_private_s.f90 prif_private_s.f90 sourcefile~prif.f90 prif.f90 sourcefile~prif_private_s.f90->sourcefile~prif.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Files dependent on this one sourcefile~~prif_private_s.f90~~AfferentGraph sourcefile~prif_private_s.f90 prif_private_s.f90 sourcefile~events_s.f90 events_s.f90 sourcefile~events_s.f90->sourcefile~prif_private_s.f90 sourcefile~prif_queries_s.f90 prif_queries_s.f90 sourcefile~prif_queries_s.f90->sourcefile~prif_private_s.f90 sourcefile~critical_s.f90 critical_s.f90 sourcefile~critical_s.f90->sourcefile~prif_private_s.f90 sourcefile~co_broadcast_s.f90 co_broadcast_s.f90 sourcefile~co_broadcast_s.f90->sourcefile~prif_private_s.f90 sourcefile~program_startup_s.f90 program_startup_s.F90 sourcefile~program_startup_s.f90->sourcefile~prif_private_s.f90 sourcefile~coarray_access_s.f90 coarray_access_s.f90 sourcefile~coarray_access_s.f90->sourcefile~prif_private_s.f90 sourcefile~coarray_queries_s.f90 coarray_queries_s.f90 sourcefile~coarray_queries_s.f90->sourcefile~prif_private_s.f90 sourcefile~co_sum_s.f90 co_sum_s.f90 sourcefile~co_sum_s.f90->sourcefile~prif_private_s.f90 sourcefile~allocation_s.f90 allocation_s.f90 sourcefile~allocation_s.f90->sourcefile~prif_private_s.f90 sourcefile~notify_s.f90 notify_s.f90 sourcefile~notify_s.f90->sourcefile~prif_private_s.f90 sourcefile~teams_s.f90 teams_s.f90 sourcefile~teams_s.f90->sourcefile~prif_private_s.f90 sourcefile~locks_s.f90 locks_s.f90 sourcefile~locks_s.f90->sourcefile~prif_private_s.f90 sourcefile~caffeine_assert_s.f90 caffeine_assert_s.F90 sourcefile~caffeine_assert_s.f90->sourcefile~prif_private_s.f90 sourcefile~co_min_s.f90 co_min_s.f90 sourcefile~co_min_s.f90->sourcefile~prif_private_s.f90 sourcefile~image_queries_s.f90 image_queries_s.f90 sourcefile~image_queries_s.f90->sourcefile~prif_private_s.f90 sourcefile~atomic_s.f90 atomic_s.f90 sourcefile~atomic_s.f90->sourcefile~prif_private_s.f90 sourcefile~alias_s.f90 alias_s.f90 sourcefile~alias_s.f90->sourcefile~prif_private_s.f90 sourcefile~synchronization_s.f90 synchronization_s.f90 sourcefile~synchronization_s.f90->sourcefile~prif_private_s.f90 sourcefile~co_max_s.f90 co_max_s.f90 sourcefile~co_max_s.f90->sourcefile~prif_private_s.f90 sourcefile~program_termination_s.f90 program_termination_s.f90 sourcefile~program_termination_s.f90->sourcefile~prif_private_s.f90 sourcefile~co_reduce_s.f90 co_reduce_s.f90 sourcefile~co_reduce_s.f90->sourcefile~prif_private_s.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules prif_private_s Source Code prif_private_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( prif ) prif_private_s implicit none type ( team_data ), target :: initial_team type ( prif_team_type ) :: current_team type ( c_ptr ) :: non_symmetric_heap_mspace interface pure module subroutine assert ( assertion , description , diagnostics ) implicit none logical , intent ( in ) :: assertion character ( len =* ), intent ( in ) :: description class ( * ), intent ( in ), optional :: diagnostics end subroutine ! ________ Program initiation and finalization ___________ subroutine caf_caffeinate ( symmetric_heap , symmetric_heap_start , non_symmetric_heap , initial_team ) bind ( C ) import c_ptr , c_intptr_t implicit none type ( c_ptr ), intent ( out ) :: symmetric_heap integer ( c_intptr_t ), intent ( out ) :: symmetric_heap_start type ( c_ptr ), intent ( out ) :: non_symmetric_heap type ( c_ptr ), intent ( out ) :: initial_team end subroutine subroutine caf_decaffeinate ( exit_code ) bind ( C ) !! void c_decaffeinate(); import c_int implicit none integer ( c_int ), value :: exit_code end subroutine ! _________________ Image enumeration ____________________ function caf_this_image ( team ) bind ( C ) !! int caf_this_image(); import c_ptr , c_int implicit none type ( c_ptr ), value :: team integer ( c_int ) caf_this_image end function pure function caf_num_images ( team ) bind ( C ) !! int caf_num_images(); import c_ptr , c_int implicit none type ( c_ptr ), value :: team integer ( c_int ) caf_num_images end function ! _________________ Memory allocation ____________________ function caf_allocate ( mspace , bytes ) result ( ptr ) bind ( c ) import c_size_t , c_ptr implicit none type ( c_ptr ), intent ( in ), value :: mspace integer ( c_size_t ), intent ( in ), value :: bytes type ( c_ptr ) :: ptr end function subroutine caf_deallocate ( mspace , mem ) bind ( c ) import c_ptr implicit none type ( c_ptr ), intent ( in ), value :: mspace type ( c_ptr ), intent ( in ), value :: mem end subroutine ! ___________________ PRIF Queries ______________________ module function caf_convert_base_addr ( addr , image ) result ( ptr ) bind ( c ) implicit none type ( c_ptr ), intent ( in ), value :: addr integer ( c_int ), intent ( in ), value :: image integer ( c_intptr_t ) :: ptr end function ! _______________________ RMA ____________________________ subroutine caf_put ( image , dest , src , size ) bind ( c ) !! void caf_put(int image, intptr_t dest, void* src, size_t size) import c_ptr , c_int , c_intptr_t , c_size_t implicit none integer ( c_int ), intent ( in ), value :: image integer ( c_intptr_t ), intent ( in ), value :: dest type ( c_ptr ), intent ( in ), value :: src integer ( c_size_t ), intent ( in ), value :: size end subroutine subroutine caf_get ( image , dest , src , size ) bind ( c ) !! void caf_get(int image, void* dest, intptr_t src, size_t size) import c_ptr , c_int , c_intptr_t , c_size_t implicit none integer ( c_int ), intent ( in ), value :: image type ( c_ptr ), intent ( in ), value :: dest integer ( c_intptr_t ), intent ( in ), value :: src integer ( c_size_t ), intent ( in ), value :: size end subroutine ! __________________ Synchronization _____________________ subroutine caf_sync_all () bind ( C ) !! void caf_sync_all(); import c_int implicit none end subroutine ! ______________ Collective Subroutines __________________ subroutine caf_co_broadcast ( a , source_image , Nelem , team ) bind ( C ) !! void c_co_broadcast(CFI_cdesc_t * a_desc, int source_image, int num_elements, gex_TM_t team); import c_int , c_ptr implicit none type ( * ) a (..) integer ( c_int ), value :: source_image , Nelem type ( c_ptr ), value :: team end subroutine subroutine caf_co_reduce ( a , result_image , num_elements , Coll_ReduceSub , client_data , team ) bind ( C ) !! void caf_co_reduce(CFI_cdesc_t* a_desc, int result_image, int num_elements, gex_Coll_ReduceFn_t* user_op, void* client_data) import c_int , c_ptr , c_size_t , c_funptr implicit none type ( * ) a (..) integer ( c_int ), value :: result_image type ( c_ptr ), value :: client_data type ( c_funptr ), value :: Coll_ReduceSub integer ( c_size_t ), value :: num_elements type ( c_ptr ), value :: team end subroutine subroutine caf_co_sum ( a , result_image , num_elements , team ) bind ( C ) !! void c_co_sum(CFI_cdesc_t* a_desc, int result_image, size_t num_elements, gex_TM_t team); import c_int , c_ptr , c_size_t implicit none type ( * ) a (..) integer ( c_int ), value :: result_image integer ( c_size_t ), value :: num_elements type ( c_ptr ), value :: team end subroutine subroutine caf_co_min ( a , result_image , num_elements , team ) bind ( C ) !! void c_co_min(CFI_cdesc_t* a_desc, int result_image, size_t num_elements, gex_TM_t team); import c_int , c_ptr , c_size_t implicit none type ( * ) a (..) integer ( c_int ), value :: result_image integer ( c_size_t ), value :: num_elements type ( c_ptr ), value :: team end subroutine subroutine caf_co_max ( a , result_image , num_elements , team ) bind ( C ) !! void c_co_max(CFI_cdesc_t* a_desc, int result_image, size_t num_elements, gex_TM_t team); import c_int , c_ptr , c_size_t implicit none type ( * ) a (..) integer ( c_int ), value :: result_image integer ( c_size_t ), value :: num_elements type ( c_ptr ), value :: team end subroutine logical ( c_bool ) pure function caf_same_cfi_type ( a , b ) bind ( C ) !! bool caf_same_cfi_type(CFI_cdesc_t* a_desc, CFI_cdesc_t* a_desc); import c_bool type ( * ), intent ( in ) :: a (..), b (..) end function logical ( c_bool ) pure function caf_numeric_type ( a ) bind ( C ) !! bool caf_numeric_type(CFI_cdesc_t* a_desc); import c_bool type ( * ), intent ( in ) :: a (..) end function logical ( c_bool ) pure function caf_is_f_string ( a ) bind ( C ) !! bool caf_is_f_string(CFI_cdesc_t* a_desc); import c_bool type ( * ), intent ( in ) :: a (..) end function pure function caf_elem_len ( a ) result ( a_elem_len ) bind ( C ) !! size_t caf_elem_len(CFI_cdesc_t* a_desc); import c_size_t type ( * ), intent ( in ) :: a (..) integer ( c_size_t ), target :: a_elem_len end function end interface contains pure function as_int ( ptr ) type ( c_ptr ), intent ( in ) :: ptr integer ( c_intptr_t ) :: as_int ! the following snippet ensures at compile time that c_ptr and ! c_intptr_t are actually the same size integer , parameter :: int_ptr_check = merge ( c_intptr_t , 0 , storage_size ( ptr ) == storage_size ( as_int )) integer ( int_ptr_check ), parameter :: unused = 0_int_ptr_check as_int = transfer ( ptr , as_int ) end function pure function as_c_ptr ( i ) integer ( c_intptr_t ), intent ( in ) :: i type ( c_ptr ) :: as_c_ptr as_c_ptr = transfer ( i , as_c_ptr ) end function subroutine base_pointer ( coarray_handle , image_num , ptr ) type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( c_int ), intent ( in ) :: image_num integer ( c_intptr_t ), intent ( out ) :: ptr integer ( c_int ) :: num_img ! TODO TEAMS: either move the assertion below into `caf_convert_base_addr()` ! (avoiding the need to call prif_num_images here to fetch initial team size) ! or cache the initial team size in a private module variable so we can just access it (issue #62) call prif_num_images ( num_images = num_img ) call assert ( image_num > 0 . and . image_num <= num_img , \"base_pointer: image_num not within valid range\" ) ptr = caf_convert_base_addr ( coarray_handle % info % coarray_data , image_num ) end subroutine subroutine unimplemented ( proc_name ) character ( len =* ), intent ( in ) :: proc_name call prif_error_stop ( quiet = . false . _ c_bool , stop_code_char = proc_name // \" is not yet implemented\" ) end subroutine pure function optional_value ( var ) result ( c_val ) integer , intent ( in ), optional :: var integer ( c_int ) c_val if ( present ( var )) then c_val = var else c_val = 0_c_int end if end function end submodule prif_private_s","tags":"","loc":"sourcefile/prif_private_s.f90.html"},{"title":"program_startup_s.F90 – Caffeine","text":"This file depends on sourcefile~~program_startup_s.f90~~EfferentGraph sourcefile~program_startup_s.f90 program_startup_s.F90 sourcefile~prif_private_s.f90 prif_private_s.f90 sourcefile~program_startup_s.f90->sourcefile~prif_private_s.f90 sourcefile~prif.f90 prif.f90 sourcefile~prif_private_s.f90->sourcefile~prif.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules program_startup_s Source Code program_startup_s.F90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( prif : prif_private_s ) program_startup_s implicit none contains module procedure prif_init logical , save :: prif_init_called_previously = . false . if ( prif_init_called_previously ) then stat = PRIF_STAT_ALREADY_INIT else call caf_caffeinate ( & initial_team % heap_mspace , & initial_team % heap_start , & non_symmetric_heap_mspace , & initial_team % gex_team ) current_team % info => initial_team prif_init_called_previously = . true . stat = 0 end if end procedure end submodule program_startup_s","tags":"","loc":"sourcefile/program_startup_s.f90.html"},{"title":"caffeine_assert_s.F90 – Caffeine","text":"This file depends on sourcefile~~caffeine_assert_s.f90~~EfferentGraph sourcefile~caffeine_assert_s.f90 caffeine_assert_s.F90 sourcefile~prif_private_s.f90 prif_private_s.f90 sourcefile~caffeine_assert_s.f90->sourcefile~prif_private_s.f90 sourcefile~prif.f90 prif.f90 sourcefile~prif_private_s.f90->sourcefile~prif.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules caffeine_assert_s Source Code caffeine_assert_s.F90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( prif : prif_private_s ) caffeine_assert_s implicit none #if CAF_ASSERTIONS || !defined(CAF_ASSERTIONS) logical , parameter :: assertions_ = . true . #else logical , parameter :: assertions_ = . false . #endif !! Disable assertions by compiling with preprocessor setting: -DCAF_ASSERTIONS=0 contains module procedure assert character ( len = :), allocatable :: tail if ( assertions_ ) then if (. not . assertion ) then if (. not . present ( diagnostics )) then tail = \".\" else tail = \" with diagnostics \" select type ( diagnostics ) type is ( character ( len =* )) tail = tail // diagnostics class default tail = tail // \"of unsupported type.\" end select end if call prif_error_stop (. false . _ c_bool , stop_code_char = 'Assertion \"' // description // '\" failed' // tail ) end if end if end procedure end submodule caffeine_assert_s","tags":"","loc":"sourcefile/caffeine_assert_s.f90.html"},{"title":"program_termination_s.f90 – Caffeine","text":"This file depends on sourcefile~~program_termination_s.f90~~EfferentGraph sourcefile~program_termination_s.f90 program_termination_s.f90 sourcefile~prif_private_s.f90 prif_private_s.f90 sourcefile~program_termination_s.f90->sourcefile~prif_private_s.f90 sourcefile~prif.f90 prif.f90 sourcefile~prif_private_s.f90->sourcefile~prif.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules program_termination_s Source Code program_termination_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( prif : prif_private_s ) program_termination_s use iso_fortran_env , only : output_unit , error_unit use iso_c_binding , only : c_char implicit none contains module procedure prif_stop !TODO: deal with argument `quiet` if ( present ( stop_code_char )) then call prif_stop_character ( stop_code_char ) else if ( present ( stop_code_int )) then call prif_stop_integer ( stop_code_int ) else call prif_stop_integer () end if contains subroutine prif_stop_integer ( stop_code ) !! synchronize, stop the executing image, and provide the stop_code, or 0 if not present, as the process exit status integer , intent ( in ), optional :: stop_code sync all !write(output_unit, *) \"caf_stop: stop code '\", stop_code, \"'\" write ( output_unit , * ) stop_code flush output_unit if (. not . present ( stop_code )) call caf_decaffeinate ( exit_code = 0_c_int ) ! does not return call caf_decaffeinate ( stop_code ) end subroutine prif_stop_integer subroutine prif_stop_character ( stop_code ) !! synchronize, stop the executing image, and provide the stop_code as the process exit status character ( len =* ), intent ( in ) :: stop_code sync all write ( output_unit , * ) \"caf_stop: stop code '\" // stop_code // \"'\" flush output_unit call caf_decaffeinate ( exit_code = 0_c_int ) ! does not return end subroutine prif_stop_character end procedure prif_stop module procedure prif_error_stop !TODO: deal with argument `quiet` if ( present ( stop_code_char )) then call prif_error_stop_character ( stop_code_char ) else if ( present ( stop_code_int )) then call prif_error_stop_integer ( stop_code_int ) else call prif_error_stop_integer () end if end procedure prif_error_stop pure subroutine prif_error_stop_character ( stop_code ) !! stop all images and provide the stop_code as the process exit status character ( len =* ), intent ( in ) :: stop_code interface pure subroutine caf_error_stop_character_c ( stop_code , length ) bind ( C , name = \"caf_error_stop_character_c\" ) use , intrinsic :: iso_c_binding , only : c_char , c_int implicit none integer ( c_int ), intent ( in ), value :: length character ( len = 1 , kind = c_char ), intent ( in ) :: stop_code ( length ) end subroutine end interface call caf_error_stop_character_c ( f_c_string ( stop_code ), len ( stop_code )) end subroutine subroutine inner_caf_error_stop_character ( stop_code , length ) bind ( C , name = \"inner_caf_error_stop_character\" ) integer ( c_int ), intent ( in ) :: length character ( len = 1 , kind = c_char ), intent ( in ) :: stop_code ( length ) integer ( c_int ), parameter :: error_occured = 1 write ( error_unit , * ) c_f_string ( stop_code , length ) flush error_unit call prif_error_stop_integer ( error_occured ) end subroutine pure subroutine prif_error_stop_integer ( stop_code ) !! stop all images and provide the stop_code, or 0 if not present, as the process exit status integer , intent ( in ), optional :: stop_code interface pure subroutine caf_error_stop_integer_c ( stop_code ) bind ( C , name = \"caf_error_stop_integer_c\" ) use , intrinsic :: iso_c_binding , only : c_int implicit none integer ( c_int ), intent ( in ) :: stop_code end subroutine end interface call caf_error_stop_integer_c ( stop_code ) end subroutine subroutine inner_caf_error_stop_integer ( stop_code ) bind ( C , name = \"inner_caf_error_stop_integer\" ) integer , intent ( in ), optional :: stop_code integer exit_code if (. not . present ( stop_code )) then call caf_decaffeinate ( exit_code = 1 ) else if ( stop_code == 0 ) then write ( error_unit ) stop_code flush error_unit exit_code = 1 else exit_code = stop_code end if call caf_decaffeinate ( exit_code ) ! does not return end subroutine pure function f_c_string ( f_string ) result ( c_string ) character ( len =* ), intent ( in ) :: f_string character ( len = 1 , kind = c_char ) :: c_string ( len ( f_string )) integer :: i do concurrent ( i = 1 : len ( f_string )) c_string ( i ) = f_string ( i : i ) end do end function pure function c_f_string ( c_string , length ) result ( f_string ) integer ( c_int ), intent ( in ) :: length character ( len = 1 , kind = c_char ), intent ( in ) :: c_string ( length ) character ( len = length ) :: f_string integer :: i do concurrent ( i = 1 : length ) f_string ( i : i ) = c_string ( i ) end do end function module procedure prif_fail_image call unimplemented ( \"prif_fail_image\" ) end procedure end submodule program_termination_s","tags":"","loc":"sourcefile/program_termination_s.f90.html"},{"title":"coarray_queries_s.f90 – Caffeine","text":"This file depends on sourcefile~~coarray_queries_s.f90~~EfferentGraph sourcefile~coarray_queries_s.f90 coarray_queries_s.f90 sourcefile~prif_private_s.f90 prif_private_s.f90 sourcefile~coarray_queries_s.f90->sourcefile~prif_private_s.f90 sourcefile~prif.f90 prif.f90 sourcefile~prif_private_s.f90->sourcefile~prif.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules coarray_queries_s Source Code coarray_queries_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( prif : prif_private_s ) coarray_queries_s implicit none contains module procedure prif_lcobound_with_dim call unimplemented ( \"prif_lcobound_with_dim\" ) end procedure module procedure prif_lcobound_no_dim call unimplemented ( \"prif_lcobound_no_dim\" ) end procedure module procedure prif_ucobound_with_dim call unimplemented ( \"prif_ucobound_with_dim\" ) end procedure module procedure prif_ucobound_no_dim call unimplemented ( \"prif_ucobound_no_dim\" ) end procedure module procedure prif_coshape call unimplemented ( \"prif_coshape\" ) end procedure module procedure prif_image_index integer :: dim , i integer ( c_int ) :: prior_size , num_img logical :: invalid_cosubscripts invalid_cosubscripts = . false . check_subscripts : do i = 1 , size ( sub ) if ( sub ( i ) . lt . coarray_handle % info % lcobounds ( i ) . or . sub ( i ) . gt . coarray_handle % info % ucobounds ( i )) then invalid_cosubscripts = . true . exit check_subscripts end if end do check_subscripts if (. not . invalid_cosubscripts ) then image_index = 1 + sub ( 1 ) - coarray_handle % info % lcobounds ( 1 ) prior_size = 1 ! Future work: values of prior_size are invariant across calls w/ the same coarray_handle !  We could store them in the coarray metadata at allocation rather than redundantly ! computing them here, which would accelerate calls with corank > 1 by removing ! corank multiply/add operations and the loop-carried dependence do dim = 2 , size ( sub ) prior_size = prior_size * ( coarray_handle % info % ucobounds ( dim - 1 ) - coarray_handle % info % lcobounds ( dim - 1 ) + 1 ) image_index = image_index + ( sub ( dim ) - coarray_handle % info % lcobounds ( dim )) * prior_size end do end if call prif_num_images ( num_images = num_img ) if ( invalid_cosubscripts . or . image_index . gt . num_img ) then image_index = 0 end if end procedure module procedure prif_image_index_with_team call unimplemented ( \"prif_image_index_with_team\" ) end procedure module procedure prif_image_index_with_team_number call unimplemented ( \"prif_image_index_with_team_number\" ) end procedure end submodule coarray_queries_s","tags":"","loc":"sourcefile/coarray_queries_s.f90.html"},{"title":"atomic_s.f90 – Caffeine","text":"This file depends on sourcefile~~atomic_s.f90~~EfferentGraph sourcefile~atomic_s.f90 atomic_s.f90 sourcefile~prif_private_s.f90 prif_private_s.f90 sourcefile~atomic_s.f90->sourcefile~prif_private_s.f90 sourcefile~prif.f90 prif.f90 sourcefile~prif_private_s.f90->sourcefile~prif.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules atomic_s Source Code atomic_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( prif : prif_private_s ) atomic_s implicit none contains module procedure prif_atomic_add call unimplemented ( \"prif_atomic_add\" ) end procedure module procedure prif_atomic_add_indirect call unimplemented ( \"prif_atomic_add_indirect\" ) end procedure module procedure prif_atomic_and call unimplemented ( \"prif_atomic_and\" ) end procedure module procedure prif_atomic_and_indirect call unimplemented ( \"prif_atomic_and_indirect\" ) end procedure module procedure prif_atomic_or call unimplemented ( \"prif_atomic_or\" ) end procedure module procedure prif_atomic_or_indirect call unimplemented ( \"prif_atomic_or_indirect\" ) end procedure module procedure prif_atomic_xor call unimplemented ( \"prif_atomic_xor\" ) end procedure module procedure prif_atomic_xor_indirect call unimplemented ( \"prif_atomic_xor_indirect\" ) end procedure module procedure prif_atomic_cas_int call unimplemented ( \"prif_atomic_cas_int\" ) end procedure module procedure prif_atomic_cas_int_indirect call unimplemented ( \"prif_atomic_cas_int_indirect\" ) end procedure module procedure prif_atomic_cas_logical call unimplemented ( \"prif_atomic_cas_logical\" ) end procedure module procedure prif_atomic_cas_logical_indirect call unimplemented ( \"prif_atomic_cas_logical_indirect\" ) end procedure module procedure prif_atomic_fetch_add call unimplemented ( \"prif_atomic_fetch_add\" ) end procedure module procedure prif_atomic_fetch_add_indirect call unimplemented ( \"prif_atomic_fetch_add_indirect\" ) end procedure module procedure prif_atomic_fetch_and call unimplemented ( \"prif_atomic_fetch_and\" ) end procedure module procedure prif_atomic_fetch_and_indirect call unimplemented ( \"prif_atomic_fetch_and_indirect\" ) end procedure module procedure prif_atomic_fetch_or call unimplemented ( \"prif_atomic_fetch_or\" ) end procedure module procedure prif_atomic_fetch_or_indirect call unimplemented ( \"prif_atomic_fetch_or_indirect\" ) end procedure module procedure prif_atomic_fetch_xor call unimplemented ( \"prif_atomic_fetch_xor\" ) end procedure module procedure prif_atomic_fetch_xor_indirect call unimplemented ( \"prif_atomic_fetch_xor_indirect\" ) end procedure module procedure prif_atomic_define_int call unimplemented ( \"prif_atomic_define_int\" ) end procedure module procedure prif_atomic_define_int_indirect call unimplemented ( \"prif_atomic_define_int_indirect\" ) end procedure module procedure prif_atomic_define_logical call unimplemented ( \"prif_atomic_define_logical\" ) end procedure module procedure prif_atomic_define_logical_indirect call unimplemented ( \"prif_atomic_define_logical_indirect\" ) end procedure module procedure prif_atomic_ref_int call unimplemented ( \"prif_atomic_ref_int\" ) end procedure module procedure prif_atomic_ref_int_indirect call unimplemented ( \"prif_atomic_ref_int_indirect\" ) end procedure module procedure prif_atomic_ref_logical call unimplemented ( \"prif_atomic_ref_logical\" ) end procedure module procedure prif_atomic_ref_logical_indirect call unimplemented ( \"prif_atomic_ref_logical_indirect\" ) end procedure end submodule atomic_s","tags":"","loc":"sourcefile/atomic_s.f90.html"},{"title":"prif_queries_s.f90 – Caffeine","text":"This file depends on sourcefile~~prif_queries_s.f90~~EfferentGraph sourcefile~prif_queries_s.f90 prif_queries_s.f90 sourcefile~prif_private_s.f90 prif_private_s.f90 sourcefile~prif_queries_s.f90->sourcefile~prif_private_s.f90 sourcefile~prif.f90 prif.f90 sourcefile~prif_private_s.f90->sourcefile~prif.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules prif_queries_s Source Code prif_queries_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( prif : prif_private_s ) prif_queries_s implicit none contains module procedure prif_set_context_data call unimplemented ( \"prif_set_context_data\" ) end procedure module procedure prif_get_context_data call unimplemented ( \"prif_get_context_data\" ) end procedure module procedure prif_size_bytes call unimplemented ( \"prif_size_bytes\" ) end procedure end submodule prif_queries_s","tags":"","loc":"sourcefile/prif_queries_s.f90.html"},{"title":"teams_s.f90 – Caffeine","text":"This file depends on sourcefile~~teams_s.f90~~EfferentGraph sourcefile~teams_s.f90 teams_s.f90 sourcefile~prif_private_s.f90 prif_private_s.f90 sourcefile~teams_s.f90->sourcefile~prif_private_s.f90 sourcefile~prif.f90 prif.f90 sourcefile~prif_private_s.f90->sourcefile~prif.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules teams_s Source Code teams_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( prif : prif_private_s ) teams_s implicit none contains module procedure prif_change_team call unimplemented ( \"prif_change_team\" ) end procedure module procedure prif_end_team call unimplemented ( \"prif_end_team\" ) end procedure module procedure prif_form_team call unimplemented ( \"prif_form_team\" ) end procedure module procedure prif_get_team call unimplemented ( \"prif_get_team\" ) end procedure module procedure prif_team_number call unimplemented ( \"prif_team_number\" ) end procedure end submodule","tags":"","loc":"sourcefile/teams_s.f90.html"},{"title":"co_max_s.f90 – Caffeine","text":"This file depends on sourcefile~~co_max_s.f90~~EfferentGraph sourcefile~co_max_s.f90 co_max_s.f90 sourcefile~prif_private_s.f90 prif_private_s.f90 sourcefile~co_max_s.f90->sourcefile~prif_private_s.f90 sourcefile~prif.f90 prif.f90 sourcefile~prif_private_s.f90->sourcefile~prif.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules co_max_s Source Code co_max_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( prif : prif_private_s ) co_max_s use iso_c_binding , only : c_funloc implicit none contains module procedure prif_co_max if ( present ( stat )) stat = 0 if ( caf_numeric_type ( a )) then call caf_co_max ( & a , optional_value ( result_image ), int ( product ( shape ( a )), c_size_t ), current_team % info % gex_team ) else if ( caf_is_f_string ( a )) then call prif_co_reduce ( a , c_funloc ( reverse_alphabetize ), optional_value ( result_image ), stat , errmsg , errmsg_alloc ) else call prif_error_stop (. false . _ c_bool , stop_code_char = \"caf_co_max: unsupported type\" ) end if contains function reverse_alphabetize ( lhs , rhs ) result ( last_alphabetically ) character ( len =* ), intent ( in ) :: lhs , rhs character ( len = :), allocatable :: last_alphabetically call assert ( len ( lhs ) == len ( rhs ), \"caf_co_max: LHS/RHS length match\" , lhs // \" , \" // rhs ) last_alphabetically = max ( lhs , rhs ) end function end procedure end submodule co_max_s","tags":"","loc":"sourcefile/co_max_s.f90.html"},{"title":"co_broadcast_s.f90 – Caffeine","text":"This file depends on sourcefile~~co_broadcast_s.f90~~EfferentGraph sourcefile~co_broadcast_s.f90 co_broadcast_s.f90 sourcefile~prif_private_s.f90 prif_private_s.f90 sourcefile~co_broadcast_s.f90->sourcefile~prif_private_s.f90 sourcefile~prif.f90 prif.f90 sourcefile~prif_private_s.f90->sourcefile~prif.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules co_broadcast_s Source Code co_broadcast_s.f90 Source Code submodule ( prif : prif_private_s ) co_broadcast_s implicit none contains module procedure prif_co_broadcast if ( present ( stat )) stat = 0 call caf_co_broadcast ( a , source_image , product ( shape ( a )), current_team % info % gex_team ) ! With a compliant Fortran 2018 compiler, pass in c_sizeof(a) as the `Nelem` argument ! and eliminate the calculation of num_elements*sizeof(a) in caffeine.c. end procedure end submodule co_broadcast_s","tags":"","loc":"sourcefile/co_broadcast_s.f90.html"},{"title":"co_min_s.f90 – Caffeine","text":"This file depends on sourcefile~~co_min_s.f90~~EfferentGraph sourcefile~co_min_s.f90 co_min_s.f90 sourcefile~prif_private_s.f90 prif_private_s.f90 sourcefile~co_min_s.f90->sourcefile~prif_private_s.f90 sourcefile~prif.f90 prif.f90 sourcefile~prif_private_s.f90->sourcefile~prif.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules co_min_s Source Code co_min_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( prif : prif_private_s ) co_min_s use iso_c_binding , only : c_funloc implicit none contains module procedure prif_co_min if ( present ( stat )) stat = 0 if ( caf_numeric_type ( a )) then call caf_co_min ( & a , optional_value ( result_image ), int ( product ( shape ( a )), c_size_t ), current_team % info % gex_team ) else if ( caf_is_f_string ( a )) then call prif_co_reduce ( a , c_funloc ( alphabetize ), optional_value ( result_image ), stat , errmsg , errmsg_alloc ) else call prif_error_stop (. false . _ c_bool , stop_code_char = \"prif_co_min: unsupported type\" ) end if contains function alphabetize ( lhs , rhs ) result ( first_alphabetically ) character ( len =* ), intent ( in ) :: lhs , rhs character ( len = :), allocatable :: first_alphabetically call assert ( len ( lhs ) == len ( rhs ), \"prif_co_min: LHS/RHS length match\" , lhs // \" , \" // rhs ) first_alphabetically = min ( lhs , rhs ) end function end procedure end submodule co_min_s","tags":"","loc":"sourcefile/co_min_s.f90.html"},{"title":"co_reduce_s.f90 – Caffeine","text":"This file depends on sourcefile~~co_reduce_s.f90~~EfferentGraph sourcefile~co_reduce_s.f90 co_reduce_s.f90 sourcefile~prif_private_s.f90 prif_private_s.f90 sourcefile~co_reduce_s.f90->sourcefile~prif_private_s.f90 sourcefile~prif.f90 prif.f90 sourcefile~prif_private_s.f90->sourcefile~prif.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules co_reduce_s Source Code co_reduce_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( prif : prif_private_s ) co_reduce_s use iso_c_binding , only : & c_loc , c_null_ptr , c_funloc , c_associated , c_f_pointer , c_f_procpointer , c_char , c_int64_t , c_double , & c_float , c_int32_t implicit none character ( kind = c_char , len = 5 ), parameter :: dummy = \"     \" abstract interface pure function c_int32_t_operation ( lhs , rhs ) result ( lhs_op_rhs ) import c_int32_t implicit none integer ( c_int32_t ), intent ( in ) :: lhs , rhs integer ( c_int32_t ) lhs_op_rhs end function pure function c_int64_t_operation ( lhs , rhs ) result ( lhs_op_rhs ) import c_int64_t implicit none integer ( c_int64_t ), intent ( in ) :: lhs , rhs integer ( c_int64_t ) lhs_op_rhs end function pure function c_float_operation ( lhs , rhs ) result ( lhs_op_rhs ) import c_float implicit none real ( c_float ), intent ( in ) :: lhs , rhs real ( c_float ) lhs_op_rhs end function pure function c_double_operation ( lhs , rhs ) result ( lhs_op_rhs ) import c_double implicit none real ( c_double ), intent ( in ) :: lhs , rhs real ( c_double ) lhs_op_rhs end function pure function c_bool_operation ( lhs , rhs ) result ( lhs_op_rhs ) import c_bool implicit none logical ( c_bool ), intent ( in ) :: lhs , rhs logical ( c_bool ) lhs_op_rhs end function function c_char_operation ( lhs , rhs ) result ( lhs_op_rhs ) import c_char implicit none character ( kind = c_char , len =* ), intent ( in ) :: lhs , rhs character ( kind = c_char , len = :), allocatable :: lhs_op_rhs end function pure function c_float_complex_operation ( lhs , rhs ) result ( lhs_op_rhs ) import c_float implicit none complex ( c_float ), intent ( in ) :: lhs , rhs complex ( c_float ) lhs_op_rhs end function pure function c_double_complex_operation ( lhs , rhs ) result ( lhs_op_rhs ) import c_double implicit none complex ( c_double ), intent ( in ) :: lhs , rhs complex ( c_double ) lhs_op_rhs end function end interface contains module procedure prif_co_reduce procedure ( c_int32_t_operation ), pointer :: int32_op => null () procedure ( c_int64_t_operation ), pointer :: int64_op => null () procedure ( c_float_operation ), pointer :: float_op => null () procedure ( c_double_operation ), pointer :: double_op => null () procedure ( c_bool_operation ), pointer :: bool_op => null () procedure ( c_char_operation ), pointer :: char_op => null () procedure ( c_float_complex_operation ), pointer :: float_complex_op => null () procedure ( c_double_complex_operation ), pointer :: double_complex_op => null () if ( present ( stat )) stat = 0 call assert ( c_associated ( operation ), \"caf_co_reduce: c_associated(operation)\" ) if ( caf_same_cfi_type ( a , 0 )) then call c_f_procpointer ( operation , int32_op ) call caf_co_reduce ( a , optional_value ( result_image ), & int ( product ( shape ( a )), c_size_t ), c_funloc ( Coll_ReduceSub_c_int32_t ), c_null_ptr , current_team % info % gex_team ) else if ( caf_same_cfi_type ( a , 0_c_int64_t )) then call c_f_procpointer ( operation , int64_op ) call caf_co_reduce ( a , optional_value ( result_image ), & int ( product ( shape ( a )), c_size_t ), c_funloc ( Coll_ReduceSub_c_int64_t ), c_null_ptr , current_team % info % gex_team ) else if ( caf_same_cfi_type ( a , 1._c_double )) then call c_f_procpointer ( operation , double_op ) call caf_co_reduce ( a , optional_value ( result_image ), & int ( product ( shape ( a )), c_size_t ), c_funloc ( Coll_ReduceSub_c_double ), c_null_ptr , current_team % info % gex_team ) else if ( caf_same_cfi_type ( a , 1._c_float )) then call c_f_procpointer ( operation , float_op ) call caf_co_reduce ( a , optional_value ( result_image ), & int ( product ( shape ( a )), c_size_t ), c_funloc ( Coll_ReduceSub_c_float ), c_null_ptr , current_team % info % gex_team ) else if ( caf_same_cfi_type ( a , . true . _ c_bool )) then call c_f_procpointer ( operation , bool_op ) call caf_co_reduce ( a , optional_value ( result_image ), & int ( product ( shape ( a )), c_size_t ), c_funloc ( Coll_ReduceSub_c_bool ), c_null_ptr , current_team % info % gex_team ) else if ( caf_is_f_string ( a )) then block integer ( c_size_t ), target :: len_a len_a = caf_elem_len ( a ) call c_f_procpointer ( operation , char_op ) call caf_co_reduce ( a , optional_value ( result_image ), & int ( product ( shape ( a )), c_size_t ), c_funloc ( Coll_ReduceSub_c_char ), c_loc ( len_a ), current_team % info % gex_team ) end block else if ( caf_same_cfi_type ( a , ( 0._c_float , 0._c_float ))) then call c_f_procpointer ( operation , float_complex_op ) call caf_co_reduce ( a , optional_value ( result_image ), & int ( product ( shape ( a )), c_size_t ), c_funloc ( Coll_ReduceSub_c_float_complex ), c_null_ptr , current_team % info % gex_team ) else if ( caf_same_cfi_type ( a , ( 0._c_double , 0._c_double ))) then call c_f_procpointer ( operation , double_complex_op ) call caf_co_reduce ( a , optional_value ( result_image ), & int ( product ( shape ( a )), c_size_t ), c_funloc ( Coll_ReduceSub_c_double_complex ), c_null_ptr , current_team % info % gex_team ) else call prif_error_stop (. false . _ c_bool , stop_code_char = \"caf_co_reduce: unsupported type\" ) end if contains subroutine Coll_ReduceSub_c_int32_t ( arg1 , arg2_and_out , count , cdata ) bind ( C ) type ( c_ptr ), value :: arg1 !! \"Left\" operands type ( c_ptr ), value :: arg2_and_out !! \"Right\" operands and result integer ( c_size_t ), value :: count !! Operand count type ( c_ptr ), value :: cdata !! Client data integer ( c_int32_t ), pointer :: lhs (:) => null (), rhs_and_result (:) => null () integer ( c_size_t ) i call assert ( all ([ c_associated ( arg1 ), c_associated ( arg2_and_out )]), \"Coll_ReduceSub_c_int32_t: operands associated\" ) call c_f_pointer ( arg1 , lhs , [ count ]) call c_f_pointer ( arg2_and_out , rhs_and_result , [ count ]) do concurrent ( i = 1 : count ) rhs_and_result ( i ) = int32_op ( lhs ( i ), rhs_and_result ( i )) end do end subroutine subroutine Coll_ReduceSub_c_int64_t ( arg1 , arg2_and_out , count , cdata ) bind ( C ) type ( c_ptr ), value :: arg1 !! \"Left\" operands type ( c_ptr ), value :: arg2_and_out !! \"Right\" operands and result integer ( c_size_t ), value :: count !! Operand count type ( c_ptr ), value :: cdata !! Client data integer ( c_int64_t ), pointer :: lhs (:) => null (), rhs_and_result (:) => null () integer ( c_size_t ) i call assert ( all ([ c_associated ( arg1 ), c_associated ( arg2_and_out )]), \"Coll_ReduceSub_c_int64_t: operands associated\" ) call c_f_pointer ( arg1 , lhs , [ count ]) call c_f_pointer ( arg2_and_out , rhs_and_result , [ count ]) do concurrent ( i = 1 : count ) rhs_and_result ( i ) = int64_op ( lhs ( i ), rhs_and_result ( i )) end do end subroutine subroutine Coll_ReduceSub_c_double ( arg1 , arg2_and_out , count , cdata ) bind ( C ) type ( c_ptr ), value :: arg1 !! \"Left\" operands type ( c_ptr ), value :: arg2_and_out !! \"Right\" operands and result integer ( c_size_t ), value :: count !! Operand count type ( c_ptr ), value :: cdata !! Client data real ( c_double ), pointer :: lhs (:) => null (), rhs_and_result (:) => null () integer ( c_size_t ) i call assert ( all ([ c_associated ( arg1 ), c_associated ( arg2_and_out )]), \"Coll_ReduceSub_c_double: operands associated\" ) call c_f_pointer ( arg1 , lhs , [ count ]) call c_f_pointer ( arg2_and_out , rhs_and_result , [ count ]) do concurrent ( i = 1 : count ) rhs_and_result ( i ) = double_op ( lhs ( i ), rhs_and_result ( i )) end do end subroutine subroutine Coll_ReduceSub_c_float ( arg1 , arg2_and_out , count , cdata ) bind ( C ) type ( c_ptr ), value :: arg1 !! \"Left\" operands type ( c_ptr ), value :: arg2_and_out !! \"Right\" operands and result integer ( c_size_t ), value :: count !! Operand count type ( c_ptr ), value :: cdata !! Client data real ( c_float ), pointer :: lhs (:) => null (), rhs_and_result (:) => null () integer ( c_size_t ) i call assert ( all ([ c_associated ( arg1 ), c_associated ( arg2_and_out )]), \"Coll_ReduceSub_c_float: operands associated\" ) call c_f_pointer ( arg1 , lhs , [ count ]) call c_f_pointer ( arg2_and_out , rhs_and_result , [ count ]) do concurrent ( i = 1 : count ) rhs_and_result ( i ) = float_op ( lhs ( i ), rhs_and_result ( i )) end do end subroutine subroutine Coll_ReduceSub_c_double_complex ( arg1 , arg2_and_out , count , cdata ) bind ( C ) type ( c_ptr ), value :: arg1 !! \"Left\" operands type ( c_ptr ), value :: arg2_and_out !! \"Right\" operands and result integer ( c_size_t ), value :: count !! Operand count type ( c_ptr ), value :: cdata !! Client data complex ( c_double ), pointer :: lhs (:) => null (), rhs_and_result (:) => null () integer ( c_size_t ) i call assert ( all ([ c_associated ( arg1 ), c_associated ( arg2_and_out )]), \"Coll_ReduceSub_c_dobule_complex: operands associated\" ) call c_f_pointer ( arg1 , lhs , [ count ]) call c_f_pointer ( arg2_and_out , rhs_and_result , [ count ]) do concurrent ( i = 1 : count ) rhs_and_result ( i ) = double_complex_op ( lhs ( i ), rhs_and_result ( i )) end do end subroutine subroutine Coll_ReduceSub_c_float_complex ( arg1 , arg2_and_out , count , cdata ) bind ( C ) type ( c_ptr ), value :: arg1 !! \"Left\" operands type ( c_ptr ), value :: arg2_and_out !! \"Right\" operands and result integer ( c_size_t ), value :: count !! Operand count type ( c_ptr ), value :: cdata !! Client data complex ( c_float ), pointer :: lhs (:) => null (), rhs_and_result (:) => null () integer ( c_size_t ) i call assert ( all ([ c_associated ( arg1 ), c_associated ( arg2_and_out )]), \"Coll_ReduceSub_c_float_complex: operands associated\" ) call c_f_pointer ( arg1 , lhs , [ count ]) call c_f_pointer ( arg2_and_out , rhs_and_result , [ count ]) do concurrent ( i = 1 : count ) rhs_and_result ( i ) = float_complex_op ( lhs ( i ), rhs_and_result ( i )) end do end subroutine subroutine Coll_ReduceSub_c_bool ( arg1 , arg2_and_out , count , cdata ) bind ( C ) type ( c_ptr ), value :: arg1 !! \"Left\" operands type ( c_ptr ), value :: arg2_and_out !! \"Right\" operands and result integer ( c_size_t ), value :: count !! Operand count type ( c_ptr ), value :: cdata !! Client data logical ( c_bool ), pointer :: lhs (:) => null (), rhs_and_result (:) => null () integer ( c_size_t ) i call assert ( all ([ c_associated ( arg1 ), c_associated ( arg2_and_out )]), \"Coll_ReduceSub_c_bool: operands associated\" ) call c_f_pointer ( arg1 , lhs , [ count ]) call c_f_pointer ( arg2_and_out , rhs_and_result , [ count ]) do concurrent ( i = 1 : count ) rhs_and_result ( i ) = bool_op ( lhs ( i ), rhs_and_result ( i )) end do end subroutine subroutine Coll_ReduceSub_c_char ( arg1 , arg2_and_out , count , cdata ) bind ( C ) type ( c_ptr ), value :: arg1 !! \"Left\" operands type ( c_ptr ), value :: arg2_and_out !! \"Right\" operands and result integer ( c_size_t ), value :: count !! Operand count type ( c_ptr ), value :: cdata !! Client data character ( kind = c_char , len = :), allocatable , target :: prototype (:) character ( kind = c_char , len = :), pointer :: lhs (:) => null (), rhs_and_result (:) => null () integer ( c_int ), pointer :: arglen => null () associate ( c_associated_args => [ c_associated ( arg1 ), c_associated ( arg2_and_out ), c_associated ( cdata )]) call assert ( all ( c_associated_args ), \"Coll_ReduceSub_c_char: all(c_associated_args)\" ) end associate call c_f_pointer ( cdata , arglen ) allocate ( character ( kind = c_char , len = arglen ) :: prototype ( count )) lhs => prototype ! set string length rhs_and_result => prototype ! set string length call c_f_pointer ( arg1 , lhs , [ count ]) call c_f_pointer ( arg2_and_out , rhs_and_result , [ count ]) block integer ( c_size_t ) i do i = 1 , count rhs_and_result ( i ) = char_op ( lhs ( i ), rhs_and_result ( i )) end do end block end subroutine end procedure end submodule co_reduce_s","tags":"","loc":"sourcefile/co_reduce_s.f90.html"},{"title":"co_sum_s.f90 – Caffeine","text":"This file depends on sourcefile~~co_sum_s.f90~~EfferentGraph sourcefile~co_sum_s.f90 co_sum_s.f90 sourcefile~prif_private_s.f90 prif_private_s.f90 sourcefile~co_sum_s.f90->sourcefile~prif_private_s.f90 sourcefile~prif.f90 prif.f90 sourcefile~prif_private_s.f90->sourcefile~prif.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules co_sum_s Source Code co_sum_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( prif : prif_private_s ) co_sum_s implicit none contains module procedure prif_co_sum if ( present ( stat )) stat = 0 call caf_co_sum ( & a , optional_value ( result_image ), int ( product ( shape ( a )), c_size_t ), current_team % info % gex_team ) end procedure end submodule co_sum_s","tags":"","loc":"sourcefile/co_sum_s.f90.html"}]}