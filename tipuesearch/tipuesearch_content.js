var tipuesearch = {"pages":[{"title":" Caffeine ","text":"Caffeine Documentation Philosophy and Motivations Organization Warning Caffeine is early-stage developmental software with evolving interfaces and functionality. Documentation Welcome to the Caffeine documentation. FORD generates this documentation from inline comments, static analysis, and Markdown files.\nThe target audience for Caffeine is Fortran compiler developers.\nWith a fully Caffeinated compiler, Fortran programmers can produce parallel executable files from standard Fortran with no need to directly reference Caffeine or any lower-level communication software. Philosophy and Motivations Write as much of Caffeine as possible in Fortran: Writing the runtime library in the language of the users increases the likelihood of community contributions. Writing the runtime library in Fortran obviates the need to directly manipulate compiler descriptors throughout much of Caffeine and allows Caffeine's underlying C layer to receive the Fortran-standard CFI_cdesc_t descriptor, which will make it easier to support multiple compilers. Writing most of Caffeine in Fortran offers the potential exploiting Fortran's rich array syntax, concurrent loop iterations ( do concurrent ), pure procedures and related features. Currently, these play a role only in one place: C callbacks to user-provided, pure functions that can be invoked inside a do concurrent block during the execution of co_reduce . Define an interface that remains agnostic about the back-end communication library: Once multiple back ends are supported, Fortran developers would not have to rewrite or even recompile their programs in order to change back ends. Switching from GASNet-EX to MPI, for example, could become a link-time decision. Organization The tree below depicts a skeletal overview of Caffeine's directory structure. build / - build directory created by running ./ install . sh |-- run - fpm . sh - shell script for rebuilding Caffeine or running examples or tests |-- * - temporary build files example / |-- hello . f90 - a Caffeinated \"Hello, world!\" program |-- support - test / - programs invoked by the test suite src / |-- caffeine_m . f90 - the Big Kahuna : one module that exports all Caffeine functionality |-- caffeine / |-- * _m . f90 - modules containing procedure interface bodies |-- * _s . f90 - submodules containing procedure definitions |-- *. c - thin C functions wrapping networking middleware |-- *. h - corresponding C header files |-- * _h_m . f90 - a Fortran translation of a C header file |-- collective_subroutines / |-- co_ * _s . f90 - submodules containing procedure definitions test / |-- main . f90 - test suite driver created by make_vegetable_driver |-- * _test . f90 - unit tests Developer Info Lawrence Berkeley National Laboratory A U.S. Department of Energy National Laboratory Managed by the University of California","tags":"home","loc":"index.html"},{"title":"prif_notify_type – Caffeine ","text":"type, public :: prif_notify_type Contents None","tags":"","loc":"type/prif_notify_type.html"},{"title":"prif_coarray_handle – Caffeine ","text":"type, public :: prif_coarray_handle Inherits type~~prif_coarray_handle~~InheritsGraph type~prif_coarray_handle prif_coarray_handle c_ptr c_ptr type~prif_coarray_handle->c_ptr ptr Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\n    extends. Dashed arrows point from a derived type to the other\n    types it contains as a components, with a label listing the name(s) of\n    said component(s). Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables ptr Components Type Visibility Attributes Name Initial type(c_ptr), public :: ptr","tags":"","loc":"type/prif_coarray_handle.html"},{"title":"prif_lock_type – Caffeine ","text":"type, public :: prif_lock_type Contents None","tags":"","loc":"type/prif_lock_type.html"},{"title":"prif_team_type – Caffeine ","text":"type, public :: prif_team_type Inherits type~~prif_team_type~~InheritsGraph type~prif_team_type prif_team_type c_ptr c_ptr type~prif_team_type->c_ptr team_ptr Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\n    extends. Dashed arrows point from a derived type to the other\n    types it contains as a components, with a label listing the name(s) of\n    said component(s). Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables team_ptr Components Type Visibility Attributes Name Initial type(c_ptr), private :: team_ptr","tags":"","loc":"type/prif_team_type.html"},{"title":"intrinsic_array_t – Caffeine ","text":"type, public, extends( characterizable_t ) :: intrinsic_array_t Inherits type~~intrinsic_array_t~~InheritsGraph type~intrinsic_array_t intrinsic_array_t type~characterizable_t characterizable_t type~intrinsic_array_t->type~characterizable_t Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\n    extends. Dashed arrows point from a derived type to the other\n    types it contains as a components, with a label listing the name(s) of\n    said component(s). Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables complex_1d complex_2d complex_3d complex_double_1d complex_double_2d complex_double_3d double_precision_1d double_precision_2d double_precision_3d integer_1d integer_2d integer_3d logical_1d logical_2d logical_3d real_1d real_2d real_3d Constructor intrinsic_array_t Type-Bound Procedures as_character Components Type Visibility Attributes Name Initial complex, private, allocatable :: complex_1d (:) complex, private, allocatable :: complex_2d (:,:) complex, private, allocatable :: complex_3d (:,:,:) complex(kind=kind(1.d0)), private, allocatable :: complex_double_1d (:) complex(kind=kind(1.d0)), private, allocatable :: complex_double_2d (:,:) complex(kind=kind(1.d0)), private, allocatable :: complex_double_3d (:,:,:) double precision, private, allocatable :: double_precision_1d (:) double precision, private, allocatable :: double_precision_2d (:,:) double precision, private, allocatable :: double_precision_3d (:,:,:) integer, private, allocatable :: integer_1d (:) integer, private, allocatable :: integer_2d (:,:) integer, private, allocatable :: integer_3d (:,:,:) logical, private, allocatable :: logical_1d (:) logical, private, allocatable :: logical_2d (:,:) logical, private, allocatable :: logical_3d (:,:,:) real, private, allocatable :: real_1d (:) real, private, allocatable :: real_2d (:,:) real, private, allocatable :: real_3d (:,:,:) Constructor public interface intrinsic_array_t private pure module function construct(array) result(intrinsic_array) Arguments Type Intent Optional Attributes Name class(*), intent(in) :: array (..) Return Value type( intrinsic_array_t ) Type-Bound Procedures procedure, public :: as_character interface private pure module module function as_character(self) result(character_self) Implementation → Arguments Type Intent Optional Attributes Name class( intrinsic_array_t ), intent(in) :: self Return Value character(len=:),allocatable","tags":"","loc":"type/intrinsic_array_t.html"},{"title":"characterizable_t – Caffeine ","text":"type, public, abstract :: characterizable_t Inherited by type~~characterizable_t~~InheritedByGraph type~characterizable_t characterizable_t type~intrinsic_array_t intrinsic_array_t type~intrinsic_array_t->type~characterizable_t Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\n    extends. Dashed arrows point from a derived type to the other\n    types it contains as a components, with a label listing the name(s) of\n    said component(s). Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Type-Bound Procedures as_character Type-Bound Procedures procedure( as_character_i ), public, deferred :: as_character pure function as_character_i(self) result(character_self) Prototype Arguments Type Intent Optional Attributes Name class( characterizable_t ), intent(in) :: self Return Value character(len=:),allocatable","tags":"","loc":"type/characterizable_t.html"},{"title":"c_bool_operation – Caffeine","text":"abstract interface public pure function c_bool_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name logical(kind=c_bool), intent(in) :: lhs logical(kind=c_bool), intent(in) :: rhs Return Value logical(kind=c_bool)","tags":"","loc":"interface/c_bool_operation.html"},{"title":"c_char_operation – Caffeine","text":"abstract interface public function c_char_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name character(kind=c_char,len=*), intent(in) :: lhs character(kind=c_char,len=*), intent(in) :: rhs Return Value character(kind=c_char,len=:),allocatable","tags":"","loc":"interface/c_char_operation.html"},{"title":"c_double_complex_operation – Caffeine","text":"abstract interface public pure function c_double_complex_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name complex(kind=c_double), intent(in) :: lhs complex(kind=c_double), intent(in) :: rhs Return Value complex(kind=c_double)","tags":"","loc":"interface/c_double_complex_operation.html"},{"title":"c_double_operation – Caffeine","text":"abstract interface public pure function c_double_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name real(kind=c_double), intent(in) :: lhs real(kind=c_double), intent(in) :: rhs Return Value real(kind=c_double)","tags":"","loc":"interface/c_double_operation.html"},{"title":"c_float_complex_operation – Caffeine","text":"abstract interface public pure function c_float_complex_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name complex(kind=c_float), intent(in) :: lhs complex(kind=c_float), intent(in) :: rhs Return Value complex(kind=c_float)","tags":"","loc":"interface/c_float_complex_operation.html"},{"title":"c_float_operation – Caffeine","text":"abstract interface public pure function c_float_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name real(kind=c_float), intent(in) :: lhs real(kind=c_float), intent(in) :: rhs Return Value real(kind=c_float)","tags":"","loc":"interface/c_float_operation.html"},{"title":"c_int32_t_operation – Caffeine","text":"abstract interface public pure function c_int32_t_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name integer(kind=c_int32_t), intent(in) :: lhs integer(kind=c_int32_t), intent(in) :: rhs Return Value integer(kind=c_int32_t)","tags":"","loc":"interface/c_int32_t_operation.html"},{"title":"c_int64_t_operation – Caffeine","text":"abstract interface public pure function c_int64_t_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name integer(kind=c_int64_t), intent(in) :: lhs integer(kind=c_int64_t), intent(in) :: rhs Return Value integer(kind=c_int64_t)","tags":"","loc":"interface/c_int64_t_operation.html"},{"title":"as_character_i – Caffeine","text":"abstract interface private pure function as_character_i(self) result(character_self) Arguments Type Intent Optional Attributes Name class( characterizable_t ), intent(in) :: self Return Value character(len=:),allocatable","tags":"","loc":"interface/as_character_i.html"},{"title":"prif_alias_create – Caffeine","text":"interface Calls interface~~prif_alias_create~~CallsGraph interface~prif_alias_create prif_alias_create proc~prif_alias_create prif_alias_create interface~prif_alias_create->proc~prif_alias_create Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_alias_create(source_handle, alias_co_lbounds, alias_co_ubounds, alias_handle) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: source_handle integer(kind=c_intmax_t), intent(in) :: alias_co_lbounds (:) integer(kind=c_intmax_t), intent(in) :: alias_co_ubounds (:) type( prif_coarray_handle ), intent(out) :: alias_handle","tags":"","loc":"interface/prif_alias_create.html"},{"title":"prif_alias_destroy – Caffeine","text":"interface Calls interface~~prif_alias_destroy~~CallsGraph interface~prif_alias_destroy prif_alias_destroy proc~prif_alias_destroy prif_alias_destroy interface~prif_alias_destroy->proc~prif_alias_destroy Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_alias_destroy(alias_handle) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: alias_handle","tags":"","loc":"interface/prif_alias_destroy.html"},{"title":"prif_failed_images – Caffeine","text":"interface Calls interface~~prif_failed_images~~CallsGraph interface~prif_failed_images prif_failed_images proc~prif_failed_images prif_failed_images interface~prif_failed_images->proc~prif_failed_images Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_failed_images(team, failed_images) Implementation → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in), optional :: team integer(kind=c_int), intent(out), allocatable :: failed_images (:)","tags":"","loc":"interface/prif_failed_images.html"},{"title":"prif_image_status – Caffeine","text":"interface Calls interface~~prif_image_status~~CallsGraph interface~prif_image_status prif_image_status proc~prif_image_status prif_image_status interface~prif_image_status->proc~prif_image_status Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public impure elemental module module subroutine prif_image_status(image, team, image_status) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image type( prif_team_type ), intent(in), optional :: team integer(kind=c_int), intent(out) :: image_status","tags":"","loc":"interface/prif_image_status.html"},{"title":"prif_num_images – Caffeine","text":"interface Calls interface~~prif_num_images~~CallsGraph interface~prif_num_images prif_num_images proc~prif_num_images prif_num_images interface~prif_num_images->proc~prif_num_images interface~caf_num_images caf_num_images proc~prif_num_images->interface~caf_num_images Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_num_images(team, team_number, image_count) Implementation → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in), optional :: team integer(kind=c_intmax_t), intent(in), optional :: team_number integer(kind=c_int), intent(out) :: image_count","tags":"","loc":"interface/prif_num_images.html"},{"title":"prif_stopped_images – Caffeine","text":"interface Calls interface~~prif_stopped_images~~CallsGraph interface~prif_stopped_images prif_stopped_images proc~prif_stopped_images prif_stopped_images interface~prif_stopped_images->proc~prif_stopped_images Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_stopped_images(team, stopped_images) Implementation → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in), optional :: team integer(kind=c_int), intent(out), allocatable :: stopped_images (:)","tags":"","loc":"interface/prif_stopped_images.html"},{"title":"prif_this_image – Caffeine","text":"public interface prif_this_image Contents Subroutines prif_this_image_no_coarray prif_this_image_with_coarray prif_this_image_with_dim Subroutines private module subroutine prif_this_image_no_coarray(team, image_index) Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in), optional :: team integer(kind=c_int), intent(out) :: image_index private module subroutine prif_this_image_with_coarray(coarray_handle, team, cosubscripts) Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle type( prif_team_type ), intent(in), optional :: team integer(kind=c_intmax_t), intent(out) :: cosubscripts (:) private module subroutine prif_this_image_with_dim(coarray_handle, dim, team, cosubscript) Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_int), intent(in) :: dim type( prif_team_type ), intent(in), optional :: team integer(kind=c_intmax_t), intent(out) :: cosubscript","tags":"","loc":"interface/prif_this_image.html"},{"title":"prif_critical – Caffeine","text":"interface Calls interface~~prif_critical~~CallsGraph interface~prif_critical prif_critical proc~prif_critical prif_critical interface~prif_critical->proc~prif_critical Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_critical(critical_coarray, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: critical_coarray integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_critical.html"},{"title":"prif_end_critical – Caffeine","text":"interface Calls interface~~prif_end_critical~~CallsGraph interface~prif_end_critical prif_end_critical proc~prif_end_critical prif_end_critical interface~prif_end_critical->proc~prif_end_critical Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_end_critical(critical_coarray) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: critical_coarray","tags":"","loc":"interface/prif_end_critical.html"},{"title":"prif_init – Caffeine","text":"interface Calls interface~~prif_init~~CallsGraph interface~prif_init prif_init proc~prif_init prif_init interface~prif_init->proc~prif_init interface~caf_caffeinate caf_caffeinate proc~prif_init->interface~caf_caffeinate interface~prif_sync_all prif_sync_all proc~prif_init->interface~prif_sync_all proc~prif_sync_all prif_sync_all interface~prif_sync_all->proc~prif_sync_all interface~caf_sync_all caf_sync_all proc~prif_sync_all->interface~caf_sync_all Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_init(exit_code) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(out) :: exit_code","tags":"","loc":"interface/prif_init.html"},{"title":"prif_notify_wait – Caffeine","text":"interface Calls interface~~prif_notify_wait~~CallsGraph interface~prif_notify_wait prif_notify_wait proc~prif_notify_wait prif_notify_wait interface~prif_notify_wait->proc~prif_notify_wait Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_notify_wait(notify_var_ptr, until_count, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in) :: notify_var_ptr integer(kind=c_intmax_t), intent(in), optional :: until_count integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_notify_wait.html"},{"title":"caf_allocate – Caffeine","text":"interface Called by interface~~caf_allocate~~CalledByGraph interface~caf_allocate caf_allocate proc~prif_allocate prif_allocate proc~prif_allocate->interface~caf_allocate interface~prif_allocate prif_allocate interface~prif_allocate->proc~prif_allocate Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public function caf_allocate(sz, corank, lcobounds, ucobounds, final_func, coarray_handle) result(ptr) bind(c) Arguments Type Intent Optional Attributes Name integer(kind=c_size_t), intent(in), value :: sz integer(kind=c_int), intent(in), value :: corank integer(kind=c_intmax_t), intent(in), dimension(:) :: lcobounds integer(kind=c_intmax_t), intent(in), dimension(:) :: ucobounds type(c_funptr), intent(in), value :: final_func type(c_ptr), intent(out) :: coarray_handle Return Value type(c_ptr)","tags":"","loc":"interface/caf_allocate.html"},{"title":"caf_caffeinate – Caffeine","text":"interface Called by interface~~caf_caffeinate~~CalledByGraph interface~caf_caffeinate caf_caffeinate proc~prif_init prif_init proc~prif_init->interface~caf_caffeinate interface~prif_init prif_init interface~prif_init->proc~prif_init Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public subroutine caf_caffeinate(argc, argv) bind(c) Arguments Type Intent Optional Attributes Name integer(kind=c_int), value :: argc type(c_ptr) :: argv (*) Description void c_caffeinate(int argc, char *argv[]);","tags":"","loc":"interface/caf_caffeinate.html"},{"title":"caf_co_broadcast – Caffeine","text":"interface Called by interface~~caf_co_broadcast~~CalledByGraph interface~caf_co_broadcast caf_co_broadcast proc~prif_co_broadcast prif_co_broadcast proc~prif_co_broadcast->interface~caf_co_broadcast interface~prif_co_broadcast prif_co_broadcast interface~prif_co_broadcast->proc~prif_co_broadcast Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public subroutine caf_co_broadcast(a, source_image, stat, nelem) bind(c) Arguments Type Intent Optional Attributes Name type(*) :: a (..) integer(kind=c_int), value :: source_image type(c_ptr), value :: stat integer(kind=c_int), value :: nelem Description void c_co_broadcast(CFI_cdesc_t * a_desc, int source_image, int* stat, int num_elements);","tags":"","loc":"interface/caf_co_broadcast.html"},{"title":"caf_co_max – Caffeine","text":"interface Called by interface~~caf_co_max~~CalledByGraph interface~caf_co_max caf_co_max proc~prif_co_max prif_co_max proc~prif_co_max->interface~caf_co_max interface~prif_co_max prif_co_max interface~prif_co_max->proc~prif_co_max Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public subroutine caf_co_max(a, result_image, c_loc_stat, c_loc_errmsg, num_elements) bind(c) Arguments Type Intent Optional Attributes Name type(*) :: a (..) integer(kind=c_int), value :: result_image type(c_ptr), value :: c_loc_stat type(c_ptr), value :: c_loc_errmsg integer(kind=c_size_t), value :: num_elements Description void c_co_max(CFI_cdesc_t a_desc, int result_image, int stat, char* errmsg, size_t num_elements);","tags":"","loc":"interface/caf_co_max.html"},{"title":"caf_co_min – Caffeine","text":"interface Called by interface~~caf_co_min~~CalledByGraph interface~caf_co_min caf_co_min proc~prif_co_min prif_co_min proc~prif_co_min->interface~caf_co_min interface~prif_co_min prif_co_min interface~prif_co_min->proc~prif_co_min Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public subroutine caf_co_min(a, result_image, c_loc_stat, c_loc_errmsg, num_elements) bind(c) Arguments Type Intent Optional Attributes Name type(*) :: a (..) integer(kind=c_int), value :: result_image type(c_ptr), value :: c_loc_stat type(c_ptr), value :: c_loc_errmsg integer(kind=c_size_t), value :: num_elements Description void c_co_min(CFI_cdesc_t a_desc, int result_image, int stat, char* errmsg, size_t num_elements);","tags":"","loc":"interface/caf_co_min.html"},{"title":"caf_co_reduce – Caffeine","text":"interface Called by interface~~caf_co_reduce~~CalledByGraph interface~caf_co_reduce caf_co_reduce proc~prif_co_reduce prif_co_reduce proc~prif_co_reduce->interface~caf_co_reduce interface~prif_co_reduce prif_co_reduce interface~prif_co_reduce->proc~prif_co_reduce proc~prif_co_max prif_co_max proc~prif_co_max->interface~prif_co_reduce proc~prif_co_min prif_co_min proc~prif_co_min->interface~prif_co_reduce interface~prif_co_max prif_co_max interface~prif_co_max->proc~prif_co_max interface~prif_co_min prif_co_min interface~prif_co_min->proc~prif_co_min Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public subroutine caf_co_reduce(a, result_image, c_loc_stat, c_loc_errmsg, num_elements, coll_reducesub, client_data) bind(c) Arguments Type Intent Optional Attributes Name type(*) :: a (..) integer(kind=c_int), value :: result_image type(c_ptr), value :: c_loc_stat type(c_ptr), value :: c_loc_errmsg integer(kind=c_size_t), value :: num_elements type(c_funptr), value :: coll_reducesub type(c_ptr), value :: client_data Description void caf_co_reduce(CFI_cdesc_t a_desc, int result_image, int stat, char errmsg, int num_elements, gex_Coll_ReduceFn_t user_op, void* client_data)","tags":"","loc":"interface/caf_co_reduce.html"},{"title":"caf_co_sum – Caffeine","text":"interface Called by interface~~caf_co_sum~~CalledByGraph interface~caf_co_sum caf_co_sum proc~prif_co_sum prif_co_sum proc~prif_co_sum->interface~caf_co_sum interface~prif_co_sum prif_co_sum interface~prif_co_sum->proc~prif_co_sum Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public subroutine caf_co_sum(a, result_image, c_loc_stat, c_loc_errmsg, num_elements) bind(c) Arguments Type Intent Optional Attributes Name type(*) :: a (..) integer(kind=c_int), value :: result_image type(c_ptr), value :: c_loc_stat type(c_ptr), value :: c_loc_errmsg integer(kind=c_size_t), value :: num_elements Description void c_co_sum(CFI_cdesc_t a_desc, int result_image, int stat, char* errmsg, size_t num_elements);","tags":"","loc":"interface/caf_co_sum.html"},{"title":"caf_decaffeinate – Caffeine","text":"interface Called by interface~~caf_decaffeinate~~CalledByGraph interface~caf_decaffeinate caf_decaffeinate proc~inner_caf_error_stop_integer inner_caf_error_stop_integer proc~inner_caf_error_stop_integer->interface~caf_decaffeinate proc~prif_stop_character prif_stop_character proc~prif_stop_character->interface~caf_decaffeinate proc~prif_stop_integer prif_stop_integer proc~prif_stop_integer->interface~caf_decaffeinate Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public subroutine caf_decaffeinate(exit_code) bind(c) Arguments Type Intent Optional Attributes Name integer(kind=c_int), value :: exit_code Description void c_decaffeinate();","tags":"","loc":"interface/caf_decaffeinate.html"},{"title":"caf_elem_len – Caffeine","text":"interface Called by interface~~caf_elem_len~~CalledByGraph interface~caf_elem_len caf_elem_len proc~prif_co_reduce prif_co_reduce proc~prif_co_reduce->interface~caf_elem_len interface~prif_co_reduce prif_co_reduce interface~prif_co_reduce->proc~prif_co_reduce proc~prif_co_max prif_co_max proc~prif_co_max->interface~prif_co_reduce proc~prif_co_min prif_co_min proc~prif_co_min->interface~prif_co_reduce interface~prif_co_max prif_co_max interface~prif_co_max->proc~prif_co_max interface~prif_co_min prif_co_min interface~prif_co_min->proc~prif_co_min Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public pure function caf_elem_len(a) result(a_elem_len) bind(c) Arguments Type Intent Optional Attributes Name type(*), intent(in) :: a (..) Return Value integer(kind=c_size_t),target Description size_t caf_elem_len(CFI_cdesc_t* a_desc);","tags":"","loc":"interface/caf_elem_len.html"},{"title":"caf_is_f_string – Caffeine","text":"interface Called by interface~~caf_is_f_string~~CalledByGraph interface~caf_is_f_string caf_is_f_string proc~prif_co_max prif_co_max proc~prif_co_max->interface~caf_is_f_string interface~prif_co_reduce prif_co_reduce proc~prif_co_max->interface~prif_co_reduce proc~prif_co_reduce prif_co_reduce proc~prif_co_reduce->interface~caf_is_f_string proc~prif_co_min prif_co_min proc~prif_co_min->interface~caf_is_f_string proc~prif_co_min->interface~prif_co_reduce interface~prif_co_max prif_co_max interface~prif_co_max->proc~prif_co_max interface~prif_co_reduce->proc~prif_co_reduce interface~prif_co_min prif_co_min interface~prif_co_min->proc~prif_co_min Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public pure function caf_is_f_string(a) bind(c) Arguments Type Intent Optional Attributes Name type(*), intent(in) :: a (..) Return Value logical(kind=c_bool) Description bool caf_is_f_string(CFI_cdesc_t* a_desc);","tags":"","loc":"interface/caf_is_f_string.html"},{"title":"caf_num_images – Caffeine","text":"interface Called by interface~~caf_num_images~~CalledByGraph interface~caf_num_images caf_num_images proc~prif_num_images prif_num_images proc~prif_num_images->interface~caf_num_images interface~prif_num_images prif_num_images interface~prif_num_images->proc~prif_num_images Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public pure function caf_num_images() bind(c) Arguments None Return Value integer(kind=c_int) Description int caf_num_images();","tags":"","loc":"interface/caf_num_images.html"},{"title":"caf_numeric_type – Caffeine","text":"interface Called by interface~~caf_numeric_type~~CalledByGraph interface~caf_numeric_type caf_numeric_type proc~prif_co_max prif_co_max proc~prif_co_max->interface~caf_numeric_type proc~prif_co_min prif_co_min proc~prif_co_min->interface~caf_numeric_type interface~prif_co_max prif_co_max interface~prif_co_max->proc~prif_co_max interface~prif_co_min prif_co_min interface~prif_co_min->proc~prif_co_min Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public pure function caf_numeric_type(a) bind(c) Arguments Type Intent Optional Attributes Name type(*), intent(in) :: a (..) Return Value logical(kind=c_bool) Description bool caf_numeric_type(CFI_cdesc_t* a_desc);","tags":"","loc":"interface/caf_numeric_type.html"},{"title":"caf_same_cfi_type – Caffeine","text":"interface Called by interface~~caf_same_cfi_type~~CalledByGraph interface~caf_same_cfi_type caf_same_cfi_type proc~prif_co_reduce prif_co_reduce proc~prif_co_reduce->interface~caf_same_cfi_type interface~prif_co_reduce prif_co_reduce interface~prif_co_reduce->proc~prif_co_reduce proc~prif_co_max prif_co_max proc~prif_co_max->interface~prif_co_reduce proc~prif_co_min prif_co_min proc~prif_co_min->interface~prif_co_reduce interface~prif_co_max prif_co_max interface~prif_co_max->proc~prif_co_max interface~prif_co_min prif_co_min interface~prif_co_min->proc~prif_co_min Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public pure function caf_same_cfi_type(a, b) bind(c) Arguments Type Intent Optional Attributes Name type(*), intent(in) :: a (..) type(*), intent(in) :: b (..) Return Value logical(kind=c_bool) Description bool caf_same_cfi_type(CFI_cdesc_t a_desc, CFI_cdesc_t a_desc);","tags":"","loc":"interface/caf_same_cfi_type.html"},{"title":"caf_sync_all – Caffeine","text":"interface Called by interface~~caf_sync_all~~CalledByGraph interface~caf_sync_all caf_sync_all proc~prif_sync_all prif_sync_all proc~prif_sync_all->interface~caf_sync_all interface~prif_sync_all prif_sync_all interface~prif_sync_all->proc~prif_sync_all proc~prif_init prif_init proc~prif_init->interface~prif_sync_all interface~prif_init prif_init interface~prif_init->proc~prif_init Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public subroutine caf_sync_all() bind(c) Arguments None Description void caf_sync_all();","tags":"","loc":"interface/caf_sync_all.html"},{"title":"caf_this_image – Caffeine","text":"interface Called by interface~~caf_this_image~~CalledByGraph interface~caf_this_image caf_this_image proc~prif_this_image_no_coarray prif_this_image_no_coarray proc~prif_this_image_no_coarray->interface~caf_this_image Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public function caf_this_image() bind(c) Arguments None Return Value integer(kind=c_int) Description int caf_this_image();","tags":"","loc":"interface/caf_this_image.html"},{"title":"prif_allocate – Caffeine","text":"interface Calls interface~~prif_allocate~~CallsGraph interface~prif_allocate prif_allocate proc~prif_allocate prif_allocate interface~prif_allocate->proc~prif_allocate interface~caf_allocate caf_allocate proc~prif_allocate->interface~caf_allocate Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_allocate(lcobounds, ucobounds, lbounds, ubounds, element_length, final_func, coarray_handle, allocated_memory, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_intmax_t), intent(in), dimension(:) :: lcobounds integer(kind=c_intmax_t), intent(in), dimension(:) :: ucobounds integer(kind=c_intmax_t), intent(in), dimension(:) :: lbounds integer(kind=c_intmax_t), intent(in), dimension(:) :: ubounds integer(kind=c_size_t), intent(in) :: element_length type(c_funptr), intent(in) :: final_func type( prif_coarray_handle ), intent(out) :: coarray_handle type(c_ptr), intent(out) :: allocated_memory integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_allocate.html"},{"title":"prif_allocate_non_symmetric – Caffeine","text":"interface Calls interface~~prif_allocate_non_symmetric~~CallsGraph interface~prif_allocate_non_symmetric prif_allocate_non_symmetric proc~prif_allocate_non_symmetric prif_allocate_non_symmetric interface~prif_allocate_non_symmetric->proc~prif_allocate_non_symmetric Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_allocate_non_symmetric(size_in_bytes, allocated_memory, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_size_t) :: size_in_bytes type(c_ptr), intent(out) :: allocated_memory integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_allocate_non_symmetric.html"},{"title":"prif_deallocate – Caffeine","text":"interface Calls interface~~prif_deallocate~~CallsGraph interface~prif_deallocate prif_deallocate proc~prif_deallocate prif_deallocate interface~prif_deallocate->proc~prif_deallocate Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_deallocate(coarray_handles, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handles (:) integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_deallocate.html"},{"title":"prif_deallocate_non_symmetric – Caffeine","text":"interface Calls interface~~prif_deallocate_non_symmetric~~CallsGraph interface~prif_deallocate_non_symmetric prif_deallocate_non_symmetric proc~prif_deallocate_non_symmetric prif_deallocate_non_symmetric interface~prif_deallocate_non_symmetric->proc~prif_deallocate_non_symmetric Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_deallocate_non_symmetric(mem, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in) :: mem integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_deallocate_non_symmetric.html"},{"title":"prif_coshape – Caffeine","text":"interface Calls interface~~prif_coshape~~CallsGraph interface~prif_coshape prif_coshape proc~prif_coshape prif_coshape interface~prif_coshape->proc~prif_coshape Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_coshape(coarray_handle, sizes) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(out) :: sizes (:)","tags":"","loc":"interface/prif_coshape.html"},{"title":"prif_image_index – Caffeine","text":"interface Calls interface~~prif_image_index~~CallsGraph interface~prif_image_index prif_image_index proc~prif_image_index prif_image_index interface~prif_image_index->proc~prif_image_index Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_image_index(coarray_handle, sub, team, team_number, image_index) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_intmax_t), intent(in) :: sub (:) type( prif_team_type ), intent(in), optional :: team integer(kind=c_int), intent(in), optional :: team_number integer(kind=c_int), intent(out) :: image_index","tags":"","loc":"interface/prif_image_index.html"},{"title":"prif_lcobound – Caffeine","text":"public interface prif_lcobound Calls interface~~prif_lcobound~~CallsGraph interface~prif_lcobound prif_lcobound interface~prif_lcobound_with_dim prif_lcobound_with_dim interface~prif_lcobound->interface~prif_lcobound_with_dim interface~prif_lcobound_no_dim prif_lcobound_no_dim interface~prif_lcobound->interface~prif_lcobound_no_dim proc~prif_lcobound_with_dim prif_lcobound_with_dim interface~prif_lcobound_with_dim->proc~prif_lcobound_with_dim proc~prif_lcobound_no_dim prif_lcobound_no_dim interface~prif_lcobound_no_dim->proc~prif_lcobound_no_dim Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures prif_lcobound_with_dim prif_lcobound_no_dim Module Procedures private interface prif_lcobound_with_dim () Arguments None private interface prif_lcobound_no_dim () Arguments None","tags":"","loc":"interface/prif_lcobound.html"},{"title":"prif_ucobound – Caffeine","text":"public interface prif_ucobound Calls interface~~prif_ucobound~~CallsGraph interface~prif_ucobound prif_ucobound interface~prif_ucobound_with_dim prif_ucobound_with_dim interface~prif_ucobound->interface~prif_ucobound_with_dim interface~prif_ucobound_no_dim prif_ucobound_no_dim interface~prif_ucobound->interface~prif_ucobound_no_dim proc~prif_ucobound_with_dim prif_ucobound_with_dim interface~prif_ucobound_with_dim->proc~prif_ucobound_with_dim proc~prif_ucobound_no_dim prif_ucobound_no_dim interface~prif_ucobound_no_dim->proc~prif_ucobound_no_dim Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures prif_ucobound_with_dim prif_ucobound_no_dim Module Procedures private interface prif_ucobound_with_dim () Arguments None private interface prif_ucobound_no_dim () Arguments None","tags":"","loc":"interface/prif_ucobound.html"},{"title":"prif_lcobound_no_dim – Caffeine","text":"interface Calls interface~~prif_lcobound_no_dim~~CallsGraph interface~prif_lcobound_no_dim prif_lcobound_no_dim proc~prif_lcobound_no_dim prif_lcobound_no_dim interface~prif_lcobound_no_dim->proc~prif_lcobound_no_dim Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by interface~~prif_lcobound_no_dim~~CalledByGraph interface~prif_lcobound_no_dim prif_lcobound_no_dim interface~prif_lcobound prif_lcobound interface~prif_lcobound->interface~prif_lcobound_no_dim Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private module module subroutine prif_lcobound_no_dim(coarray_handle, lcobounds) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_intmax_t), intent(out) :: lcobounds (:)","tags":"","loc":"interface/prif_lcobound_no_dim.html"},{"title":"prif_lcobound_with_dim – Caffeine","text":"interface Calls interface~~prif_lcobound_with_dim~~CallsGraph interface~prif_lcobound_with_dim prif_lcobound_with_dim proc~prif_lcobound_with_dim prif_lcobound_with_dim interface~prif_lcobound_with_dim->proc~prif_lcobound_with_dim Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by interface~~prif_lcobound_with_dim~~CalledByGraph interface~prif_lcobound_with_dim prif_lcobound_with_dim interface~prif_lcobound prif_lcobound interface~prif_lcobound->interface~prif_lcobound_with_dim Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private module module subroutine prif_lcobound_with_dim(coarray_handle, dim, lcobound) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_int), intent(in) :: dim integer(kind=c_intmax_t), intent(out) :: lcobound","tags":"","loc":"interface/prif_lcobound_with_dim.html"},{"title":"prif_ucobound_no_dim – Caffeine","text":"interface Calls interface~~prif_ucobound_no_dim~~CallsGraph interface~prif_ucobound_no_dim prif_ucobound_no_dim proc~prif_ucobound_no_dim prif_ucobound_no_dim interface~prif_ucobound_no_dim->proc~prif_ucobound_no_dim Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by interface~~prif_ucobound_no_dim~~CalledByGraph interface~prif_ucobound_no_dim prif_ucobound_no_dim interface~prif_ucobound prif_ucobound interface~prif_ucobound->interface~prif_ucobound_no_dim Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private module module subroutine prif_ucobound_no_dim(coarray_handle, ucobounds) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_intmax_t), intent(out) :: ucobounds (:)","tags":"","loc":"interface/prif_ucobound_no_dim.html"},{"title":"prif_ucobound_with_dim – Caffeine","text":"interface Calls interface~~prif_ucobound_with_dim~~CallsGraph interface~prif_ucobound_with_dim prif_ucobound_with_dim proc~prif_ucobound_with_dim prif_ucobound_with_dim interface~prif_ucobound_with_dim->proc~prif_ucobound_with_dim Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by interface~~prif_ucobound_with_dim~~CalledByGraph interface~prif_ucobound_with_dim prif_ucobound_with_dim interface~prif_ucobound prif_ucobound interface~prif_ucobound->interface~prif_ucobound_with_dim Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private module module subroutine prif_ucobound_with_dim(coarray_handle, dim, ucobound) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_int), intent(in) :: dim integer(kind=c_intmax_t), intent(out) :: ucobound","tags":"","loc":"interface/prif_ucobound_with_dim.html"},{"title":"get_c_ptr – Caffeine","text":"public pure function get_c_ptr(stat) result(ptr) Arguments Type Intent Optional Attributes Name integer, intent(in), optional target :: stat Return Value type(c_ptr) Called by proc~~get_c_ptr~~CalledByGraph proc~get_c_ptr get_c_ptr proc~prif_co_broadcast prif_co_broadcast proc~prif_co_broadcast->proc~get_c_ptr proc~prif_co_min prif_co_min proc~prif_co_min->proc~get_c_ptr interface~prif_co_reduce prif_co_reduce proc~prif_co_min->interface~prif_co_reduce proc~prif_co_max prif_co_max proc~prif_co_max->proc~get_c_ptr proc~prif_co_max->interface~prif_co_reduce proc~prif_co_reduce prif_co_reduce proc~prif_co_reduce->proc~get_c_ptr proc~prif_co_sum prif_co_sum proc~prif_co_sum->proc~get_c_ptr interface~prif_co_reduce->proc~prif_co_reduce interface~prif_co_sum prif_co_sum interface~prif_co_sum->proc~prif_co_sum interface~prif_co_broadcast prif_co_broadcast interface~prif_co_broadcast->proc~prif_co_broadcast interface~prif_co_max prif_co_max interface~prif_co_max->proc~prif_co_max interface~prif_co_min prif_co_min interface~prif_co_min->proc~prif_co_min Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/get_c_ptr.html"},{"title":"get_c_ptr_character – Caffeine","text":"public pure function get_c_ptr_character(errmsg) result(ptr) Arguments Type Intent Optional Attributes Name character(len=*), intent(in), optional target :: errmsg Return Value type(c_ptr) Called by proc~~get_c_ptr_character~~CalledByGraph proc~get_c_ptr_character get_c_ptr_character proc~prif_co_max prif_co_max proc~prif_co_max->proc~get_c_ptr_character interface~prif_co_reduce prif_co_reduce proc~prif_co_max->interface~prif_co_reduce proc~prif_co_reduce prif_co_reduce proc~prif_co_reduce->proc~get_c_ptr_character proc~prif_co_sum prif_co_sum proc~prif_co_sum->proc~get_c_ptr_character proc~prif_co_min prif_co_min proc~prif_co_min->proc~get_c_ptr_character proc~prif_co_min->interface~prif_co_reduce interface~prif_co_max prif_co_max interface~prif_co_max->proc~prif_co_max interface~prif_co_reduce->proc~prif_co_reduce interface~prif_co_sum prif_co_sum interface~prif_co_sum->proc~prif_co_sum interface~prif_co_min prif_co_min interface~prif_co_min->proc~prif_co_min Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/get_c_ptr_character.html"},{"title":"optional_value – Caffeine","text":"public pure function optional_value(var) result(c_val) Arguments Type Intent Optional Attributes Name integer, intent(in), optional :: var Return Value integer(kind=c_int) Called by proc~~optional_value~~CalledByGraph proc~optional_value optional_value proc~prif_co_max prif_co_max proc~prif_co_max->proc~optional_value interface~prif_co_reduce prif_co_reduce proc~prif_co_max->interface~prif_co_reduce proc~prif_co_reduce prif_co_reduce proc~prif_co_reduce->proc~optional_value proc~prif_co_sum prif_co_sum proc~prif_co_sum->proc~optional_value proc~prif_co_min prif_co_min proc~prif_co_min->proc~optional_value proc~prif_co_min->interface~prif_co_reduce interface~prif_co_max prif_co_max interface~prif_co_max->proc~prif_co_max interface~prif_co_reduce->proc~prif_co_reduce interface~prif_co_sum prif_co_sum interface~prif_co_sum->proc~prif_co_sum interface~prif_co_min prif_co_min interface~prif_co_min->proc~prif_co_min Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/optional_value.html"},{"title":"prif_co_broadcast – Caffeine","text":"interface Calls interface~~prif_co_broadcast~~CallsGraph interface~prif_co_broadcast prif_co_broadcast proc~prif_co_broadcast prif_co_broadcast interface~prif_co_broadcast->proc~prif_co_broadcast proc~get_c_ptr get_c_ptr proc~prif_co_broadcast->proc~get_c_ptr interface~caf_co_broadcast caf_co_broadcast proc~prif_co_broadcast->interface~caf_co_broadcast Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_co_broadcast(a, source_image, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer(kind=c_int), intent(in) :: source_image integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_co_broadcast.html"},{"title":"prif_co_max – Caffeine","text":"interface Calls interface~~prif_co_max~~CallsGraph interface~prif_co_max prif_co_max proc~prif_co_max prif_co_max interface~prif_co_max->proc~prif_co_max interface~caf_co_max caf_co_max proc~prif_co_max->interface~caf_co_max interface~caf_is_f_string caf_is_f_string proc~prif_co_max->interface~caf_is_f_string interface~prif_co_reduce prif_co_reduce proc~prif_co_max->interface~prif_co_reduce proc~optional_value optional_value proc~prif_co_max->proc~optional_value proc~get_c_ptr get_c_ptr proc~prif_co_max->proc~get_c_ptr interface~caf_numeric_type caf_numeric_type proc~prif_co_max->interface~caf_numeric_type proc~get_c_ptr_character get_c_ptr_character proc~prif_co_max->proc~get_c_ptr_character interface~prif_error_stop prif_error_stop proc~prif_co_max->interface~prif_error_stop proc~prif_co_reduce prif_co_reduce interface~prif_co_reduce->proc~prif_co_reduce proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_co_reduce->interface~caf_is_f_string proc~prif_co_reduce->proc~optional_value proc~prif_co_reduce->proc~get_c_ptr proc~prif_co_reduce->proc~get_c_ptr_character proc~prif_co_reduce->interface~prif_error_stop interface~caf_same_cfi_type caf_same_cfi_type proc~prif_co_reduce->interface~caf_same_cfi_type interface~caf_co_reduce caf_co_reduce proc~prif_co_reduce->interface~caf_co_reduce interface~caf_elem_len caf_elem_len proc~prif_co_reduce->interface~caf_elem_len interface~assert assert proc~prif_co_reduce->interface~assert proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string proc~assert assert interface~assert->proc~assert proc~assert->interface~prif_error_stop Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_co_max(a, result_image, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer(kind=c_int), intent(in), optional :: result_image integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_co_max.html"},{"title":"prif_co_min – Caffeine","text":"interface Calls interface~~prif_co_min~~CallsGraph interface~prif_co_min prif_co_min proc~prif_co_min prif_co_min interface~prif_co_min->proc~prif_co_min proc~optional_value optional_value proc~prif_co_min->proc~optional_value interface~prif_co_reduce prif_co_reduce proc~prif_co_min->interface~prif_co_reduce interface~caf_is_f_string caf_is_f_string proc~prif_co_min->interface~caf_is_f_string proc~get_c_ptr get_c_ptr proc~prif_co_min->proc~get_c_ptr interface~caf_numeric_type caf_numeric_type proc~prif_co_min->interface~caf_numeric_type interface~caf_co_min caf_co_min proc~prif_co_min->interface~caf_co_min proc~get_c_ptr_character get_c_ptr_character proc~prif_co_min->proc~get_c_ptr_character interface~prif_error_stop prif_error_stop proc~prif_co_min->interface~prif_error_stop proc~prif_co_reduce prif_co_reduce interface~prif_co_reduce->proc~prif_co_reduce proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_co_reduce->proc~optional_value proc~prif_co_reduce->interface~caf_is_f_string proc~prif_co_reduce->proc~get_c_ptr proc~prif_co_reduce->proc~get_c_ptr_character proc~prif_co_reduce->interface~prif_error_stop interface~caf_same_cfi_type caf_same_cfi_type proc~prif_co_reduce->interface~caf_same_cfi_type interface~caf_co_reduce caf_co_reduce proc~prif_co_reduce->interface~caf_co_reduce interface~caf_elem_len caf_elem_len proc~prif_co_reduce->interface~caf_elem_len interface~assert assert proc~prif_co_reduce->interface~assert proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string proc~assert assert interface~assert->proc~assert proc~assert->interface~prif_error_stop Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_co_min(a, result_image, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer(kind=c_int), intent(in), optional :: result_image integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_co_min.html"},{"title":"prif_co_reduce – Caffeine","text":"interface Calls interface~~prif_co_reduce~~CallsGraph interface~prif_co_reduce prif_co_reduce proc~prif_co_reduce prif_co_reduce interface~prif_co_reduce->proc~prif_co_reduce interface~caf_same_cfi_type caf_same_cfi_type proc~prif_co_reduce->interface~caf_same_cfi_type interface~caf_is_f_string caf_is_f_string proc~prif_co_reduce->interface~caf_is_f_string proc~optional_value optional_value proc~prif_co_reduce->proc~optional_value interface~caf_co_reduce caf_co_reduce proc~prif_co_reduce->interface~caf_co_reduce proc~get_c_ptr get_c_ptr proc~prif_co_reduce->proc~get_c_ptr interface~assert assert proc~prif_co_reduce->interface~assert proc~get_c_ptr_character get_c_ptr_character proc~prif_co_reduce->proc~get_c_ptr_character interface~caf_elem_len caf_elem_len proc~prif_co_reduce->interface~caf_elem_len interface~prif_error_stop prif_error_stop proc~prif_co_reduce->interface~prif_error_stop proc~assert assert interface~assert->proc~assert proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~assert->interface~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by interface~~prif_co_reduce~~CalledByGraph interface~prif_co_reduce prif_co_reduce proc~prif_co_max prif_co_max proc~prif_co_max->interface~prif_co_reduce proc~prif_co_min prif_co_min proc~prif_co_min->interface~prif_co_reduce interface~prif_co_max prif_co_max interface~prif_co_max->proc~prif_co_max interface~prif_co_min prif_co_min interface~prif_co_min->proc~prif_co_min Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_co_reduce(a, operation, result_image, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) type(c_funptr), value :: operation integer(kind=c_int), intent(in), optional :: result_image integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_co_reduce.html"},{"title":"prif_co_sum – Caffeine","text":"interface Calls interface~~prif_co_sum~~CallsGraph interface~prif_co_sum prif_co_sum proc~prif_co_sum prif_co_sum interface~prif_co_sum->proc~prif_co_sum proc~get_c_ptr get_c_ptr proc~prif_co_sum->proc~get_c_ptr proc~optional_value optional_value proc~prif_co_sum->proc~optional_value proc~get_c_ptr_character get_c_ptr_character proc~prif_co_sum->proc~get_c_ptr_character interface~caf_co_sum caf_co_sum proc~prif_co_sum->interface~caf_co_sum Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_co_sum(a, result_image, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer(kind=c_int), intent(in), optional :: result_image integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_co_sum.html"},{"title":"prif_get – Caffeine","text":"interface Calls interface~~prif_get~~CallsGraph interface~prif_get prif_get proc~prif_get prif_get interface~prif_get->proc~prif_get Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_get(coarray_handle, coindices, first_element_addr, value, team, team_number, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_intmax_t), intent(in) :: coindices (:) type(c_ptr), intent(in) :: first_element_addr type(*), intent(inout), dimension(..), contiguous :: value type( prif_team_type ), intent(in), optional :: team integer(kind=c_intmax_t), intent(in), optional :: team_number integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_get.html"},{"title":"prif_get_raw – Caffeine","text":"interface Calls interface~~prif_get_raw~~CallsGraph interface~prif_get_raw prif_get_raw proc~prif_get_raw prif_get_raw interface~prif_get_raw->proc~prif_get_raw Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_get_raw(image_num, local_buffer, remote_ptr, size, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type(c_ptr), intent(in) :: local_buffer integer(kind=c_intptr_t), intent(in) :: remote_ptr integer(kind=c_size_t), intent(in) :: size integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_get_raw.html"},{"title":"prif_get_raw_strided – Caffeine","text":"interface Calls interface~~prif_get_raw_strided~~CallsGraph interface~prif_get_raw_strided prif_get_raw_strided proc~prif_get_raw_strided prif_get_raw_strided interface~prif_get_raw_strided->proc~prif_get_raw_strided Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_get_raw_strided(image_num, local_buffer, remote_ptr, element_size, extent, remote_ptr_stride, local_buffer_stride, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type(c_ptr), intent(in) :: local_buffer integer(kind=c_intptr_t), intent(in) :: remote_ptr integer(kind=c_size_t), intent(in) :: element_size integer(kind=c_size_t), intent(in) :: extent (:) integer(kind=c_ptrdiff_t), intent(in) :: remote_ptr_stride (:) integer(kind=c_ptrdiff_t), intent(in) :: local_buffer_stride (:) integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_get_raw_strided.html"},{"title":"prif_put – Caffeine","text":"interface Calls interface~~prif_put~~CallsGraph interface~prif_put prif_put proc~prif_put prif_put interface~prif_put->proc~prif_put Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_put(coarray_handle, coindices, value, first_element_addr, team, team_number, notify_ptr, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_intmax_t), intent(in) :: coindices (:) type(*), intent(in), dimension(..), contiguous :: value type(c_ptr), intent(in) :: first_element_addr type( prif_team_type ), intent(in), optional :: team integer(kind=c_intmax_t), intent(in), optional :: team_number integer(kind=c_intptr_t), intent(in), optional :: notify_ptr integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_put.html"},{"title":"prif_put_raw – Caffeine","text":"interface Calls interface~~prif_put_raw~~CallsGraph interface~prif_put_raw prif_put_raw proc~prif_put_raw prif_put_raw interface~prif_put_raw->proc~prif_put_raw Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_put_raw(image_num, local_buffer, remote_ptr, notify_ptr, size, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type(c_ptr), intent(in) :: local_buffer integer(kind=c_intptr_t), intent(in) :: remote_ptr integer(kind=c_intptr_t), intent(in), optional :: notify_ptr integer(kind=c_size_t), intent(in) :: size integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_put_raw.html"},{"title":"prif_put_raw_strided – Caffeine","text":"interface Calls interface~~prif_put_raw_strided~~CallsGraph interface~prif_put_raw_strided prif_put_raw_strided proc~prif_put_raw_strided prif_put_raw_strided interface~prif_put_raw_strided->proc~prif_put_raw_strided Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_put_raw_strided(image_num, local_buffer, remote_ptr, element_size, extent, remote_ptr_stride, local_buffer_stride, notify_ptr, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type(c_ptr), intent(in) :: local_buffer integer(kind=c_intptr_t), intent(in) :: remote_ptr integer(kind=c_size_t), intent(in) :: element_size integer(kind=c_size_t), intent(in) :: extent (:) integer(kind=c_ptrdiff_t), intent(in) :: remote_ptr_stride (:) integer(kind=c_ptrdiff_t), intent(in) :: local_buffer_stride (:) integer(kind=c_intptr_t), intent(in), optional :: notify_ptr integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_put_raw_strided.html"},{"title":"prif_lock – Caffeine","text":"interface Calls interface~~prif_lock~~CallsGraph interface~prif_lock prif_lock proc~prif_lock prif_lock interface~prif_lock->proc~prif_lock Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_lock(image_num, lock_var_ptr, acquired_lock, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: lock_var_ptr logical(kind=c_bool), intent(out), optional :: acquired_lock integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_lock.html"},{"title":"prif_unlock – Caffeine","text":"interface Calls interface~~prif_unlock~~CallsGraph interface~prif_unlock prif_unlock proc~prif_unlock prif_unlock interface~prif_unlock->proc~prif_unlock Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_unlock(image_num, lock_var_ptr, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: lock_var_ptr integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_unlock.html"},{"title":"prif_sync_all – Caffeine","text":"interface Calls interface~~prif_sync_all~~CallsGraph interface~prif_sync_all prif_sync_all proc~prif_sync_all prif_sync_all interface~prif_sync_all->proc~prif_sync_all interface~caf_sync_all caf_sync_all proc~prif_sync_all->interface~caf_sync_all Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by interface~~prif_sync_all~~CalledByGraph interface~prif_sync_all prif_sync_all proc~prif_init prif_init proc~prif_init->interface~prif_sync_all interface~prif_init prif_init interface~prif_init->proc~prif_init Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_sync_all(stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_sync_all.html"},{"title":"prif_sync_images – Caffeine","text":"interface Calls interface~~prif_sync_images~~CallsGraph interface~prif_sync_images prif_sync_images proc~prif_sync_images prif_sync_images interface~prif_sync_images->proc~prif_sync_images Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_sync_images(image_set, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in), optional :: image_set (:) integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_sync_images.html"},{"title":"prif_sync_memory – Caffeine","text":"interface Calls interface~~prif_sync_memory~~CallsGraph interface~prif_sync_memory prif_sync_memory proc~prif_sync_memory prif_sync_memory interface~prif_sync_memory->proc~prif_sync_memory Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_sync_memory(stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_sync_memory.html"},{"title":"prif_sync_team – Caffeine","text":"interface Calls interface~~prif_sync_team~~CallsGraph interface~prif_sync_team prif_sync_team proc~prif_sync_team prif_sync_team interface~prif_sync_team->proc~prif_sync_team Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_sync_team(team, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in) :: team integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_sync_team.html"},{"title":"prif_change_team – Caffeine","text":"interface Calls interface~~prif_change_team~~CallsGraph interface~prif_change_team prif_change_team proc~prif_change_team prif_change_team interface~prif_change_team->proc~prif_change_team Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_change_team(team, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in) :: team integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_change_team.html"},{"title":"prif_end_team – Caffeine","text":"interface Calls interface~~prif_end_team~~CallsGraph interface~prif_end_team prif_end_team proc~prif_end_team prif_end_team interface~prif_end_team->proc~prif_end_team Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_end_team(stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_end_team.html"},{"title":"prif_form_team – Caffeine","text":"interface Calls interface~~prif_form_team~~CallsGraph interface~prif_form_team prif_form_team proc~prif_form_team prif_form_team interface~prif_form_team->proc~prif_form_team Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_form_team(team_number, team, new_index, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_intmax_t), intent(in) :: team_number type( prif_team_type ), intent(out) :: team integer(kind=c_int), intent(in), optional :: new_index integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_form_team.html"},{"title":"prif_get_team – Caffeine","text":"interface Calls interface~~prif_get_team~~CallsGraph interface~prif_get_team prif_get_team proc~prif_get_team prif_get_team interface~prif_get_team->proc~prif_get_team Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_get_team(level, team) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in), optional :: level type( prif_team_type ), intent(out) :: team","tags":"","loc":"interface/prif_get_team.html"},{"title":"prif_team_number – Caffeine","text":"interface Calls interface~~prif_team_number~~CallsGraph interface~prif_team_number prif_team_number proc~prif_team_number prif_team_number interface~prif_team_number->proc~prif_team_number Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_team_number(team, team_number) Implementation → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in), optional :: team integer(kind=c_intmax_t), intent(out) :: team_number","tags":"","loc":"interface/prif_team_number.html"},{"title":"prif_error_stop – Caffeine","text":"interface Calls interface~~prif_error_stop~~CallsGraph interface~prif_error_stop prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by interface~~prif_error_stop~~CalledByGraph interface~prif_error_stop prif_error_stop proc~assert assert proc~assert->interface~prif_error_stop proc~construct construct proc~construct->interface~prif_error_stop proc~prif_co_min prif_co_min proc~prif_co_min->interface~prif_error_stop interface~prif_co_reduce prif_co_reduce proc~prif_co_min->interface~prif_co_reduce proc~as_character as_character proc~as_character->interface~prif_error_stop proc~prif_co_max prif_co_max proc~prif_co_max->interface~prif_error_stop proc~prif_co_max->interface~prif_co_reduce proc~prif_co_reduce prif_co_reduce proc~prif_co_reduce->interface~prif_error_stop interface~assert assert proc~prif_co_reduce->interface~assert interface~prif_co_reduce->proc~prif_co_reduce interface~assert->proc~assert interface~as_character as_character interface~as_character->proc~as_character interface~prif_co_max prif_co_max interface~prif_co_max->proc~prif_co_max interface~prif_co_min prif_co_min interface~prif_co_min->proc~prif_co_min Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public pure module module subroutine prif_error_stop(quiet, stop_code_int, stop_code_char) Implementation → Arguments Type Intent Optional Attributes Name logical(kind=c_bool), intent(in) :: quiet integer(kind=c_int), intent(in), optional :: stop_code_int character(len=*), intent(in), optional :: stop_code_char","tags":"","loc":"interface/prif_error_stop.html"},{"title":"prif_fail_image – Caffeine","text":"interface Calls interface~~prif_fail_image~~CallsGraph interface~prif_fail_image prif_fail_image proc~prif_fail_image prif_fail_image interface~prif_fail_image->proc~prif_fail_image Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_fail_image() Implementation → Arguments None","tags":"","loc":"interface/prif_fail_image.html"},{"title":"prif_stop – Caffeine","text":"interface Calls interface~~prif_stop~~CallsGraph interface~prif_stop prif_stop proc~prif_stop prif_stop interface~prif_stop->proc~prif_stop Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_stop(quiet, stop_code_int, stop_code_char) Implementation → Arguments Type Intent Optional Attributes Name logical(kind=c_bool), intent(in) :: quiet integer(kind=c_int), intent(in), optional :: stop_code_int character(len=*), intent(in), optional :: stop_code_char","tags":"","loc":"interface/prif_stop.html"},{"title":"prif_base_pointer – Caffeine","text":"interface Calls interface~~prif_base_pointer~~CallsGraph interface~prif_base_pointer prif_base_pointer proc~prif_base_pointer prif_base_pointer interface~prif_base_pointer->proc~prif_base_pointer Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_base_pointer(coarray_handle, coindices, team, team_number, ptr) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_intmax_t), intent(in) :: coindices (:) type( prif_team_type ), intent(in), optional :: team integer(kind=c_intmax_t), intent(in), optional :: team_number integer(kind=c_intptr_t), intent(out) :: ptr","tags":"","loc":"interface/prif_base_pointer.html"},{"title":"prif_get_context_data – Caffeine","text":"interface Calls interface~~prif_get_context_data~~CallsGraph interface~prif_get_context_data prif_get_context_data proc~prif_get_context_data prif_get_context_data interface~prif_get_context_data->proc~prif_get_context_data Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_get_context_data(coarray_handle, context_data) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle type(c_ptr), intent(out) :: context_data","tags":"","loc":"interface/prif_get_context_data.html"},{"title":"prif_local_data_size – Caffeine","text":"interface Calls interface~~prif_local_data_size~~CallsGraph interface~prif_local_data_size prif_local_data_size proc~prif_local_data_size prif_local_data_size interface~prif_local_data_size->proc~prif_local_data_size Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_local_data_size(coarray_handle, data_size) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(out) :: data_size","tags":"","loc":"interface/prif_local_data_size.html"},{"title":"prif_set_context_data – Caffeine","text":"interface Calls interface~~prif_set_context_data~~CallsGraph interface~prif_set_context_data prif_set_context_data proc~prif_set_context_data prif_set_context_data interface~prif_set_context_data->proc~prif_set_context_data Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_set_context_data(coarray_handle, context_data) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle type(c_ptr), intent(in) :: context_data","tags":"","loc":"interface/prif_set_context_data.html"},{"title":"prif_event_post – Caffeine","text":"interface Calls interface~~prif_event_post~~CallsGraph interface~prif_event_post prif_event_post proc~prif_event_post prif_event_post interface~prif_event_post->proc~prif_event_post Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_event_post(image_num, event_var_ptr, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: event_var_ptr integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_event_post.html"},{"title":"prif_event_query – Caffeine","text":"interface Calls interface~~prif_event_query~~CallsGraph interface~prif_event_query prif_event_query proc~prif_event_query prif_event_query interface~prif_event_query->proc~prif_event_query Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_event_query(event_var_ptr, count, stat) Implementation → Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in) :: event_var_ptr integer(kind=c_intmax_t), intent(out) :: count integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"interface/prif_event_query.html"},{"title":"prif_event_wait – Caffeine","text":"interface Calls interface~~prif_event_wait~~CallsGraph interface~prif_event_wait prif_event_wait proc~prif_event_wait prif_event_wait interface~prif_event_wait->proc~prif_event_wait Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_event_wait(event_var_ptr, until_count, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in) :: event_var_ptr integer(kind=c_intmax_t), intent(in), optional :: until_count integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"interface/prif_event_wait.html"},{"title":"c_f_string – Caffeine","text":"pure function c_f_string(c_string, length) result(f_string) Arguments Type Intent Optional Attributes Name character(kind=c_char,len=1), intent(in) :: c_string (length) integer(kind=c_int), intent(in) :: length Return Value character(len=length) Called by proc~~c_f_string~~CalledByGraph proc~c_f_string c_f_string proc~inner_caf_error_stop_character inner_caf_error_stop_character proc~inner_caf_error_stop_character->proc~c_f_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/c_f_string.html"},{"title":"f_c_string – Caffeine","text":"pure function f_c_string(f_string) result(c_string) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: f_string Return Value character(kind=c_char,len=1)(len(f_string)) Called by proc~~f_c_string~~CalledByGraph proc~f_c_string f_c_string proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop_character->proc~f_c_string proc~prif_error_stop prif_error_stop proc~prif_error_stop->proc~prif_error_stop_character interface~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~assert assert proc~assert->interface~prif_error_stop proc~construct construct proc~construct->interface~prif_error_stop proc~prif_co_min prif_co_min proc~prif_co_min->interface~prif_error_stop interface~prif_co_reduce prif_co_reduce proc~prif_co_min->interface~prif_co_reduce proc~as_character as_character proc~as_character->interface~prif_error_stop proc~prif_co_max prif_co_max proc~prif_co_max->interface~prif_error_stop proc~prif_co_max->interface~prif_co_reduce proc~prif_co_reduce prif_co_reduce proc~prif_co_reduce->interface~prif_error_stop interface~assert assert proc~prif_co_reduce->interface~assert interface~prif_co_reduce->proc~prif_co_reduce interface~assert->proc~assert interface~as_character as_character interface~as_character->proc~as_character interface~prif_co_max prif_co_max interface~prif_co_max->proc~prif_co_max interface~prif_co_min prif_co_min interface~prif_co_min->proc~prif_co_min Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/f_c_string.html"},{"title":"inner_caf_error_stop_character – Caffeine","text":"subroutine inner_caf_error_stop_character(stop_code, length) bind(c, name = \"0\") Arguments Type Intent Optional Attributes Name character(kind=c_char,len=1), intent(in) :: stop_code (length) integer(kind=c_int), intent(in) :: length Calls proc~~inner_caf_error_stop_character~~CallsGraph proc~inner_caf_error_stop_character inner_caf_error_stop_character proc~c_f_string c_f_string proc~inner_caf_error_stop_character->proc~c_f_string proc~prif_error_stop_integer prif_error_stop_integer proc~inner_caf_error_stop_character->proc~prif_error_stop_integer Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/inner_caf_error_stop_character.html"},{"title":"inner_caf_error_stop_integer – Caffeine","text":"subroutine inner_caf_error_stop_integer(stop_code) bind(c, name = \"0\") Arguments Type Intent Optional Attributes Name integer, intent(in), optional :: stop_code Calls proc~~inner_caf_error_stop_integer~~CallsGraph proc~inner_caf_error_stop_integer inner_caf_error_stop_integer interface~caf_decaffeinate caf_decaffeinate proc~inner_caf_error_stop_integer->interface~caf_decaffeinate Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/inner_caf_error_stop_integer.html"},{"title":"prif_error_stop_character – Caffeine","text":"pure subroutine prif_error_stop_character(stop_code) stop all images and provide the stop_code as the process exit status Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: stop_code Calls proc~~prif_error_stop_character~~CallsGraph proc~prif_error_stop_character prif_error_stop_character proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_error_stop_character~~CalledByGraph proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop prif_error_stop proc~prif_error_stop->proc~prif_error_stop_character interface~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~assert assert proc~assert->interface~prif_error_stop proc~construct construct proc~construct->interface~prif_error_stop proc~prif_co_min prif_co_min proc~prif_co_min->interface~prif_error_stop interface~prif_co_reduce prif_co_reduce proc~prif_co_min->interface~prif_co_reduce proc~as_character as_character proc~as_character->interface~prif_error_stop proc~prif_co_max prif_co_max proc~prif_co_max->interface~prif_error_stop proc~prif_co_max->interface~prif_co_reduce proc~prif_co_reduce prif_co_reduce proc~prif_co_reduce->interface~prif_error_stop interface~assert assert proc~prif_co_reduce->interface~assert interface~prif_co_reduce->proc~prif_co_reduce interface~assert->proc~assert interface~as_character as_character interface~as_character->proc~as_character interface~prif_co_max prif_co_max interface~prif_co_max->proc~prif_co_max interface~prif_co_min prif_co_min interface~prif_co_min->proc~prif_co_min Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_error_stop_character.html"},{"title":"prif_error_stop_integer – Caffeine","text":"pure subroutine prif_error_stop_integer(stop_code) stop all images and provide the stop_code, or 0 if not present, as the process exit status Arguments Type Intent Optional Attributes Name integer, intent(in), optional :: stop_code Called by proc~~prif_error_stop_integer~~CalledByGraph proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop prif_error_stop proc~prif_error_stop->proc~prif_error_stop_integer proc~inner_caf_error_stop_character inner_caf_error_stop_character proc~inner_caf_error_stop_character->proc~prif_error_stop_integer interface~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~assert assert proc~assert->interface~prif_error_stop proc~construct construct proc~construct->interface~prif_error_stop proc~prif_co_min prif_co_min proc~prif_co_min->interface~prif_error_stop interface~prif_co_reduce prif_co_reduce proc~prif_co_min->interface~prif_co_reduce proc~as_character as_character proc~as_character->interface~prif_error_stop proc~prif_co_max prif_co_max proc~prif_co_max->interface~prif_error_stop proc~prif_co_max->interface~prif_co_reduce proc~prif_co_reduce prif_co_reduce proc~prif_co_reduce->interface~prif_error_stop interface~assert assert proc~prif_co_reduce->interface~assert interface~prif_co_reduce->proc~prif_co_reduce interface~assert->proc~assert interface~as_character as_character interface~as_character->proc~as_character interface~prif_co_max prif_co_max interface~prif_co_max->proc~prif_co_max interface~prif_co_min prif_co_min interface~prif_co_min->proc~prif_co_min Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_error_stop_integer.html"},{"title":"caf_stop – Caffeine","text":"public interface caf_stop Contents Subroutines caf_stop_character caf_stop_integer Subroutines private module subroutine caf_stop_character(stop_code) synchronize, stop the executing image, and provide the stop_code as the process exit status Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: stop_code private module subroutine caf_stop_integer(stop_code) synchronize, stop the executing image, and provide the stop_code (or 0 if not present) as the process exit status Arguments Type Intent Optional Attributes Name integer, intent(in), optional :: stop_code","tags":"","loc":"interface/caf_stop.html"},{"title":"prif_atomic_add – Caffeine","text":"interface Calls interface~~prif_atomic_add~~CallsGraph interface~prif_atomic_add prif_atomic_add proc~prif_atomic_add prif_atomic_add interface~prif_atomic_add->proc~prif_atomic_add Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_atomic_add(atom_remote_ptr, image_num, value, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"interface/prif_atomic_add.html"},{"title":"prif_atomic_and – Caffeine","text":"interface Calls interface~~prif_atomic_and~~CallsGraph interface~prif_atomic_and prif_atomic_and proc~prif_atomic_and prif_atomic_and interface~prif_atomic_and->proc~prif_atomic_and Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_atomic_and(atom_remote_ptr, image_num, value, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"interface/prif_atomic_and.html"},{"title":"prif_atomic_cas – Caffeine","text":"public interface prif_atomic_cas Calls interface~~prif_atomic_cas~~CallsGraph interface~prif_atomic_cas prif_atomic_cas interface~prif_atomic_cas_int prif_atomic_cas_int interface~prif_atomic_cas->interface~prif_atomic_cas_int interface~prif_atomic_cas_logical prif_atomic_cas_logical interface~prif_atomic_cas->interface~prif_atomic_cas_logical proc~prif_atomic_cas_int prif_atomic_cas_int interface~prif_atomic_cas_int->proc~prif_atomic_cas_int proc~prif_atomic_cas_logical prif_atomic_cas_logical interface~prif_atomic_cas_logical->proc~prif_atomic_cas_logical Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures prif_atomic_cas_int prif_atomic_cas_logical Module Procedures private interface prif_atomic_cas_int () Arguments None private interface prif_atomic_cas_logical () Arguments None","tags":"","loc":"interface/prif_atomic_cas.html"},{"title":"prif_atomic_define – Caffeine","text":"public interface prif_atomic_define Calls interface~~prif_atomic_define~~CallsGraph interface~prif_atomic_define prif_atomic_define interface~prif_atomic_define_int prif_atomic_define_int interface~prif_atomic_define->interface~prif_atomic_define_int interface~prif_atomic_define_logical prif_atomic_define_logical interface~prif_atomic_define->interface~prif_atomic_define_logical proc~prif_atomic_define_int prif_atomic_define_int interface~prif_atomic_define_int->proc~prif_atomic_define_int proc~prif_atomic_define_logical prif_atomic_define_logical interface~prif_atomic_define_logical->proc~prif_atomic_define_logical Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures prif_atomic_define_int prif_atomic_define_logical Module Procedures private interface prif_atomic_define_int () Arguments None private interface prif_atomic_define_logical () Arguments None","tags":"","loc":"interface/prif_atomic_define.html"},{"title":"prif_atomic_fetch_add – Caffeine","text":"interface Calls interface~~prif_atomic_fetch_add~~CallsGraph interface~prif_atomic_fetch_add prif_atomic_fetch_add proc~prif_atomic_fetch_add prif_atomic_fetch_add interface~prif_atomic_fetch_add->proc~prif_atomic_fetch_add Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_atomic_fetch_add(atom_remote_ptr, image_num, value, old, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=atomic_int_kind), intent(in) :: value integer(kind=atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"interface/prif_atomic_fetch_add.html"},{"title":"prif_atomic_fetch_and – Caffeine","text":"interface Calls interface~~prif_atomic_fetch_and~~CallsGraph interface~prif_atomic_fetch_and prif_atomic_fetch_and proc~prif_atomic_fetch_and prif_atomic_fetch_and interface~prif_atomic_fetch_and->proc~prif_atomic_fetch_and Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_atomic_fetch_and(atom_remote_ptr, image_num, value, old, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=atomic_int_kind), intent(in) :: value integer(kind=atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"interface/prif_atomic_fetch_and.html"},{"title":"prif_atomic_fetch_or – Caffeine","text":"interface Calls interface~~prif_atomic_fetch_or~~CallsGraph interface~prif_atomic_fetch_or prif_atomic_fetch_or proc~prif_atomic_fetch_or prif_atomic_fetch_or interface~prif_atomic_fetch_or->proc~prif_atomic_fetch_or Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_atomic_fetch_or(atom_remote_ptr, image_num, value, old, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=atomic_int_kind), intent(in) :: value integer(kind=atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"interface/prif_atomic_fetch_or.html"},{"title":"prif_atomic_fetch_xor – Caffeine","text":"interface Calls interface~~prif_atomic_fetch_xor~~CallsGraph interface~prif_atomic_fetch_xor prif_atomic_fetch_xor proc~prif_atomic_fetch_xor prif_atomic_fetch_xor interface~prif_atomic_fetch_xor->proc~prif_atomic_fetch_xor Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_atomic_fetch_xor(atom_remote_ptr, image_num, value, old, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=atomic_int_kind), intent(in) :: value integer(kind=atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"interface/prif_atomic_fetch_xor.html"},{"title":"prif_atomic_or – Caffeine","text":"interface Calls interface~~prif_atomic_or~~CallsGraph interface~prif_atomic_or prif_atomic_or proc~prif_atomic_or prif_atomic_or interface~prif_atomic_or->proc~prif_atomic_or Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_atomic_or(atom_remote_ptr, image_num, value, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"interface/prif_atomic_or.html"},{"title":"prif_atomic_ref – Caffeine","text":"public interface prif_atomic_ref Calls interface~~prif_atomic_ref~~CallsGraph interface~prif_atomic_ref prif_atomic_ref interface~prif_atomic_ref_int prif_atomic_ref_int interface~prif_atomic_ref->interface~prif_atomic_ref_int interface~prif_atomic_ref_logical prif_atomic_ref_logical interface~prif_atomic_ref->interface~prif_atomic_ref_logical proc~prif_atomic_ref_int prif_atomic_ref_int interface~prif_atomic_ref_int->proc~prif_atomic_ref_int proc~prif_atomic_ref_logical prif_atomic_ref_logical interface~prif_atomic_ref_logical->proc~prif_atomic_ref_logical Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures prif_atomic_ref_int prif_atomic_ref_logical Module Procedures private interface prif_atomic_ref_int () Arguments None private interface prif_atomic_ref_logical () Arguments None","tags":"","loc":"interface/prif_atomic_ref.html"},{"title":"prif_atomic_xor – Caffeine","text":"interface Calls interface~~prif_atomic_xor~~CallsGraph interface~prif_atomic_xor prif_atomic_xor proc~prif_atomic_xor prif_atomic_xor interface~prif_atomic_xor->proc~prif_atomic_xor Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine prif_atomic_xor(atom_remote_ptr, image_num, value, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"interface/prif_atomic_xor.html"},{"title":"prif_atomic_cas_int – Caffeine","text":"interface Calls interface~~prif_atomic_cas_int~~CallsGraph interface~prif_atomic_cas_int prif_atomic_cas_int proc~prif_atomic_cas_int prif_atomic_cas_int interface~prif_atomic_cas_int->proc~prif_atomic_cas_int Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by interface~~prif_atomic_cas_int~~CalledByGraph interface~prif_atomic_cas_int prif_atomic_cas_int interface~prif_atomic_cas prif_atomic_cas interface~prif_atomic_cas->interface~prif_atomic_cas_int Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private module module subroutine prif_atomic_cas_int(atom_remote_ptr, image_num, old, compare, new, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=atomic_int_kind), intent(out) :: old integer(kind=atomic_int_kind), intent(in) :: compare integer(kind=atomic_int_kind), intent(in) :: new integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"interface/prif_atomic_cas_int.html"},{"title":"prif_atomic_cas_logical – Caffeine","text":"interface Calls interface~~prif_atomic_cas_logical~~CallsGraph interface~prif_atomic_cas_logical prif_atomic_cas_logical proc~prif_atomic_cas_logical prif_atomic_cas_logical interface~prif_atomic_cas_logical->proc~prif_atomic_cas_logical Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by interface~~prif_atomic_cas_logical~~CalledByGraph interface~prif_atomic_cas_logical prif_atomic_cas_logical interface~prif_atomic_cas prif_atomic_cas interface~prif_atomic_cas->interface~prif_atomic_cas_logical Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private module module subroutine prif_atomic_cas_logical(atom_remote_ptr, image_num, old, compare, new, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num logical(kind=atomic_logical_kind), intent(out) :: old logical(kind=atomic_logical_kind), intent(in) :: compare logical(kind=atomic_logical_kind), intent(in) :: new integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"interface/prif_atomic_cas_logical.html"},{"title":"prif_atomic_define_int – Caffeine","text":"interface Calls interface~~prif_atomic_define_int~~CallsGraph interface~prif_atomic_define_int prif_atomic_define_int proc~prif_atomic_define_int prif_atomic_define_int interface~prif_atomic_define_int->proc~prif_atomic_define_int Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by interface~~prif_atomic_define_int~~CalledByGraph interface~prif_atomic_define_int prif_atomic_define_int interface~prif_atomic_define prif_atomic_define interface~prif_atomic_define->interface~prif_atomic_define_int Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private module module subroutine prif_atomic_define_int(atom_remote_ptr, image_num, value, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"interface/prif_atomic_define_int.html"},{"title":"prif_atomic_define_logical – Caffeine","text":"interface Calls interface~~prif_atomic_define_logical~~CallsGraph interface~prif_atomic_define_logical prif_atomic_define_logical proc~prif_atomic_define_logical prif_atomic_define_logical interface~prif_atomic_define_logical->proc~prif_atomic_define_logical Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by interface~~prif_atomic_define_logical~~CalledByGraph interface~prif_atomic_define_logical prif_atomic_define_logical interface~prif_atomic_define prif_atomic_define interface~prif_atomic_define->interface~prif_atomic_define_logical Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private module module subroutine prif_atomic_define_logical(atom_remote_ptr, image_num, value, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num logical(kind=atomic_logical_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"interface/prif_atomic_define_logical.html"},{"title":"prif_atomic_ref_int – Caffeine","text":"interface Calls interface~~prif_atomic_ref_int~~CallsGraph interface~prif_atomic_ref_int prif_atomic_ref_int proc~prif_atomic_ref_int prif_atomic_ref_int interface~prif_atomic_ref_int->proc~prif_atomic_ref_int Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by interface~~prif_atomic_ref_int~~CalledByGraph interface~prif_atomic_ref_int prif_atomic_ref_int interface~prif_atomic_ref prif_atomic_ref interface~prif_atomic_ref->interface~prif_atomic_ref_int Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private module module subroutine prif_atomic_ref_int(value, atom_remote_ptr, image_num, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=atomic_int_kind), intent(out) :: value integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"interface/prif_atomic_ref_int.html"},{"title":"prif_atomic_ref_logical – Caffeine","text":"interface Calls interface~~prif_atomic_ref_logical~~CallsGraph interface~prif_atomic_ref_logical prif_atomic_ref_logical proc~prif_atomic_ref_logical prif_atomic_ref_logical interface~prif_atomic_ref_logical->proc~prif_atomic_ref_logical Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by interface~~prif_atomic_ref_logical~~CalledByGraph interface~prif_atomic_ref_logical prif_atomic_ref_logical interface~prif_atomic_ref prif_atomic_ref interface~prif_atomic_ref->interface~prif_atomic_ref_logical Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private module module subroutine prif_atomic_ref_logical(value, atom_remote_ptr, image_num, stat) Implementation → Arguments Type Intent Optional Attributes Name logical(kind=atomic_logical_kind), intent(out) :: value integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"interface/prif_atomic_ref_logical.html"},{"title":"intrinsic_array_t – Caffeine","text":"public interface intrinsic_array_t Contents Functions construct Functions private pure module function construct(array) result(intrinsic_array) Arguments Type Intent Optional Attributes Name class(*), intent(in) :: array (..) Return Value type( intrinsic_array_t )","tags":"","loc":"interface/intrinsic_array_t.html"},{"title":"as_character – Caffeine","text":"interface Calls interface~~as_character~~CallsGraph interface~as_character as_character proc~as_character as_character interface~as_character->proc~as_character interface~prif_error_stop prif_error_stop proc~as_character->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private pure module module function as_character(self) result(character_self) Implementation → Arguments Type Intent Optional Attributes Name class( intrinsic_array_t ), intent(in) :: self Return Value character(len=:),allocatable","tags":"","loc":"interface/as_character.html"},{"title":"assert – Caffeine","text":"interface Calls interface~~assert~~CallsGraph interface~assert assert proc~assert assert interface~assert->proc~assert interface~prif_error_stop prif_error_stop proc~assert->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by interface~~assert~~CalledByGraph interface~assert assert proc~prif_co_reduce prif_co_reduce proc~prif_co_reduce->interface~assert interface~prif_co_reduce prif_co_reduce interface~prif_co_reduce->proc~prif_co_reduce proc~prif_co_max prif_co_max proc~prif_co_max->interface~prif_co_reduce proc~prif_co_min prif_co_min proc~prif_co_min->interface~prif_co_reduce interface~prif_co_max prif_co_max interface~prif_co_max->proc~prif_co_max interface~prif_co_min prif_co_min interface~prif_co_min->proc~prif_co_min Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module module subroutine assert(assertion, description, diagnostic_data) Implementation → Arguments Type Intent Optional Attributes Name logical, intent(in) :: assertion Most assertions will be expressions such as i>0 character(len=*), intent(in) :: description A brief statement of what is being asserted such as \"i>0\" or \"positive i\" class(*), intent(in), optional :: diagnostic_data Data to include in an error ouptput: may be of an intrinsic type or a type that extends characterizable_t Description If assertion is .false., error-terminate with a character stop code that contains diagnostic_data if present","tags":"","loc":"interface/assert.html"},{"title":"prif_allocate – Caffeine","text":"module procedure prif_allocate module module subroutine prif_allocate(lcobounds, ucobounds, lbounds, ubounds, element_length, final_func, coarray_handle, allocated_memory, stat, errmsg, errmsg_alloc) Interface → Uses caffeine_h_m proc~~prif_allocate~~UsesGraph proc~prif_allocate prif_allocate module~caffeine_h_m caffeine_h_m proc~prif_allocate->module~caffeine_h_m iso_c_binding iso_c_binding module~caffeine_h_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Arguments Type Intent Optional Attributes Name integer(kind=c_intmax_t), intent(in), dimension(:) :: lcobounds integer(kind=c_intmax_t), intent(in), dimension(:) :: ucobounds integer(kind=c_intmax_t), intent(in), dimension(:) :: lbounds integer(kind=c_intmax_t), intent(in), dimension(:) :: ubounds integer(kind=c_size_t), intent(in) :: element_length type(c_funptr), intent(in) :: final_func type( prif_coarray_handle ), intent(out) :: coarray_handle type(c_ptr), intent(out) :: allocated_memory integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_allocate~~CallsGraph proc~prif_allocate prif_allocate interface~caf_allocate caf_allocate proc~prif_allocate->interface~caf_allocate Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_allocate~~CalledByGraph proc~prif_allocate prif_allocate interface~prif_allocate prif_allocate interface~prif_allocate->proc~prif_allocate Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_allocate.html"},{"title":"prif_allocate_non_symmetric – Caffeine","text":"module procedure prif_allocate_non_symmetric module module subroutine prif_allocate_non_symmetric(size_in_bytes, allocated_memory, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_size_t) :: size_in_bytes type(c_ptr), intent(out) :: allocated_memory integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Called by proc~~prif_allocate_non_symmetric~~CalledByGraph proc~prif_allocate_non_symmetric prif_allocate_non_symmetric interface~prif_allocate_non_symmetric prif_allocate_non_symmetric interface~prif_allocate_non_symmetric->proc~prif_allocate_non_symmetric Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_allocate_non_symmetric.html"},{"title":"prif_deallocate – Caffeine","text":"module procedure prif_deallocate module module subroutine prif_deallocate(coarray_handles, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handles (:) integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Called by proc~~prif_deallocate~~CalledByGraph proc~prif_deallocate prif_deallocate interface~prif_deallocate prif_deallocate interface~prif_deallocate->proc~prif_deallocate Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_deallocate.html"},{"title":"prif_deallocate_non_symmetric – Caffeine","text":"module procedure prif_deallocate_non_symmetric module module subroutine prif_deallocate_non_symmetric(mem, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in) :: mem integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Called by proc~~prif_deallocate_non_symmetric~~CalledByGraph proc~prif_deallocate_non_symmetric prif_deallocate_non_symmetric interface~prif_deallocate_non_symmetric prif_deallocate_non_symmetric interface~prif_deallocate_non_symmetric->proc~prif_deallocate_non_symmetric Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_deallocate_non_symmetric.html"},{"title":"prif_failed_images – Caffeine","text":"module procedure prif_failed_images module module subroutine prif_failed_images(team, failed_images) Interface → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in), optional :: team integer(kind=c_int), intent(out), allocatable :: failed_images (:) Called by proc~~prif_failed_images~~CalledByGraph proc~prif_failed_images prif_failed_images interface~prif_failed_images prif_failed_images interface~prif_failed_images->proc~prif_failed_images Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_failed_images.html"},{"title":"prif_image_status – Caffeine","text":"module procedure prif_image_status impure elemental module module subroutine prif_image_status(image, team, image_status) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image type( prif_team_type ), intent(in), optional :: team integer(kind=c_int), intent(out) :: image_status Called by proc~~prif_image_status~~CalledByGraph proc~prif_image_status prif_image_status interface~prif_image_status prif_image_status interface~prif_image_status->proc~prif_image_status Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_image_status.html"},{"title":"prif_num_images – Caffeine","text":"module procedure prif_num_images module module subroutine prif_num_images(team, team_number, image_count) Interface → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in), optional :: team integer(kind=c_intmax_t), intent(in), optional :: team_number integer(kind=c_int), intent(out) :: image_count Calls proc~~prif_num_images~~CallsGraph proc~prif_num_images prif_num_images interface~caf_num_images caf_num_images proc~prif_num_images->interface~caf_num_images Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_num_images~~CalledByGraph proc~prif_num_images prif_num_images interface~prif_num_images prif_num_images interface~prif_num_images->proc~prif_num_images Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_num_images.html"},{"title":"prif_stopped_images – Caffeine","text":"module procedure prif_stopped_images module module subroutine prif_stopped_images(team, stopped_images) Interface → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in), optional :: team integer(kind=c_int), intent(out), allocatable :: stopped_images (:) Called by proc~~prif_stopped_images~~CalledByGraph proc~prif_stopped_images prif_stopped_images interface~prif_stopped_images prif_stopped_images interface~prif_stopped_images->proc~prif_stopped_images Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_stopped_images.html"},{"title":"prif_this_image_no_coarray – Caffeine","text":"module procedure prif_this_image_no_coarray module procedure prif_this_image_no_coarray() Arguments None Calls proc~~prif_this_image_no_coarray~~CallsGraph proc~prif_this_image_no_coarray prif_this_image_no_coarray interface~caf_this_image caf_this_image proc~prif_this_image_no_coarray->interface~caf_this_image Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_this_image_no_coarray.html"},{"title":"prif_this_image_with_coarray – Caffeine","text":"module procedure prif_this_image_with_coarray module procedure prif_this_image_with_coarray() Arguments None Contents None","tags":"","loc":"proc/prif_this_image_with_coarray.html"},{"title":"prif_this_image_with_dim – Caffeine","text":"module procedure prif_this_image_with_dim module procedure prif_this_image_with_dim() Arguments None Contents None","tags":"","loc":"proc/prif_this_image_with_dim.html"},{"title":"prif_base_pointer – Caffeine","text":"module procedure prif_base_pointer module module subroutine prif_base_pointer(coarray_handle, coindices, team, team_number, ptr) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_intmax_t), intent(in) :: coindices (:) type( prif_team_type ), intent(in), optional :: team integer(kind=c_intmax_t), intent(in), optional :: team_number integer(kind=c_intptr_t), intent(out) :: ptr Called by proc~~prif_base_pointer~~CalledByGraph proc~prif_base_pointer prif_base_pointer interface~prif_base_pointer prif_base_pointer interface~prif_base_pointer->proc~prif_base_pointer Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_base_pointer.html"},{"title":"prif_get_context_data – Caffeine","text":"module procedure prif_get_context_data module module subroutine prif_get_context_data(coarray_handle, context_data) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle type(c_ptr), intent(out) :: context_data Called by proc~~prif_get_context_data~~CalledByGraph proc~prif_get_context_data prif_get_context_data interface~prif_get_context_data prif_get_context_data interface~prif_get_context_data->proc~prif_get_context_data Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_get_context_data.html"},{"title":"prif_local_data_size – Caffeine","text":"module procedure prif_local_data_size module module subroutine prif_local_data_size(coarray_handle, data_size) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(out) :: data_size Called by proc~~prif_local_data_size~~CalledByGraph proc~prif_local_data_size prif_local_data_size interface~prif_local_data_size prif_local_data_size interface~prif_local_data_size->proc~prif_local_data_size Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_local_data_size.html"},{"title":"prif_set_context_data – Caffeine","text":"module procedure prif_set_context_data module module subroutine prif_set_context_data(coarray_handle, context_data) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle type(c_ptr), intent(in) :: context_data Called by proc~~prif_set_context_data~~CalledByGraph proc~prif_set_context_data prif_set_context_data interface~prif_set_context_data prif_set_context_data interface~prif_set_context_data->proc~prif_set_context_data Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_set_context_data.html"},{"title":"prif_stop_character – Caffeine","text":"module procedure prif_stop_character module procedure prif_stop_character() Arguments None Calls proc~~prif_stop_character~~CallsGraph proc~prif_stop_character prif_stop_character interface~caf_decaffeinate caf_decaffeinate proc~prif_stop_character->interface~caf_decaffeinate Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_stop_character.html"},{"title":"prif_stop_integer – Caffeine","text":"module procedure prif_stop_integer module procedure prif_stop_integer() Arguments None Calls proc~~prif_stop_integer~~CallsGraph proc~prif_stop_integer prif_stop_integer interface~caf_decaffeinate caf_decaffeinate proc~prif_stop_integer->interface~caf_decaffeinate Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_stop_integer.html"},{"title":"prif_atomic_add – Caffeine","text":"module procedure prif_atomic_add module module subroutine prif_atomic_add(atom_remote_ptr, image_num, value, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat Called by proc~~prif_atomic_add~~CalledByGraph proc~prif_atomic_add prif_atomic_add interface~prif_atomic_add prif_atomic_add interface~prif_atomic_add->proc~prif_atomic_add Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_atomic_add.html"},{"title":"prif_atomic_and – Caffeine","text":"module procedure prif_atomic_and module module subroutine prif_atomic_and(atom_remote_ptr, image_num, value, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat Called by proc~~prif_atomic_and~~CalledByGraph proc~prif_atomic_and prif_atomic_and interface~prif_atomic_and prif_atomic_and interface~prif_atomic_and->proc~prif_atomic_and Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_atomic_and.html"},{"title":"prif_atomic_cas_int – Caffeine","text":"module procedure prif_atomic_cas_int module module subroutine prif_atomic_cas_int(atom_remote_ptr, image_num, old, compare, new, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=atomic_int_kind), intent(out) :: old integer(kind=atomic_int_kind), intent(in) :: compare integer(kind=atomic_int_kind), intent(in) :: new integer(kind=c_int), intent(out), optional :: stat Called by proc~~prif_atomic_cas_int~~CalledByGraph proc~prif_atomic_cas_int prif_atomic_cas_int interface~prif_atomic_cas_int prif_atomic_cas_int interface~prif_atomic_cas_int->proc~prif_atomic_cas_int interface~prif_atomic_cas prif_atomic_cas interface~prif_atomic_cas->interface~prif_atomic_cas_int Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_atomic_cas_int.html"},{"title":"prif_atomic_cas_logical – Caffeine","text":"module procedure prif_atomic_cas_logical module module subroutine prif_atomic_cas_logical(atom_remote_ptr, image_num, old, compare, new, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num logical(kind=atomic_logical_kind), intent(out) :: old logical(kind=atomic_logical_kind), intent(in) :: compare logical(kind=atomic_logical_kind), intent(in) :: new integer(kind=c_int), intent(out), optional :: stat Called by proc~~prif_atomic_cas_logical~~CalledByGraph proc~prif_atomic_cas_logical prif_atomic_cas_logical interface~prif_atomic_cas_logical prif_atomic_cas_logical interface~prif_atomic_cas_logical->proc~prif_atomic_cas_logical interface~prif_atomic_cas prif_atomic_cas interface~prif_atomic_cas->interface~prif_atomic_cas_logical Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_atomic_cas_logical.html"},{"title":"prif_atomic_define_int – Caffeine","text":"module procedure prif_atomic_define_int module module subroutine prif_atomic_define_int(atom_remote_ptr, image_num, value, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat Called by proc~~prif_atomic_define_int~~CalledByGraph proc~prif_atomic_define_int prif_atomic_define_int interface~prif_atomic_define_int prif_atomic_define_int interface~prif_atomic_define_int->proc~prif_atomic_define_int interface~prif_atomic_define prif_atomic_define interface~prif_atomic_define->interface~prif_atomic_define_int Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_atomic_define_int.html"},{"title":"prif_atomic_define_logical – Caffeine","text":"module procedure prif_atomic_define_logical module module subroutine prif_atomic_define_logical(atom_remote_ptr, image_num, value, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num logical(kind=atomic_logical_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat Called by proc~~prif_atomic_define_logical~~CalledByGraph proc~prif_atomic_define_logical prif_atomic_define_logical interface~prif_atomic_define_logical prif_atomic_define_logical interface~prif_atomic_define_logical->proc~prif_atomic_define_logical interface~prif_atomic_define prif_atomic_define interface~prif_atomic_define->interface~prif_atomic_define_logical Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_atomic_define_logical.html"},{"title":"prif_atomic_fetch_add – Caffeine","text":"module procedure prif_atomic_fetch_add module module subroutine prif_atomic_fetch_add(atom_remote_ptr, image_num, value, old, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=atomic_int_kind), intent(in) :: value integer(kind=atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat Called by proc~~prif_atomic_fetch_add~~CalledByGraph proc~prif_atomic_fetch_add prif_atomic_fetch_add interface~prif_atomic_fetch_add prif_atomic_fetch_add interface~prif_atomic_fetch_add->proc~prif_atomic_fetch_add Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_atomic_fetch_add.html"},{"title":"prif_atomic_fetch_and – Caffeine","text":"module procedure prif_atomic_fetch_and module module subroutine prif_atomic_fetch_and(atom_remote_ptr, image_num, value, old, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=atomic_int_kind), intent(in) :: value integer(kind=atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat Called by proc~~prif_atomic_fetch_and~~CalledByGraph proc~prif_atomic_fetch_and prif_atomic_fetch_and interface~prif_atomic_fetch_and prif_atomic_fetch_and interface~prif_atomic_fetch_and->proc~prif_atomic_fetch_and Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_atomic_fetch_and.html"},{"title":"prif_atomic_fetch_or – Caffeine","text":"module procedure prif_atomic_fetch_or module module subroutine prif_atomic_fetch_or(atom_remote_ptr, image_num, value, old, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=atomic_int_kind), intent(in) :: value integer(kind=atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat Called by proc~~prif_atomic_fetch_or~~CalledByGraph proc~prif_atomic_fetch_or prif_atomic_fetch_or interface~prif_atomic_fetch_or prif_atomic_fetch_or interface~prif_atomic_fetch_or->proc~prif_atomic_fetch_or Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_atomic_fetch_or.html"},{"title":"prif_atomic_fetch_xor – Caffeine","text":"module procedure prif_atomic_fetch_xor module module subroutine prif_atomic_fetch_xor(atom_remote_ptr, image_num, value, old, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=atomic_int_kind), intent(in) :: value integer(kind=atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat Called by proc~~prif_atomic_fetch_xor~~CalledByGraph proc~prif_atomic_fetch_xor prif_atomic_fetch_xor interface~prif_atomic_fetch_xor prif_atomic_fetch_xor interface~prif_atomic_fetch_xor->proc~prif_atomic_fetch_xor Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_atomic_fetch_xor.html"},{"title":"prif_atomic_or – Caffeine","text":"module procedure prif_atomic_or module module subroutine prif_atomic_or(atom_remote_ptr, image_num, value, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat Called by proc~~prif_atomic_or~~CalledByGraph proc~prif_atomic_or prif_atomic_or interface~prif_atomic_or prif_atomic_or interface~prif_atomic_or->proc~prif_atomic_or Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_atomic_or.html"},{"title":"prif_atomic_ref_int – Caffeine","text":"module procedure prif_atomic_ref_int module module subroutine prif_atomic_ref_int(value, atom_remote_ptr, image_num, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=atomic_int_kind), intent(out) :: value integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=c_int), intent(out), optional :: stat Called by proc~~prif_atomic_ref_int~~CalledByGraph proc~prif_atomic_ref_int prif_atomic_ref_int interface~prif_atomic_ref_int prif_atomic_ref_int interface~prif_atomic_ref_int->proc~prif_atomic_ref_int interface~prif_atomic_ref prif_atomic_ref interface~prif_atomic_ref->interface~prif_atomic_ref_int Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_atomic_ref_int.html"},{"title":"prif_atomic_ref_logical – Caffeine","text":"module procedure prif_atomic_ref_logical module module subroutine prif_atomic_ref_logical(value, atom_remote_ptr, image_num, stat) Interface → Arguments Type Intent Optional Attributes Name logical(kind=atomic_logical_kind), intent(out) :: value integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=c_int), intent(out), optional :: stat Called by proc~~prif_atomic_ref_logical~~CalledByGraph proc~prif_atomic_ref_logical prif_atomic_ref_logical interface~prif_atomic_ref_logical prif_atomic_ref_logical interface~prif_atomic_ref_logical->proc~prif_atomic_ref_logical interface~prif_atomic_ref prif_atomic_ref interface~prif_atomic_ref->interface~prif_atomic_ref_logical Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_atomic_ref_logical.html"},{"title":"prif_atomic_xor – Caffeine","text":"module procedure prif_atomic_xor module module subroutine prif_atomic_xor(atom_remote_ptr, image_num, value, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat Called by proc~~prif_atomic_xor~~CalledByGraph proc~prif_atomic_xor prif_atomic_xor interface~prif_atomic_xor prif_atomic_xor interface~prif_atomic_xor->proc~prif_atomic_xor Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_atomic_xor.html"},{"title":"prif_init – Caffeine","text":"module procedure prif_init module module subroutine prif_init(exit_code) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(out) :: exit_code Calls proc~~prif_init~~CallsGraph proc~prif_init prif_init interface~caf_caffeinate caf_caffeinate proc~prif_init->interface~caf_caffeinate interface~prif_sync_all prif_sync_all proc~prif_init->interface~prif_sync_all proc~prif_sync_all prif_sync_all interface~prif_sync_all->proc~prif_sync_all interface~caf_sync_all caf_sync_all proc~prif_sync_all->interface~caf_sync_all Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_init~~CalledByGraph proc~prif_init prif_init interface~prif_init prif_init interface~prif_init->proc~prif_init Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_init.html"},{"title":"prif_change_team – Caffeine","text":"module procedure prif_change_team module module subroutine prif_change_team(team, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in) :: team integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Called by proc~~prif_change_team~~CalledByGraph proc~prif_change_team prif_change_team interface~prif_change_team prif_change_team interface~prif_change_team->proc~prif_change_team Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_change_team.html"},{"title":"prif_end_team – Caffeine","text":"module procedure prif_end_team module module subroutine prif_end_team(stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Called by proc~~prif_end_team~~CalledByGraph proc~prif_end_team prif_end_team interface~prif_end_team prif_end_team interface~prif_end_team->proc~prif_end_team Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_end_team.html"},{"title":"prif_form_team – Caffeine","text":"module procedure prif_form_team module module subroutine prif_form_team(team_number, team, new_index, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_intmax_t), intent(in) :: team_number type( prif_team_type ), intent(out) :: team integer(kind=c_int), intent(in), optional :: new_index integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Called by proc~~prif_form_team~~CalledByGraph proc~prif_form_team prif_form_team interface~prif_form_team prif_form_team interface~prif_form_team->proc~prif_form_team Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_form_team.html"},{"title":"prif_get_team – Caffeine","text":"module procedure prif_get_team module module subroutine prif_get_team(level, team) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in), optional :: level type( prif_team_type ), intent(out) :: team Called by proc~~prif_get_team~~CalledByGraph proc~prif_get_team prif_get_team interface~prif_get_team prif_get_team interface~prif_get_team->proc~prif_get_team Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_get_team.html"},{"title":"prif_team_number – Caffeine","text":"module procedure prif_team_number module module subroutine prif_team_number(team, team_number) Interface → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in), optional :: team integer(kind=c_intmax_t), intent(out) :: team_number Called by proc~~prif_team_number~~CalledByGraph proc~prif_team_number prif_team_number interface~prif_team_number prif_team_number interface~prif_team_number->proc~prif_team_number Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_team_number.html"},{"title":"prif_critical – Caffeine","text":"module procedure prif_critical module module subroutine prif_critical(critical_coarray, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: critical_coarray integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Called by proc~~prif_critical~~CalledByGraph proc~prif_critical prif_critical interface~prif_critical prif_critical interface~prif_critical->proc~prif_critical Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_critical.html"},{"title":"prif_end_critical – Caffeine","text":"module procedure prif_end_critical module module subroutine prif_end_critical(critical_coarray) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: critical_coarray Called by proc~~prif_end_critical~~CalledByGraph proc~prif_end_critical prif_end_critical interface~prif_end_critical prif_end_critical interface~prif_end_critical->proc~prif_end_critical Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_end_critical.html"},{"title":"prif_get – Caffeine","text":"module procedure prif_get module module subroutine prif_get(coarray_handle, coindices, first_element_addr, value, team, team_number, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_intmax_t), intent(in) :: coindices (:) type(c_ptr), intent(in) :: first_element_addr type(*), intent(inout), dimension(..), contiguous :: value type( prif_team_type ), intent(in), optional :: team integer(kind=c_intmax_t), intent(in), optional :: team_number integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Called by proc~~prif_get~~CalledByGraph proc~prif_get prif_get interface~prif_get prif_get interface~prif_get->proc~prif_get Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_get.html"},{"title":"prif_get_raw – Caffeine","text":"module procedure prif_get_raw module module subroutine prif_get_raw(image_num, local_buffer, remote_ptr, size, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type(c_ptr), intent(in) :: local_buffer integer(kind=c_intptr_t), intent(in) :: remote_ptr integer(kind=c_size_t), intent(in) :: size integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Called by proc~~prif_get_raw~~CalledByGraph proc~prif_get_raw prif_get_raw interface~prif_get_raw prif_get_raw interface~prif_get_raw->proc~prif_get_raw Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_get_raw.html"},{"title":"prif_get_raw_strided – Caffeine","text":"module procedure prif_get_raw_strided module module subroutine prif_get_raw_strided(image_num, local_buffer, remote_ptr, element_size, extent, remote_ptr_stride, local_buffer_stride, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type(c_ptr), intent(in) :: local_buffer integer(kind=c_intptr_t), intent(in) :: remote_ptr integer(kind=c_size_t), intent(in) :: element_size integer(kind=c_size_t), intent(in) :: extent (:) integer(kind=c_ptrdiff_t), intent(in) :: remote_ptr_stride (:) integer(kind=c_ptrdiff_t), intent(in) :: local_buffer_stride (:) integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Called by proc~~prif_get_raw_strided~~CalledByGraph proc~prif_get_raw_strided prif_get_raw_strided interface~prif_get_raw_strided prif_get_raw_strided interface~prif_get_raw_strided->proc~prif_get_raw_strided Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_get_raw_strided.html"},{"title":"prif_put – Caffeine","text":"module procedure prif_put module module subroutine prif_put(coarray_handle, coindices, value, first_element_addr, team, team_number, notify_ptr, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_intmax_t), intent(in) :: coindices (:) type(*), intent(in), dimension(..), contiguous :: value type(c_ptr), intent(in) :: first_element_addr type( prif_team_type ), intent(in), optional :: team integer(kind=c_intmax_t), intent(in), optional :: team_number integer(kind=c_intptr_t), intent(in), optional :: notify_ptr integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Called by proc~~prif_put~~CalledByGraph proc~prif_put prif_put interface~prif_put prif_put interface~prif_put->proc~prif_put Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_put.html"},{"title":"prif_put_raw – Caffeine","text":"module procedure prif_put_raw module module subroutine prif_put_raw(image_num, local_buffer, remote_ptr, notify_ptr, size, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type(c_ptr), intent(in) :: local_buffer integer(kind=c_intptr_t), intent(in) :: remote_ptr integer(kind=c_intptr_t), intent(in), optional :: notify_ptr integer(kind=c_size_t), intent(in) :: size integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Called by proc~~prif_put_raw~~CalledByGraph proc~prif_put_raw prif_put_raw interface~prif_put_raw prif_put_raw interface~prif_put_raw->proc~prif_put_raw Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_put_raw.html"},{"title":"prif_put_raw_strided – Caffeine","text":"module procedure prif_put_raw_strided module module subroutine prif_put_raw_strided(image_num, local_buffer, remote_ptr, element_size, extent, remote_ptr_stride, local_buffer_stride, notify_ptr, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type(c_ptr), intent(in) :: local_buffer integer(kind=c_intptr_t), intent(in) :: remote_ptr integer(kind=c_size_t), intent(in) :: element_size integer(kind=c_size_t), intent(in) :: extent (:) integer(kind=c_ptrdiff_t), intent(in) :: remote_ptr_stride (:) integer(kind=c_ptrdiff_t), intent(in) :: local_buffer_stride (:) integer(kind=c_intptr_t), intent(in), optional :: notify_ptr integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Called by proc~~prif_put_raw_strided~~CalledByGraph proc~prif_put_raw_strided prif_put_raw_strided interface~prif_put_raw_strided prif_put_raw_strided interface~prif_put_raw_strided->proc~prif_put_raw_strided Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_put_raw_strided.html"},{"title":"prif_alias_create – Caffeine","text":"module procedure prif_alias_create module module subroutine prif_alias_create(source_handle, alias_co_lbounds, alias_co_ubounds, alias_handle) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: source_handle integer(kind=c_intmax_t), intent(in) :: alias_co_lbounds (:) integer(kind=c_intmax_t), intent(in) :: alias_co_ubounds (:) type( prif_coarray_handle ), intent(out) :: alias_handle Called by proc~~prif_alias_create~~CalledByGraph proc~prif_alias_create prif_alias_create interface~prif_alias_create prif_alias_create interface~prif_alias_create->proc~prif_alias_create Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_alias_create.html"},{"title":"prif_alias_destroy – Caffeine","text":"module procedure prif_alias_destroy module module subroutine prif_alias_destroy(alias_handle) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: alias_handle Called by proc~~prif_alias_destroy~~CalledByGraph proc~prif_alias_destroy prif_alias_destroy interface~prif_alias_destroy prif_alias_destroy interface~prif_alias_destroy->proc~prif_alias_destroy Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_alias_destroy.html"},{"title":"prif_lock – Caffeine","text":"module procedure prif_lock module module subroutine prif_lock(image_num, lock_var_ptr, acquired_lock, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: lock_var_ptr logical(kind=c_bool), intent(out), optional :: acquired_lock integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Called by proc~~prif_lock~~CalledByGraph proc~prif_lock prif_lock interface~prif_lock prif_lock interface~prif_lock->proc~prif_lock Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_lock.html"},{"title":"prif_unlock – Caffeine","text":"module procedure prif_unlock module module subroutine prif_unlock(image_num, lock_var_ptr, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: lock_var_ptr integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Called by proc~~prif_unlock~~CalledByGraph proc~prif_unlock prif_unlock interface~prif_unlock prif_unlock interface~prif_unlock->proc~prif_unlock Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_unlock.html"},{"title":"prif_event_post – Caffeine","text":"module procedure prif_event_post module module subroutine prif_event_post(image_num, event_var_ptr, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: event_var_ptr integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Called by proc~~prif_event_post~~CalledByGraph proc~prif_event_post prif_event_post interface~prif_event_post prif_event_post interface~prif_event_post->proc~prif_event_post Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_event_post.html"},{"title":"prif_event_query – Caffeine","text":"module procedure prif_event_query module module subroutine prif_event_query(event_var_ptr, count, stat) Interface → Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in) :: event_var_ptr integer(kind=c_intmax_t), intent(out) :: count integer(kind=c_int), intent(out), optional :: stat Called by proc~~prif_event_query~~CalledByGraph proc~prif_event_query prif_event_query interface~prif_event_query prif_event_query interface~prif_event_query->proc~prif_event_query Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_event_query.html"},{"title":"prif_event_wait – Caffeine","text":"module procedure prif_event_wait module module subroutine prif_event_wait(event_var_ptr, until_count, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in) :: event_var_ptr integer(kind=c_intmax_t), intent(in), optional :: until_count integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Called by proc~~prif_event_wait~~CalledByGraph proc~prif_event_wait prif_event_wait interface~prif_event_wait prif_event_wait interface~prif_event_wait->proc~prif_event_wait Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_event_wait.html"},{"title":"prif_notify_wait – Caffeine","text":"module procedure prif_notify_wait module module subroutine prif_notify_wait(notify_var_ptr, until_count, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in) :: notify_var_ptr integer(kind=c_intmax_t), intent(in), optional :: until_count integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Called by proc~~prif_notify_wait~~CalledByGraph proc~prif_notify_wait prif_notify_wait interface~prif_notify_wait prif_notify_wait interface~prif_notify_wait->proc~prif_notify_wait Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_notify_wait.html"},{"title":"prif_coshape – Caffeine","text":"module procedure prif_coshape module module subroutine prif_coshape(coarray_handle, sizes) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(out) :: sizes (:) Called by proc~~prif_coshape~~CalledByGraph proc~prif_coshape prif_coshape interface~prif_coshape prif_coshape interface~prif_coshape->proc~prif_coshape Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_coshape.html"},{"title":"prif_image_index – Caffeine","text":"module procedure prif_image_index module module subroutine prif_image_index(coarray_handle, sub, team, team_number, image_index) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_intmax_t), intent(in) :: sub (:) type( prif_team_type ), intent(in), optional :: team integer(kind=c_int), intent(in), optional :: team_number integer(kind=c_int), intent(out) :: image_index Called by proc~~prif_image_index~~CalledByGraph proc~prif_image_index prif_image_index interface~prif_image_index prif_image_index interface~prif_image_index->proc~prif_image_index Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_image_index.html"},{"title":"prif_lcobound_no_dim – Caffeine","text":"module procedure prif_lcobound_no_dim module module subroutine prif_lcobound_no_dim(coarray_handle, lcobounds) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_intmax_t), intent(out) :: lcobounds (:) Called by proc~~prif_lcobound_no_dim~~CalledByGraph proc~prif_lcobound_no_dim prif_lcobound_no_dim interface~prif_lcobound_no_dim prif_lcobound_no_dim interface~prif_lcobound_no_dim->proc~prif_lcobound_no_dim interface~prif_lcobound prif_lcobound interface~prif_lcobound->interface~prif_lcobound_no_dim Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_lcobound_no_dim.html"},{"title":"prif_lcobound_with_dim – Caffeine","text":"module procedure prif_lcobound_with_dim module module subroutine prif_lcobound_with_dim(coarray_handle, dim, lcobound) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_int), intent(in) :: dim integer(kind=c_intmax_t), intent(out) :: lcobound Called by proc~~prif_lcobound_with_dim~~CalledByGraph proc~prif_lcobound_with_dim prif_lcobound_with_dim interface~prif_lcobound_with_dim prif_lcobound_with_dim interface~prif_lcobound_with_dim->proc~prif_lcobound_with_dim interface~prif_lcobound prif_lcobound interface~prif_lcobound->interface~prif_lcobound_with_dim Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_lcobound_with_dim.html"},{"title":"prif_ucobound_no_dim – Caffeine","text":"module procedure prif_ucobound_no_dim module module subroutine prif_ucobound_no_dim(coarray_handle, ucobounds) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_intmax_t), intent(out) :: ucobounds (:) Called by proc~~prif_ucobound_no_dim~~CalledByGraph proc~prif_ucobound_no_dim prif_ucobound_no_dim interface~prif_ucobound_no_dim prif_ucobound_no_dim interface~prif_ucobound_no_dim->proc~prif_ucobound_no_dim interface~prif_ucobound prif_ucobound interface~prif_ucobound->interface~prif_ucobound_no_dim Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_ucobound_no_dim.html"},{"title":"prif_ucobound_with_dim – Caffeine","text":"module procedure prif_ucobound_with_dim module module subroutine prif_ucobound_with_dim(coarray_handle, dim, ucobound) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_int), intent(in) :: dim integer(kind=c_intmax_t), intent(out) :: ucobound Called by proc~~prif_ucobound_with_dim~~CalledByGraph proc~prif_ucobound_with_dim prif_ucobound_with_dim interface~prif_ucobound_with_dim prif_ucobound_with_dim interface~prif_ucobound_with_dim->proc~prif_ucobound_with_dim interface~prif_ucobound prif_ucobound interface~prif_ucobound->interface~prif_ucobound_with_dim Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_ucobound_with_dim.html"},{"title":"prif_error_stop – Caffeine","text":"module procedure prif_error_stop pure module module subroutine prif_error_stop(quiet, stop_code_int, stop_code_char) Interface → Arguments Type Intent Optional Attributes Name logical(kind=c_bool), intent(in) :: quiet integer(kind=c_int), intent(in), optional :: stop_code_int character(len=*), intent(in), optional :: stop_code_char Calls proc~~prif_error_stop~~CallsGraph proc~prif_error_stop prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_error_stop~~CalledByGraph proc~prif_error_stop prif_error_stop interface~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~assert assert proc~assert->interface~prif_error_stop proc~construct construct proc~construct->interface~prif_error_stop proc~prif_co_min prif_co_min proc~prif_co_min->interface~prif_error_stop interface~prif_co_reduce prif_co_reduce proc~prif_co_min->interface~prif_co_reduce proc~as_character as_character proc~as_character->interface~prif_error_stop proc~prif_co_max prif_co_max proc~prif_co_max->interface~prif_error_stop proc~prif_co_max->interface~prif_co_reduce proc~prif_co_reduce prif_co_reduce proc~prif_co_reduce->interface~prif_error_stop interface~assert assert proc~prif_co_reduce->interface~assert interface~prif_co_reduce->proc~prif_co_reduce interface~assert->proc~assert interface~as_character as_character interface~as_character->proc~as_character interface~prif_co_max prif_co_max interface~prif_co_max->proc~prif_co_max interface~prif_co_min prif_co_min interface~prif_co_min->proc~prif_co_min Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_error_stop.html"},{"title":"prif_fail_image – Caffeine","text":"module procedure prif_fail_image module module subroutine prif_fail_image() Interface → Arguments None Called by proc~~prif_fail_image~~CalledByGraph proc~prif_fail_image prif_fail_image interface~prif_fail_image prif_fail_image interface~prif_fail_image->proc~prif_fail_image Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_fail_image.html"},{"title":"prif_stop – Caffeine","text":"module procedure prif_stop module module subroutine prif_stop(quiet, stop_code_int, stop_code_char) Interface → Arguments Type Intent Optional Attributes Name logical(kind=c_bool), intent(in) :: quiet integer(kind=c_int), intent(in), optional :: stop_code_int character(len=*), intent(in), optional :: stop_code_char Called by proc~~prif_stop~~CalledByGraph proc~prif_stop prif_stop interface~prif_stop prif_stop interface~prif_stop->proc~prif_stop Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_stop.html"},{"title":"prif_sync_all – Caffeine","text":"module procedure prif_sync_all module module subroutine prif_sync_all(stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_sync_all~~CallsGraph proc~prif_sync_all prif_sync_all interface~caf_sync_all caf_sync_all proc~prif_sync_all->interface~caf_sync_all Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_sync_all~~CalledByGraph proc~prif_sync_all prif_sync_all interface~prif_sync_all prif_sync_all interface~prif_sync_all->proc~prif_sync_all proc~prif_init prif_init proc~prif_init->interface~prif_sync_all interface~prif_init prif_init interface~prif_init->proc~prif_init Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_sync_all.html"},{"title":"prif_sync_images – Caffeine","text":"module procedure prif_sync_images module module subroutine prif_sync_images(image_set, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in), optional :: image_set (:) integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Called by proc~~prif_sync_images~~CalledByGraph proc~prif_sync_images prif_sync_images interface~prif_sync_images prif_sync_images interface~prif_sync_images->proc~prif_sync_images Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_sync_images.html"},{"title":"prif_sync_memory – Caffeine","text":"module procedure prif_sync_memory module module subroutine prif_sync_memory(stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Called by proc~~prif_sync_memory~~CalledByGraph proc~prif_sync_memory prif_sync_memory interface~prif_sync_memory prif_sync_memory interface~prif_sync_memory->proc~prif_sync_memory Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_sync_memory.html"},{"title":"prif_sync_team – Caffeine","text":"module procedure prif_sync_team module module subroutine prif_sync_team(team, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in) :: team integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Called by proc~~prif_sync_team~~CalledByGraph proc~prif_sync_team prif_sync_team interface~prif_sync_team prif_sync_team interface~prif_sync_team->proc~prif_sync_team Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_sync_team.html"},{"title":"prif_co_broadcast – Caffeine","text":"module procedure prif_co_broadcast module module subroutine prif_co_broadcast(a, source_image, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer(kind=c_int), intent(in) :: source_image integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_co_broadcast~~CallsGraph proc~prif_co_broadcast prif_co_broadcast proc~get_c_ptr get_c_ptr proc~prif_co_broadcast->proc~get_c_ptr interface~caf_co_broadcast caf_co_broadcast proc~prif_co_broadcast->interface~caf_co_broadcast Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_co_broadcast~~CalledByGraph proc~prif_co_broadcast prif_co_broadcast interface~prif_co_broadcast prif_co_broadcast interface~prif_co_broadcast->proc~prif_co_broadcast Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_co_broadcast.html"},{"title":"prif_co_reduce – Caffeine","text":"module procedure prif_co_reduce module module subroutine prif_co_reduce(a, operation, result_image, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) type(c_funptr), value :: operation integer(kind=c_int), intent(in), optional :: result_image integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_co_reduce~~CallsGraph proc~prif_co_reduce prif_co_reduce interface~caf_same_cfi_type caf_same_cfi_type proc~prif_co_reduce->interface~caf_same_cfi_type interface~caf_is_f_string caf_is_f_string proc~prif_co_reduce->interface~caf_is_f_string proc~optional_value optional_value proc~prif_co_reduce->proc~optional_value interface~caf_co_reduce caf_co_reduce proc~prif_co_reduce->interface~caf_co_reduce proc~get_c_ptr get_c_ptr proc~prif_co_reduce->proc~get_c_ptr interface~assert assert proc~prif_co_reduce->interface~assert proc~get_c_ptr_character get_c_ptr_character proc~prif_co_reduce->proc~get_c_ptr_character interface~caf_elem_len caf_elem_len proc~prif_co_reduce->interface~caf_elem_len interface~prif_error_stop prif_error_stop proc~prif_co_reduce->interface~prif_error_stop proc~assert assert interface~assert->proc~assert proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~assert->interface~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_co_reduce~~CalledByGraph proc~prif_co_reduce prif_co_reduce interface~prif_co_reduce prif_co_reduce interface~prif_co_reduce->proc~prif_co_reduce proc~prif_co_max prif_co_max proc~prif_co_max->interface~prif_co_reduce proc~prif_co_min prif_co_min proc~prif_co_min->interface~prif_co_reduce interface~prif_co_max prif_co_max interface~prif_co_max->proc~prif_co_max interface~prif_co_min prif_co_min interface~prif_co_min->proc~prif_co_min Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_co_reduce.html"},{"title":"prif_co_sum – Caffeine","text":"module procedure prif_co_sum module module subroutine prif_co_sum(a, result_image, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer(kind=c_int), intent(in), optional :: result_image integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_co_sum~~CallsGraph proc~prif_co_sum prif_co_sum proc~get_c_ptr get_c_ptr proc~prif_co_sum->proc~get_c_ptr proc~optional_value optional_value proc~prif_co_sum->proc~optional_value proc~get_c_ptr_character get_c_ptr_character proc~prif_co_sum->proc~get_c_ptr_character interface~caf_co_sum caf_co_sum proc~prif_co_sum->interface~caf_co_sum Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_co_sum~~CalledByGraph proc~prif_co_sum prif_co_sum interface~prif_co_sum prif_co_sum interface~prif_co_sum->proc~prif_co_sum Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_co_sum.html"},{"title":"prif_co_max – Caffeine","text":"module procedure prif_co_max module module subroutine prif_co_max(a, result_image, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer(kind=c_int), intent(in), optional :: result_image integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_co_max~~CallsGraph proc~prif_co_max prif_co_max interface~caf_co_max caf_co_max proc~prif_co_max->interface~caf_co_max interface~caf_is_f_string caf_is_f_string proc~prif_co_max->interface~caf_is_f_string interface~prif_co_reduce prif_co_reduce proc~prif_co_max->interface~prif_co_reduce proc~optional_value optional_value proc~prif_co_max->proc~optional_value proc~get_c_ptr get_c_ptr proc~prif_co_max->proc~get_c_ptr interface~caf_numeric_type caf_numeric_type proc~prif_co_max->interface~caf_numeric_type proc~get_c_ptr_character get_c_ptr_character proc~prif_co_max->proc~get_c_ptr_character interface~prif_error_stop prif_error_stop proc~prif_co_max->interface~prif_error_stop proc~prif_co_reduce prif_co_reduce interface~prif_co_reduce->proc~prif_co_reduce proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_co_reduce->interface~caf_is_f_string proc~prif_co_reduce->proc~optional_value proc~prif_co_reduce->proc~get_c_ptr proc~prif_co_reduce->proc~get_c_ptr_character proc~prif_co_reduce->interface~prif_error_stop interface~caf_same_cfi_type caf_same_cfi_type proc~prif_co_reduce->interface~caf_same_cfi_type interface~caf_co_reduce caf_co_reduce proc~prif_co_reduce->interface~caf_co_reduce interface~caf_elem_len caf_elem_len proc~prif_co_reduce->interface~caf_elem_len interface~assert assert proc~prif_co_reduce->interface~assert proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string proc~assert assert interface~assert->proc~assert proc~assert->interface~prif_error_stop Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_co_max~~CalledByGraph proc~prif_co_max prif_co_max interface~prif_co_max prif_co_max interface~prif_co_max->proc~prif_co_max Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_co_max.html"},{"title":"prif_co_min – Caffeine","text":"module procedure prif_co_min module module subroutine prif_co_min(a, result_image, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer(kind=c_int), intent(in), optional :: result_image integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Calls proc~~prif_co_min~~CallsGraph proc~prif_co_min prif_co_min proc~optional_value optional_value proc~prif_co_min->proc~optional_value interface~prif_co_reduce prif_co_reduce proc~prif_co_min->interface~prif_co_reduce interface~caf_is_f_string caf_is_f_string proc~prif_co_min->interface~caf_is_f_string proc~get_c_ptr get_c_ptr proc~prif_co_min->proc~get_c_ptr interface~caf_numeric_type caf_numeric_type proc~prif_co_min->interface~caf_numeric_type interface~caf_co_min caf_co_min proc~prif_co_min->interface~caf_co_min proc~get_c_ptr_character get_c_ptr_character proc~prif_co_min->proc~get_c_ptr_character interface~prif_error_stop prif_error_stop proc~prif_co_min->interface~prif_error_stop proc~prif_co_reduce prif_co_reduce interface~prif_co_reduce->proc~prif_co_reduce proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_co_reduce->proc~optional_value proc~prif_co_reduce->interface~caf_is_f_string proc~prif_co_reduce->proc~get_c_ptr proc~prif_co_reduce->proc~get_c_ptr_character proc~prif_co_reduce->interface~prif_error_stop interface~caf_same_cfi_type caf_same_cfi_type proc~prif_co_reduce->interface~caf_same_cfi_type interface~caf_co_reduce caf_co_reduce proc~prif_co_reduce->interface~caf_co_reduce interface~caf_elem_len caf_elem_len proc~prif_co_reduce->interface~caf_elem_len interface~assert assert proc~prif_co_reduce->interface~assert proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string proc~assert assert interface~assert->proc~assert proc~assert->interface~prif_error_stop Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~prif_co_min~~CalledByGraph proc~prif_co_min prif_co_min interface~prif_co_min prif_co_min interface~prif_co_min->proc~prif_co_min Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/prif_co_min.html"},{"title":"assert – Caffeine","text":"module procedure assert module module subroutine assert(assertion, description, diagnostic_data) Interface → Uses image_queries_m caffeine_characterizable_m program_termination_m proc~~assert~~UsesGraph proc~assert assert module~image_queries_m image_queries_m proc~assert->module~image_queries_m module~caffeine_characterizable_m caffeine_characterizable_m proc~assert->module~caffeine_characterizable_m module~program_termination_m program_termination_m proc~assert->module~program_termination_m module~teams_m teams_m module~image_queries_m->module~teams_m module~allocation_m allocation_m module~image_queries_m->module~allocation_m iso_c_binding iso_c_binding module~image_queries_m->iso_c_binding module~program_termination_m->iso_c_binding module~teams_m->iso_c_binding module~allocation_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Arguments Type Intent Optional Attributes Name logical, intent(in) :: assertion Most assertions will be expressions such as i>0 character(len=*), intent(in) :: description A brief statement of what is being asserted such as \"i>0\" or \"positive i\" class(*), intent(in), optional :: diagnostic_data Data to include in an error ouptput: may be of an intrinsic type or a type that extends characterizable_t Calls proc~~assert~~CallsGraph proc~assert assert interface~prif_error_stop prif_error_stop proc~assert->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~assert~~CalledByGraph proc~assert assert interface~assert assert interface~assert->proc~assert proc~prif_co_reduce prif_co_reduce proc~prif_co_reduce->interface~assert interface~prif_co_reduce prif_co_reduce interface~prif_co_reduce->proc~prif_co_reduce proc~prif_co_max prif_co_max proc~prif_co_max->interface~prif_co_reduce proc~prif_co_min prif_co_min proc~prif_co_min->interface~prif_co_reduce interface~prif_co_max prif_co_max interface~prif_co_max->proc~prif_co_max interface~prif_co_min prif_co_min interface~prif_co_min->proc~prif_co_min Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/assert.html"},{"title":"as_character – Caffeine","text":"module procedure as_character pure module module function as_character(self) result(character_self) Interface → Arguments Type Intent Optional Attributes Name class( intrinsic_array_t ), intent(in) :: self Return Value character(len=:),allocatable Calls proc~~as_character~~CallsGraph proc~as_character as_character interface~prif_error_stop prif_error_stop proc~as_character->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~as_character~~CalledByGraph proc~as_character as_character interface~as_character as_character interface~as_character->proc~as_character Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/as_character.html"},{"title":"construct – Caffeine","text":"module procedure construct module procedure construct() Arguments None Calls proc~~construct~~CallsGraph proc~construct construct interface~prif_error_stop prif_error_stop proc~construct->interface~prif_error_stop proc~prif_error_stop prif_error_stop interface~prif_error_stop->proc~prif_error_stop proc~prif_error_stop_character prif_error_stop_character proc~prif_error_stop->proc~prif_error_stop_character proc~prif_error_stop_integer prif_error_stop_integer proc~prif_error_stop->proc~prif_error_stop_integer proc~f_c_string f_c_string proc~prif_error_stop_character->proc~f_c_string Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/construct.html"},{"title":"prif – Caffeine","text":"Uses prif_queries_m critical_m coarray_queries_m atomic_m program_startup_m teams_m alias_m program_termination_m synchronization_m coarray_access_m events_m locks_m notify_m allocation_m image_queries_m collective_subroutines_m module~~prif~~UsesGraph module~prif prif module~prif_queries_m prif_queries_m module~prif->module~prif_queries_m module~program_startup_m program_startup_m module~prif->module~program_startup_m module~synchronization_m synchronization_m module~prif->module~synchronization_m module~teams_m teams_m module~prif->module~teams_m module~atomic_m atomic_m module~prif->module~atomic_m module~events_m events_m module~prif->module~events_m module~locks_m locks_m module~prif->module~locks_m module~collective_subroutines_m collective_subroutines_m module~prif->module~collective_subroutines_m module~critical_m critical_m module~prif->module~critical_m module~coarray_queries_m coarray_queries_m module~prif->module~coarray_queries_m module~alias_m alias_m module~prif->module~alias_m module~program_termination_m program_termination_m module~prif->module~program_termination_m module~coarray_access_m coarray_access_m module~prif->module~coarray_access_m module~notify_m notify_m module~prif->module~notify_m module~allocation_m allocation_m module~prif->module~allocation_m module~image_queries_m image_queries_m module~prif->module~image_queries_m module~prif_queries_m->module~teams_m module~prif_queries_m->module~allocation_m iso_c_binding iso_c_binding module~prif_queries_m->iso_c_binding module~program_startup_m->module~teams_m module~program_startup_m->iso_c_binding module~synchronization_m->module~teams_m module~synchronization_m->iso_c_binding module~teams_m->iso_c_binding module~atomic_m->iso_c_binding iso_fortran_env iso_fortran_env module~atomic_m->iso_fortran_env module~events_m->iso_c_binding module~locks_m->iso_c_binding module~collective_subroutines_m->iso_c_binding module~critical_m->module~locks_m module~critical_m->module~allocation_m module~critical_m->iso_c_binding module~coarray_queries_m->module~teams_m module~coarray_queries_m->module~allocation_m module~coarray_queries_m->iso_c_binding module~alias_m->module~allocation_m module~alias_m->iso_c_binding module~program_termination_m->iso_c_binding module~coarray_access_m->module~teams_m module~coarray_access_m->module~allocation_m module~coarray_access_m->iso_c_binding module~notify_m->iso_c_binding module~allocation_m->iso_c_binding module~image_queries_m->module~teams_m module~image_queries_m->module~allocation_m module~image_queries_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"module/prif.html"},{"title":"alias_m – Caffeine","text":"Uses allocation_m iso_c_binding module~~alias_m~~UsesGraph module~alias_m alias_m module~allocation_m allocation_m module~alias_m->module~allocation_m iso_c_binding iso_c_binding module~alias_m->iso_c_binding module~allocation_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by Descendants: alias_s module~~alias_m~~UsedByGraph module~alias_m alias_m module~prif prif module~prif->module~alias_m module~alias_s alias_s module~alias_s->module~alias_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Interfaces prif_alias_create prif_alias_destroy Interfaces interface public module module subroutine prif_alias_create(source_handle, alias_co_lbounds, alias_co_ubounds, alias_handle) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: source_handle integer(kind=c_intmax_t), intent(in) :: alias_co_lbounds (:) integer(kind=c_intmax_t), intent(in) :: alias_co_ubounds (:) type( prif_coarray_handle ), intent(out) :: alias_handle interface public module module subroutine prif_alias_destroy(alias_handle) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: alias_handle","tags":"","loc":"module/alias_m.html"},{"title":"image_queries_m – Caffeine","text":"Uses teams_m allocation_m iso_c_binding module~~image_queries_m~~UsesGraph module~image_queries_m image_queries_m module~teams_m teams_m module~image_queries_m->module~teams_m module~allocation_m allocation_m module~image_queries_m->module~allocation_m iso_c_binding iso_c_binding module~image_queries_m->iso_c_binding module~teams_m->iso_c_binding module~allocation_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by Descendants: image_queries_s module~~image_queries_m~~UsedByGraph module~image_queries_m image_queries_m proc~assert assert proc~assert->module~image_queries_m module~image_queries_s image_queries_s module~image_queries_s->module~image_queries_m module~prif prif module~prif->module~image_queries_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Interfaces prif_failed_images prif_image_status prif_num_images prif_stopped_images prif_this_image Interfaces interface public module module subroutine prif_failed_images(team, failed_images) Implementation → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in), optional :: team integer(kind=c_int), intent(out), allocatable :: failed_images (:) interface public impure elemental module module subroutine prif_image_status(image, team, image_status) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image type( prif_team_type ), intent(in), optional :: team integer(kind=c_int), intent(out) :: image_status interface public module module subroutine prif_num_images(team, team_number, image_count) Implementation → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in), optional :: team integer(kind=c_intmax_t), intent(in), optional :: team_number integer(kind=c_int), intent(out) :: image_count interface public module module subroutine prif_stopped_images(team, stopped_images) Implementation → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in), optional :: team integer(kind=c_int), intent(out), allocatable :: stopped_images (:) public interface prif_this_image private module subroutine prif_this_image_no_coarray(team, image_index) Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in), optional :: team integer(kind=c_int), intent(out) :: image_index private module subroutine prif_this_image_with_coarray(coarray_handle, team, cosubscripts) Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle type( prif_team_type ), intent(in), optional :: team integer(kind=c_intmax_t), intent(out) :: cosubscripts (:) private module subroutine prif_this_image_with_dim(coarray_handle, dim, team, cosubscript) Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_int), intent(in) :: dim type( prif_team_type ), intent(in), optional :: team integer(kind=c_intmax_t), intent(out) :: cosubscript","tags":"","loc":"module/image_queries_m.html"},{"title":"critical_m – Caffeine","text":"Uses locks_m allocation_m iso_c_binding module~~critical_m~~UsesGraph module~critical_m critical_m module~locks_m locks_m module~critical_m->module~locks_m module~allocation_m allocation_m module~critical_m->module~allocation_m iso_c_binding iso_c_binding module~critical_m->iso_c_binding module~locks_m->iso_c_binding module~allocation_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by Descendants: critical_s module~~critical_m~~UsedByGraph module~critical_m critical_m module~prif prif module~prif->module~critical_m module~critical_s critical_s module~critical_s->module~critical_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Interfaces prif_critical prif_end_critical Interfaces interface public module module subroutine prif_critical(critical_coarray, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: critical_coarray integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_end_critical(critical_coarray) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: critical_coarray","tags":"","loc":"module/critical_m.html"},{"title":"program_startup_m – Caffeine","text":"Uses teams_m iso_c_binding module~~program_startup_m~~UsesGraph module~program_startup_m program_startup_m module~teams_m teams_m module~program_startup_m->module~teams_m iso_c_binding iso_c_binding module~program_startup_m->iso_c_binding module~teams_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by Descendants: program_startup_s module~~program_startup_m~~UsedByGraph module~program_startup_m program_startup_m module~prif prif module~prif->module~program_startup_m module~program_startup_s program_startup_s module~program_startup_s->module~program_startup_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables default_team Interfaces prif_init Variables Type Visibility Attributes Name Initial type( prif_team_type ), public, target :: default_team Interfaces interface public module module subroutine prif_init(exit_code) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(out) :: exit_code","tags":"","loc":"module/program_startup_m.html"},{"title":"notify_m – Caffeine","text":"Uses iso_c_binding module~~notify_m~~UsesGraph module~notify_m notify_m iso_c_binding iso_c_binding module~notify_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by Descendants: notify_s module~~notify_m~~UsedByGraph module~notify_m notify_m module~prif prif module~prif->module~notify_m module~notify_s notify_s module~notify_s->module~notify_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Interfaces prif_notify_wait Derived Types prif_notify_type Interfaces interface public module module subroutine prif_notify_wait(notify_var_ptr, until_count, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in) :: notify_var_ptr integer(kind=c_intmax_t), intent(in), optional :: until_count integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Derived Types type, public :: prif_notify_type","tags":"","loc":"module/notify_m.html"},{"title":"caffeine_h_m – Caffeine","text":"Uses iso_c_binding module~~caffeine_h_m~~UsesGraph module~caffeine_h_m caffeine_h_m iso_c_binding iso_c_binding module~caffeine_h_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by module~~caffeine_h_m~~UsedByGraph module~caffeine_h_m caffeine_h_m module~program_startup_s program_startup_s module~program_startup_s->module~caffeine_h_m module~sychronization_s sychronization_s module~sychronization_s->module~caffeine_h_m module~image_queries_s image_queries_s module~image_queries_s->module~caffeine_h_m module~co_reduce_s co_reduce_s module~co_reduce_s->module~caffeine_h_m module~normal_termination_s normal_termination_s module~normal_termination_s->module~caffeine_h_m module~co_max_s co_max_s module~co_max_s->module~caffeine_h_m proc~prif_allocate prif_allocate proc~prif_allocate->module~caffeine_h_m module~program_termination_s program_termination_s module~program_termination_s->module~caffeine_h_m module~co_broadcast_s co_broadcast_s module~co_broadcast_s->module~caffeine_h_m module~co_sum_s co_sum_s module~co_sum_s->module~caffeine_h_m module~co_min_s co_min_s module~co_min_s->module~caffeine_h_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Interfaces caf_allocate caf_caffeinate caf_co_broadcast caf_co_max caf_co_min caf_co_reduce caf_co_sum caf_decaffeinate caf_elem_len caf_is_f_string caf_num_images caf_numeric_type caf_same_cfi_type caf_sync_all caf_this_image Interfaces interface public function caf_allocate(sz, corank, lcobounds, ucobounds, final_func, coarray_handle) result(ptr) bind(c) Arguments Type Intent Optional Attributes Name integer(kind=c_size_t), intent(in), value :: sz integer(kind=c_int), intent(in), value :: corank integer(kind=c_intmax_t), intent(in), dimension(:) :: lcobounds integer(kind=c_intmax_t), intent(in), dimension(:) :: ucobounds type(c_funptr), intent(in), value :: final_func type(c_ptr), intent(out) :: coarray_handle Return Value type(c_ptr) interface public subroutine caf_caffeinate(argc, argv) bind(c) void c_caffeinate(int argc, char *argv[]); Arguments Type Intent Optional Attributes Name integer(kind=c_int), value :: argc type(c_ptr) :: argv (*) interface public subroutine caf_co_broadcast(a, source_image, stat, nelem) bind(c) void c_co_broadcast(CFI_cdesc_t * a_desc, int source_image, int* stat, int num_elements); Arguments Type Intent Optional Attributes Name type(*) :: a (..) integer(kind=c_int), value :: source_image type(c_ptr), value :: stat integer(kind=c_int), value :: nelem interface public subroutine caf_co_max(a, result_image, c_loc_stat, c_loc_errmsg, num_elements) bind(c) void c_co_max(CFI_cdesc_t a_desc, int result_image, int stat, char* errmsg, size_t num_elements); Arguments Type Intent Optional Attributes Name type(*) :: a (..) integer(kind=c_int), value :: result_image type(c_ptr), value :: c_loc_stat type(c_ptr), value :: c_loc_errmsg integer(kind=c_size_t), value :: num_elements interface public subroutine caf_co_min(a, result_image, c_loc_stat, c_loc_errmsg, num_elements) bind(c) void c_co_min(CFI_cdesc_t a_desc, int result_image, int stat, char* errmsg, size_t num_elements); Arguments Type Intent Optional Attributes Name type(*) :: a (..) integer(kind=c_int), value :: result_image type(c_ptr), value :: c_loc_stat type(c_ptr), value :: c_loc_errmsg integer(kind=c_size_t), value :: num_elements interface public subroutine caf_co_reduce(a, result_image, c_loc_stat, c_loc_errmsg, num_elements, coll_reducesub, client_data) bind(c) void caf_co_reduce(CFI_cdesc_t a_desc, int result_image, int stat, char errmsg, int num_elements, gex_Coll_ReduceFn_t user_op, void* client_data) Arguments Type Intent Optional Attributes Name type(*) :: a (..) integer(kind=c_int), value :: result_image type(c_ptr), value :: c_loc_stat type(c_ptr), value :: c_loc_errmsg integer(kind=c_size_t), value :: num_elements type(c_funptr), value :: coll_reducesub type(c_ptr), value :: client_data interface public subroutine caf_co_sum(a, result_image, c_loc_stat, c_loc_errmsg, num_elements) bind(c) void c_co_sum(CFI_cdesc_t a_desc, int result_image, int stat, char* errmsg, size_t num_elements); Arguments Type Intent Optional Attributes Name type(*) :: a (..) integer(kind=c_int), value :: result_image type(c_ptr), value :: c_loc_stat type(c_ptr), value :: c_loc_errmsg integer(kind=c_size_t), value :: num_elements interface public subroutine caf_decaffeinate(exit_code) bind(c) void c_decaffeinate(); Arguments Type Intent Optional Attributes Name integer(kind=c_int), value :: exit_code interface public pure function caf_elem_len(a) result(a_elem_len) bind(c) size_t caf_elem_len(CFI_cdesc_t* a_desc); Arguments Type Intent Optional Attributes Name type(*), intent(in) :: a (..) Return Value integer(kind=c_size_t),target interface public pure function caf_is_f_string(a) bind(c) bool caf_is_f_string(CFI_cdesc_t* a_desc); Arguments Type Intent Optional Attributes Name type(*), intent(in) :: a (..) Return Value logical(kind=c_bool) interface public pure function caf_num_images() bind(c) int caf_num_images(); Arguments None Return Value integer(kind=c_int) interface public pure function caf_numeric_type(a) bind(c) bool caf_numeric_type(CFI_cdesc_t* a_desc); Arguments Type Intent Optional Attributes Name type(*), intent(in) :: a (..) Return Value logical(kind=c_bool) interface public pure function caf_same_cfi_type(a, b) bind(c) bool caf_same_cfi_type(CFI_cdesc_t a_desc, CFI_cdesc_t a_desc); Arguments Type Intent Optional Attributes Name type(*), intent(in) :: a (..) type(*), intent(in) :: b (..) Return Value logical(kind=c_bool) interface public subroutine caf_sync_all() bind(c) void caf_sync_all(); Arguments None interface public function caf_this_image() bind(c) int caf_this_image(); Arguments None Return Value integer(kind=c_int)","tags":"","loc":"module/caffeine_h_m.html"},{"title":"allocation_m – Caffeine","text":"Uses iso_c_binding module~~allocation_m~~UsesGraph module~allocation_m allocation_m iso_c_binding iso_c_binding module~allocation_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by Descendants: allocation_s module~~allocation_m~~UsedByGraph module~allocation_m allocation_m module~prif_queries_m prif_queries_m module~prif_queries_m->module~allocation_m module~alias_m alias_m module~alias_m->module~allocation_m module~critical_m critical_m module~critical_m->module~allocation_m module~image_queries_m image_queries_m module~image_queries_m->module~allocation_m module~coarray_queries_m coarray_queries_m module~coarray_queries_m->module~allocation_m module~coarray_access_m coarray_access_m module~coarray_access_m->module~allocation_m module~prif prif module~prif->module~allocation_m module~prif->module~prif_queries_m module~prif->module~alias_m module~prif->module~critical_m module~prif->module~image_queries_m module~prif->module~coarray_queries_m module~prif->module~coarray_access_m module~allocation_s allocation_s module~allocation_s->module~allocation_m module~alias_s alias_s module~alias_s->module~alias_m module~image_queries_s image_queries_s module~image_queries_s->module~image_queries_m module~critical_s critical_s module~critical_s->module~critical_m proc~assert assert proc~assert->module~image_queries_m module~coarray_queries_s coarray_queries_s module~coarray_queries_s->module~coarray_queries_m module~prif_queries_s prif_queries_s module~prif_queries_s->module~prif_queries_m module~coarray_access_s coarray_access_s module~coarray_access_s->module~coarray_access_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Interfaces prif_allocate prif_allocate_non_symmetric prif_deallocate prif_deallocate_non_symmetric Derived Types prif_coarray_handle Interfaces interface public module module subroutine prif_allocate(lcobounds, ucobounds, lbounds, ubounds, element_length, final_func, coarray_handle, allocated_memory, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_intmax_t), intent(in), dimension(:) :: lcobounds integer(kind=c_intmax_t), intent(in), dimension(:) :: ucobounds integer(kind=c_intmax_t), intent(in), dimension(:) :: lbounds integer(kind=c_intmax_t), intent(in), dimension(:) :: ubounds integer(kind=c_size_t), intent(in) :: element_length type(c_funptr), intent(in) :: final_func type( prif_coarray_handle ), intent(out) :: coarray_handle type(c_ptr), intent(out) :: allocated_memory integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_allocate_non_symmetric(size_in_bytes, allocated_memory, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_size_t) :: size_in_bytes type(c_ptr), intent(out) :: allocated_memory integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_deallocate(coarray_handles, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handles (:) integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_deallocate_non_symmetric(mem, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in) :: mem integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Derived Types type, public :: prif_coarray_handle Components Type Visibility Attributes Name Initial type(c_ptr), public :: ptr","tags":"","loc":"module/allocation_m.html"},{"title":"coarray_queries_m – Caffeine","text":"Uses teams_m allocation_m iso_c_binding module~~coarray_queries_m~~UsesGraph module~coarray_queries_m coarray_queries_m module~teams_m teams_m module~coarray_queries_m->module~teams_m module~allocation_m allocation_m module~coarray_queries_m->module~allocation_m iso_c_binding iso_c_binding module~coarray_queries_m->iso_c_binding module~teams_m->iso_c_binding module~allocation_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by Descendants: coarray_queries_s module~~coarray_queries_m~~UsedByGraph module~coarray_queries_m coarray_queries_m module~prif prif module~prif->module~coarray_queries_m module~coarray_queries_s coarray_queries_s module~coarray_queries_s->module~coarray_queries_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Interfaces prif_coshape prif_image_index prif_lcobound prif_ucobound prif_lcobound_no_dim prif_lcobound_with_dim prif_ucobound_no_dim prif_ucobound_with_dim Interfaces interface public module module subroutine prif_coshape(coarray_handle, sizes) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(out) :: sizes (:) interface public module module subroutine prif_image_index(coarray_handle, sub, team, team_number, image_index) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_intmax_t), intent(in) :: sub (:) type( prif_team_type ), intent(in), optional :: team integer(kind=c_int), intent(in), optional :: team_number integer(kind=c_int), intent(out) :: image_index public interface prif_lcobound private interface prif_lcobound_with_dim () Arguments None private interface prif_lcobound_no_dim () Arguments None public interface prif_ucobound private interface prif_ucobound_with_dim () Arguments None private interface prif_ucobound_no_dim () Arguments None interface private module module subroutine prif_lcobound_no_dim(coarray_handle, lcobounds) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_intmax_t), intent(out) :: lcobounds (:) interface private module module subroutine prif_lcobound_with_dim(coarray_handle, dim, lcobound) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_int), intent(in) :: dim integer(kind=c_intmax_t), intent(out) :: lcobound interface private module module subroutine prif_ucobound_no_dim(coarray_handle, ucobounds) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_intmax_t), intent(out) :: ucobounds (:) interface private module module subroutine prif_ucobound_with_dim(coarray_handle, dim, ucobound) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_int), intent(in) :: dim integer(kind=c_intmax_t), intent(out) :: ucobound","tags":"","loc":"module/coarray_queries_m.html"},{"title":"utilities_m – Caffeine","text":"Uses iso_c_binding module~~utilities_m~~UsesGraph module~utilities_m utilities_m iso_c_binding iso_c_binding module~utilities_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by module~~utilities_m~~UsedByGraph module~utilities_m utilities_m module~co_reduce_s co_reduce_s module~co_reduce_s->module~utilities_m module~co_max_s co_max_s module~co_max_s->module~utilities_m module~co_broadcast_s co_broadcast_s module~co_broadcast_s->module~utilities_m module~co_sum_s co_sum_s module~co_sum_s->module~utilities_m module~co_min_s co_min_s module~co_min_s->module~utilities_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Functions get_c_ptr get_c_ptr_character optional_value Functions public pure function get_c_ptr (stat) result(ptr) Arguments Type Intent Optional Attributes Name integer, intent(in), optional target :: stat Return Value type(c_ptr) public pure function get_c_ptr_character (errmsg) result(ptr) Arguments Type Intent Optional Attributes Name character(len=*), intent(in), optional target :: errmsg Return Value type(c_ptr) public pure function optional_value (var) result(c_val) Arguments Type Intent Optional Attributes Name integer, intent(in), optional :: var Return Value integer(kind=c_int)","tags":"","loc":"module/utilities_m.html"},{"title":"collective_subroutines_m – Caffeine","text":"Uses iso_c_binding module~~collective_subroutines_m~~UsesGraph module~collective_subroutines_m collective_subroutines_m iso_c_binding iso_c_binding module~collective_subroutines_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by Descendants: co_broadcast_s co_max_s co_min_s co_sum_s co_reduce_s module~~collective_subroutines_m~~UsedByGraph module~collective_subroutines_m collective_subroutines_m module~co_reduce_s co_reduce_s module~co_reduce_s->module~collective_subroutines_m module~co_max_s co_max_s module~co_max_s->module~collective_subroutines_m module~prif prif module~prif->module~collective_subroutines_m module~co_broadcast_s co_broadcast_s module~co_broadcast_s->module~collective_subroutines_m module~co_min_s co_min_s module~co_min_s->module~collective_subroutines_m module~co_sum_s co_sum_s module~co_sum_s->module~collective_subroutines_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Interfaces prif_co_broadcast prif_co_max prif_co_min prif_co_reduce prif_co_sum Abstract Interfaces c_bool_operation c_char_operation c_double_complex_operation c_double_operation c_float_complex_operation c_float_operation c_int32_t_operation c_int64_t_operation Interfaces interface public module module subroutine prif_co_broadcast(a, source_image, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer(kind=c_int), intent(in) :: source_image integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_co_max(a, result_image, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer(kind=c_int), intent(in), optional :: result_image integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_co_min(a, result_image, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer(kind=c_int), intent(in), optional :: result_image integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_co_reduce(a, operation, result_image, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) type(c_funptr), value :: operation integer(kind=c_int), intent(in), optional :: result_image integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_co_sum(a, result_image, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer(kind=c_int), intent(in), optional :: result_image integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Abstract Interfaces abstract interface public pure function c_bool_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name logical(kind=c_bool), intent(in) :: lhs logical(kind=c_bool), intent(in) :: rhs Return Value logical(kind=c_bool) abstract interface public function c_char_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name character(kind=c_char,len=*), intent(in) :: lhs character(kind=c_char,len=*), intent(in) :: rhs Return Value character(kind=c_char,len=:),allocatable abstract interface public pure function c_double_complex_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name complex(kind=c_double), intent(in) :: lhs complex(kind=c_double), intent(in) :: rhs Return Value complex(kind=c_double) abstract interface public pure function c_double_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name real(kind=c_double), intent(in) :: lhs real(kind=c_double), intent(in) :: rhs Return Value real(kind=c_double) abstract interface public pure function c_float_complex_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name complex(kind=c_float), intent(in) :: lhs complex(kind=c_float), intent(in) :: rhs Return Value complex(kind=c_float) abstract interface public pure function c_float_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name real(kind=c_float), intent(in) :: lhs real(kind=c_float), intent(in) :: rhs Return Value real(kind=c_float) abstract interface public pure function c_int32_t_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name integer(kind=c_int32_t), intent(in) :: lhs integer(kind=c_int32_t), intent(in) :: rhs Return Value integer(kind=c_int32_t) abstract interface public pure function c_int64_t_operation(lhs, rhs) result(lhs_op_rhs) Arguments Type Intent Optional Attributes Name integer(kind=c_int64_t), intent(in) :: lhs integer(kind=c_int64_t), intent(in) :: rhs Return Value integer(kind=c_int64_t)","tags":"","loc":"module/collective_subroutines_m.html"},{"title":"coarray_access_m – Caffeine","text":"Uses teams_m allocation_m iso_c_binding module~~coarray_access_m~~UsesGraph module~coarray_access_m coarray_access_m module~teams_m teams_m module~coarray_access_m->module~teams_m module~allocation_m allocation_m module~coarray_access_m->module~allocation_m iso_c_binding iso_c_binding module~coarray_access_m->iso_c_binding module~teams_m->iso_c_binding module~allocation_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by Descendants: coarray_access_s module~~coarray_access_m~~UsedByGraph module~coarray_access_m coarray_access_m module~prif prif module~prif->module~coarray_access_m module~coarray_access_s coarray_access_s module~coarray_access_s->module~coarray_access_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Interfaces prif_get prif_get_raw prif_get_raw_strided prif_put prif_put_raw prif_put_raw_strided Interfaces interface public module module subroutine prif_get(coarray_handle, coindices, first_element_addr, value, team, team_number, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_intmax_t), intent(in) :: coindices (:) type(c_ptr), intent(in) :: first_element_addr type(*), intent(inout), dimension(..), contiguous :: value type( prif_team_type ), intent(in), optional :: team integer(kind=c_intmax_t), intent(in), optional :: team_number integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_get_raw(image_num, local_buffer, remote_ptr, size, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type(c_ptr), intent(in) :: local_buffer integer(kind=c_intptr_t), intent(in) :: remote_ptr integer(kind=c_size_t), intent(in) :: size integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_get_raw_strided(image_num, local_buffer, remote_ptr, element_size, extent, remote_ptr_stride, local_buffer_stride, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type(c_ptr), intent(in) :: local_buffer integer(kind=c_intptr_t), intent(in) :: remote_ptr integer(kind=c_size_t), intent(in) :: element_size integer(kind=c_size_t), intent(in) :: extent (:) integer(kind=c_ptrdiff_t), intent(in) :: remote_ptr_stride (:) integer(kind=c_ptrdiff_t), intent(in) :: local_buffer_stride (:) integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_put(coarray_handle, coindices, value, first_element_addr, team, team_number, notify_ptr, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_intmax_t), intent(in) :: coindices (:) type(*), intent(in), dimension(..), contiguous :: value type(c_ptr), intent(in) :: first_element_addr type( prif_team_type ), intent(in), optional :: team integer(kind=c_intmax_t), intent(in), optional :: team_number integer(kind=c_intptr_t), intent(in), optional :: notify_ptr integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_put_raw(image_num, local_buffer, remote_ptr, notify_ptr, size, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type(c_ptr), intent(in) :: local_buffer integer(kind=c_intptr_t), intent(in) :: remote_ptr integer(kind=c_intptr_t), intent(in), optional :: notify_ptr integer(kind=c_size_t), intent(in) :: size integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_put_raw_strided(image_num, local_buffer, remote_ptr, element_size, extent, remote_ptr_stride, local_buffer_stride, notify_ptr, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type(c_ptr), intent(in) :: local_buffer integer(kind=c_intptr_t), intent(in) :: remote_ptr integer(kind=c_size_t), intent(in) :: element_size integer(kind=c_size_t), intent(in) :: extent (:) integer(kind=c_ptrdiff_t), intent(in) :: remote_ptr_stride (:) integer(kind=c_ptrdiff_t), intent(in) :: local_buffer_stride (:) integer(kind=c_intptr_t), intent(in), optional :: notify_ptr integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"module/coarray_access_m.html"},{"title":"locks_m – Caffeine","text":"Uses iso_c_binding module~~locks_m~~UsesGraph module~locks_m locks_m iso_c_binding iso_c_binding module~locks_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by Descendants: locks_s module~~locks_m~~UsedByGraph module~locks_m locks_m module~critical_m critical_m module~critical_m->module~locks_m module~locks_s locks_s module~locks_s->module~locks_m module~prif prif module~prif->module~locks_m module~prif->module~critical_m module~critical_s critical_s module~critical_s->module~critical_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Interfaces prif_lock prif_unlock Derived Types prif_lock_type Interfaces interface public module module subroutine prif_lock(image_num, lock_var_ptr, acquired_lock, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: lock_var_ptr logical(kind=c_bool), intent(out), optional :: acquired_lock integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_unlock(image_num, lock_var_ptr, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: lock_var_ptr integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc Derived Types type, public :: prif_lock_type","tags":"","loc":"module/locks_m.html"},{"title":"synchronization_m – Caffeine","text":"Uses teams_m iso_c_binding module~~synchronization_m~~UsesGraph module~synchronization_m synchronization_m module~teams_m teams_m module~synchronization_m->module~teams_m iso_c_binding iso_c_binding module~synchronization_m->iso_c_binding module~teams_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by Descendants: sychronization_s module~~synchronization_m~~UsedByGraph module~synchronization_m synchronization_m module~prif prif module~prif->module~synchronization_m module~sychronization_s sychronization_s module~sychronization_s->module~synchronization_m module~program_startup_s program_startup_s module~program_startup_s->module~synchronization_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Interfaces prif_sync_all prif_sync_images prif_sync_memory prif_sync_team Interfaces interface public module module subroutine prif_sync_all(stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_sync_images(image_set, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in), optional :: image_set (:) integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_sync_memory(stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_sync_team(team, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in) :: team integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"module/synchronization_m.html"},{"title":"teams_m – Caffeine","text":"Uses iso_c_binding module~~teams_m~~UsesGraph module~teams_m teams_m iso_c_binding iso_c_binding module~teams_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by Descendants: teams_s module~~teams_m~~UsedByGraph module~teams_m teams_m module~prif_queries_m prif_queries_m module~prif_queries_m->module~teams_m module~program_startup_m program_startup_m module~program_startup_m->module~teams_m module~synchronization_m synchronization_m module~synchronization_m->module~teams_m module~coarray_queries_m coarray_queries_m module~coarray_queries_m->module~teams_m module~image_queries_m image_queries_m module~image_queries_m->module~teams_m module~prif prif module~prif->module~teams_m module~prif->module~prif_queries_m module~prif->module~program_startup_m module~prif->module~synchronization_m module~prif->module~coarray_queries_m module~prif->module~image_queries_m module~coarray_access_m coarray_access_m module~prif->module~coarray_access_m module~coarray_access_m->module~teams_m module~teams_s teams_s module~teams_s->module~teams_m module~sychronization_s sychronization_s module~sychronization_s->module~synchronization_m module~program_startup_s program_startup_s module~program_startup_s->module~program_startup_m module~program_startup_s->module~synchronization_m module~coarray_queries_s coarray_queries_s module~coarray_queries_s->module~coarray_queries_m proc~assert assert proc~assert->module~image_queries_m module~image_queries_s image_queries_s module~image_queries_s->module~image_queries_m module~prif_queries_s prif_queries_s module~prif_queries_s->module~prif_queries_m module~coarray_access_s coarray_access_s module~coarray_access_s->module~coarray_access_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables current_team Interfaces prif_change_team prif_end_team prif_form_team prif_get_team prif_team_number Derived Types prif_team_type Variables Type Visibility Attributes Name Initial type( prif_team_type ), public, pointer :: current_team => null() Interfaces interface public module module subroutine prif_change_team(team, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in) :: team integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_end_team(stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_form_team(team_number, team, new_index, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_intmax_t), intent(in) :: team_number type( prif_team_type ), intent(out) :: team integer(kind=c_int), intent(in), optional :: new_index integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_get_team(level, team) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in), optional :: level type( prif_team_type ), intent(out) :: team interface public module module subroutine prif_team_number(team, team_number) Implementation → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in), optional :: team integer(kind=c_intmax_t), intent(out) :: team_number Derived Types type, public :: prif_team_type Components Type Visibility Attributes Name Initial type(c_ptr), private :: team_ptr","tags":"","loc":"module/teams_m.html"},{"title":"program_termination_m – Caffeine","text":"Uses iso_c_binding module~~program_termination_m~~UsesGraph module~program_termination_m program_termination_m iso_c_binding iso_c_binding module~program_termination_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by Descendants: program_termination_s module~~program_termination_m~~UsedByGraph module~program_termination_m program_termination_m proc~assert assert proc~assert->module~program_termination_m module~program_startup_s program_startup_s module~program_startup_s->module~program_termination_m module~co_reduce_s co_reduce_s module~co_reduce_s->module~program_termination_m module~co_max_s co_max_s module~co_max_s->module~program_termination_m module~prif prif module~prif->module~program_termination_m module~co_min_s co_min_s module~co_min_s->module~program_termination_m module~caffeine_intrinsic_array_s caffeine_intrinsic_array_s module~caffeine_intrinsic_array_s->module~program_termination_m module~program_termination_s program_termination_s module~program_termination_s->module~program_termination_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Interfaces prif_error_stop prif_fail_image prif_stop Interfaces interface public pure module module subroutine prif_error_stop(quiet, stop_code_int, stop_code_char) Implementation → Arguments Type Intent Optional Attributes Name logical(kind=c_bool), intent(in) :: quiet integer(kind=c_int), intent(in), optional :: stop_code_int character(len=*), intent(in), optional :: stop_code_char interface public module module subroutine prif_fail_image() Implementation → Arguments None interface public module module subroutine prif_stop(quiet, stop_code_int, stop_code_char) Implementation → Arguments Type Intent Optional Attributes Name logical(kind=c_bool), intent(in) :: quiet integer(kind=c_int), intent(in), optional :: stop_code_int character(len=*), intent(in), optional :: stop_code_char","tags":"","loc":"module/program_termination_m.html"},{"title":"prif_queries_m – Caffeine","text":"Uses teams_m allocation_m iso_c_binding module~~prif_queries_m~~UsesGraph module~prif_queries_m prif_queries_m module~teams_m teams_m module~prif_queries_m->module~teams_m module~allocation_m allocation_m module~prif_queries_m->module~allocation_m iso_c_binding iso_c_binding module~prif_queries_m->iso_c_binding module~teams_m->iso_c_binding module~allocation_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by Descendants: prif_queries_s module~~prif_queries_m~~UsedByGraph module~prif_queries_m prif_queries_m module~prif prif module~prif->module~prif_queries_m module~prif_queries_s prif_queries_s module~prif_queries_s->module~prif_queries_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Interfaces prif_base_pointer prif_get_context_data prif_local_data_size prif_set_context_data Interfaces interface public module module subroutine prif_base_pointer(coarray_handle, coindices, team, team_number, ptr) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_intmax_t), intent(in) :: coindices (:) type( prif_team_type ), intent(in), optional :: team integer(kind=c_intmax_t), intent(in), optional :: team_number integer(kind=c_intptr_t), intent(out) :: ptr interface public module module subroutine prif_get_context_data(coarray_handle, context_data) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle type(c_ptr), intent(out) :: context_data interface public module module subroutine prif_local_data_size(coarray_handle, data_size) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(out) :: data_size interface public module module subroutine prif_set_context_data(coarray_handle, context_data) Implementation → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle type(c_ptr), intent(in) :: context_data","tags":"","loc":"module/prif_queries_m.html"},{"title":"events_m – Caffeine","text":"Uses iso_c_binding module~~events_m~~UsesGraph module~events_m events_m iso_c_binding iso_c_binding module~events_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by Descendants: events_s module~~events_m~~UsedByGraph module~events_m events_m module~prif prif module~prif->module~events_m module~events_s events_s module~events_s->module~events_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Interfaces prif_event_post prif_event_query prif_event_wait Interfaces interface public module module subroutine prif_event_post(image_num, event_var_ptr, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: event_var_ptr integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc interface public module module subroutine prif_event_query(event_var_ptr, count, stat) Implementation → Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in) :: event_var_ptr integer(kind=c_intmax_t), intent(out) :: count integer(kind=c_int), intent(out), optional :: stat interface public module module subroutine prif_event_wait(event_var_ptr, until_count, stat, errmsg, errmsg_alloc) Implementation → Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in) :: event_var_ptr integer(kind=c_intmax_t), intent(in), optional :: until_count integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"module/events_m.html"},{"title":"normal_termination_m – Caffeine","text":"Used by Descendants: normal_termination_s module~~normal_termination_m~~UsedByGraph module~normal_termination_m normal_termination_m module~normal_termination_s normal_termination_s module~normal_termination_s->module~normal_termination_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Interfaces caf_stop Interfaces public interface caf_stop private module subroutine caf_stop_character(stop_code) synchronize, stop the executing image, and provide the stop_code as the process exit status Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: stop_code private module subroutine caf_stop_integer(stop_code) synchronize, stop the executing image, and provide the stop_code (or 0 if not present) as the process exit status Arguments Type Intent Optional Attributes Name integer, intent(in), optional :: stop_code","tags":"","loc":"module/normal_termination_m.html"},{"title":"atomic_m – Caffeine","text":"Uses iso_fortran_env iso_c_binding module~~atomic_m~~UsesGraph module~atomic_m atomic_m iso_fortran_env iso_fortran_env module~atomic_m->iso_fortran_env iso_c_binding iso_c_binding module~atomic_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by Descendants: atomic_s module~~atomic_m~~UsedByGraph module~atomic_m atomic_m module~prif prif module~prif->module~atomic_m module~atomic_s atomic_s module~atomic_s->module~atomic_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Interfaces prif_atomic_add prif_atomic_and prif_atomic_cas prif_atomic_define prif_atomic_fetch_add prif_atomic_fetch_and prif_atomic_fetch_or prif_atomic_fetch_xor prif_atomic_or prif_atomic_ref prif_atomic_xor prif_atomic_cas_int prif_atomic_cas_logical prif_atomic_define_int prif_atomic_define_logical prif_atomic_ref_int prif_atomic_ref_logical Interfaces interface public module module subroutine prif_atomic_add(atom_remote_ptr, image_num, value, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat interface public module module subroutine prif_atomic_and(atom_remote_ptr, image_num, value, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat public interface prif_atomic_cas private interface prif_atomic_cas_int () Arguments None private interface prif_atomic_cas_logical () Arguments None public interface prif_atomic_define private interface prif_atomic_define_int () Arguments None private interface prif_atomic_define_logical () Arguments None interface public module module subroutine prif_atomic_fetch_add(atom_remote_ptr, image_num, value, old, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=atomic_int_kind), intent(in) :: value integer(kind=atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat interface public module module subroutine prif_atomic_fetch_and(atom_remote_ptr, image_num, value, old, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=atomic_int_kind), intent(in) :: value integer(kind=atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat interface public module module subroutine prif_atomic_fetch_or(atom_remote_ptr, image_num, value, old, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=atomic_int_kind), intent(in) :: value integer(kind=atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat interface public module module subroutine prif_atomic_fetch_xor(atom_remote_ptr, image_num, value, old, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=atomic_int_kind), intent(in) :: value integer(kind=atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat interface public module module subroutine prif_atomic_or(atom_remote_ptr, image_num, value, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat public interface prif_atomic_ref private interface prif_atomic_ref_int () Arguments None private interface prif_atomic_ref_logical () Arguments None interface public module module subroutine prif_atomic_xor(atom_remote_ptr, image_num, value, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat interface private module module subroutine prif_atomic_cas_int(atom_remote_ptr, image_num, old, compare, new, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=atomic_int_kind), intent(out) :: old integer(kind=atomic_int_kind), intent(in) :: compare integer(kind=atomic_int_kind), intent(in) :: new integer(kind=c_int), intent(out), optional :: stat interface private module module subroutine prif_atomic_cas_logical(atom_remote_ptr, image_num, old, compare, new, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num logical(kind=atomic_logical_kind), intent(out) :: old logical(kind=atomic_logical_kind), intent(in) :: compare logical(kind=atomic_logical_kind), intent(in) :: new integer(kind=c_int), intent(out), optional :: stat interface private module module subroutine prif_atomic_define_int(atom_remote_ptr, image_num, value, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat interface private module module subroutine prif_atomic_define_logical(atom_remote_ptr, image_num, value, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num logical(kind=atomic_logical_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat interface private module module subroutine prif_atomic_ref_int(value, atom_remote_ptr, image_num, stat) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=atomic_int_kind), intent(out) :: value integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=c_int), intent(out), optional :: stat interface private module module subroutine prif_atomic_ref_logical(value, atom_remote_ptr, image_num, stat) Implementation → Arguments Type Intent Optional Attributes Name logical(kind=atomic_logical_kind), intent(out) :: value integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"module/atomic_m.html"},{"title":"caffeine_intrinsic_array_m – Caffeine","text":"Define an abstract class that supports object representation in character form Uses caffeine_characterizable_m module~~caffeine_intrinsic_array_m~~UsesGraph module~caffeine_intrinsic_array_m caffeine_intrinsic_array_m module~caffeine_characterizable_m caffeine_characterizable_m module~caffeine_intrinsic_array_m->module~caffeine_characterizable_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by Descendants: caffeine_intrinsic_array_s module~~caffeine_intrinsic_array_m~~UsedByGraph module~caffeine_intrinsic_array_m caffeine_intrinsic_array_m module~co_reduce_s co_reduce_s module~co_reduce_s->module~caffeine_intrinsic_array_m module~caffeine_intrinsic_array_s caffeine_intrinsic_array_s module~caffeine_intrinsic_array_s->module~caffeine_intrinsic_array_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Interfaces intrinsic_array_t as_character Derived Types intrinsic_array_t Interfaces public interface intrinsic_array_t private pure module function construct(array) result(intrinsic_array) Arguments Type Intent Optional Attributes Name class(*), intent(in) :: array (..) Return Value type( intrinsic_array_t ) interface private pure module module function as_character(self) result(character_self) Implementation → Arguments Type Intent Optional Attributes Name class( intrinsic_array_t ), intent(in) :: self Return Value character(len=:),allocatable Derived Types type, public, extends( characterizable_t ) :: intrinsic_array_t Components Type Visibility Attributes Name Initial complex, private, allocatable :: complex_1d (:) complex, private, allocatable :: complex_2d (:,:) complex, private, allocatable :: complex_3d (:,:,:) complex(kind=kind(1.d0)), private, allocatable :: complex_double_1d (:) complex(kind=kind(1.d0)), private, allocatable :: complex_double_2d (:,:) complex(kind=kind(1.d0)), private, allocatable :: complex_double_3d (:,:,:) double precision, private, allocatable :: double_precision_1d (:) double precision, private, allocatable :: double_precision_2d (:,:) double precision, private, allocatable :: double_precision_3d (:,:,:) integer, private, allocatable :: integer_1d (:) integer, private, allocatable :: integer_2d (:,:) integer, private, allocatable :: integer_3d (:,:,:) logical, private, allocatable :: logical_1d (:) logical, private, allocatable :: logical_2d (:,:) logical, private, allocatable :: logical_3d (:,:,:) real, private, allocatable :: real_1d (:) real, private, allocatable :: real_2d (:,:) real, private, allocatable :: real_3d (:,:,:) Constructor private pure,module function construct (array) Type-Bound Procedures procedure, public :: as_character","tags":"","loc":"module/caffeine_intrinsic_array_m.html"},{"title":"caffeine_assert_m – Caffeine","text":"use assertions_m, only : assert\n   call assert( 2 > 1, \"2 > 1\") Turn off assertions in production code by setting USE_ASSERTIONS to .false. via the preprocessor.\nThis file's capitalized .F90 extension causes most Fortran compilers to preprocess this file so\nthat building as follows turns off assertion enforcement: fpm build --flag \"-DUSE_ASSERTIONS=.false.\" Doing so may eliminate any associated runtime overhead by enabling optimizing compilers to ignore\nthe assertion procedure body during a dead-code-removal phase of optimization. Used by Descendants: caffeine_assert_s module~~caffeine_assert_m~~UsedByGraph module~caffeine_assert_m caffeine_assert_m module~co_reduce_s co_reduce_s module~co_reduce_s->module~caffeine_assert_m module~co_min_s co_min_s module~co_min_s->module~caffeine_assert_m module~caffeine_assert_s caffeine_assert_s module~caffeine_assert_s->module~caffeine_assert_m module~co_max_s co_max_s module~co_max_s->module~caffeine_assert_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables enforce_assertions Interfaces assert Variables Type Visibility Attributes Name Initial logical, private, parameter :: enforce_assertions = .true. Turn off assertions as follows: fpm build --flag \"-DUSE_ASSERTIONS=.false.\" Interfaces interface public module module subroutine assert(assertion, description, diagnostic_data) Implementation → If assertion is .false., error-terminate with a character stop code that contains diagnostic_data if present Arguments Type Intent Optional Attributes Name logical, intent(in) :: assertion Most assertions will be expressions such as i>0 character(len=*), intent(in) :: description A brief statement of what is being asserted such as \"i>0\" or \"positive i\" class(*), intent(in), optional :: diagnostic_data Data to include in an error ouptput: may be of an intrinsic type or a type that extends characterizable_t","tags":"","loc":"module/caffeine_assert_m.html"},{"title":"caffeine_characterizable_m – Caffeine","text":"Define an abstract class that supports object representation in character form Used by module~~caffeine_characterizable_m~~UsedByGraph module~caffeine_characterizable_m caffeine_characterizable_m proc~assert assert proc~assert->module~caffeine_characterizable_m module~caffeine_intrinsic_array_m caffeine_intrinsic_array_m module~caffeine_intrinsic_array_m->module~caffeine_characterizable_m module~co_reduce_s co_reduce_s module~co_reduce_s->module~caffeine_intrinsic_array_m module~caffeine_intrinsic_array_s caffeine_intrinsic_array_s module~caffeine_intrinsic_array_s->module~caffeine_intrinsic_array_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Abstract Interfaces as_character_i Derived Types characterizable_t Abstract Interfaces abstract interface private pure function as_character_i(self) result(character_self) Arguments Type Intent Optional Attributes Name class( characterizable_t ), intent(in) :: self Return Value character(len=:),allocatable Derived Types type, public, abstract :: characterizable_t Type-Bound Procedures procedure(as_character_i), public :: as_character","tags":"","loc":"module/caffeine_characterizable_m.html"},{"title":"allocation_s – Caffeine","text":"Uses Ancestors: allocation_m module~~allocation_s~~UsesGraph module~allocation_s allocation_s module~allocation_m allocation_m module~allocation_s->module~allocation_m iso_c_binding iso_c_binding module~allocation_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures prif_allocate prif_allocate_non_symmetric prif_deallocate prif_deallocate_non_symmetric Module Procedures module procedure prif_allocate module module subroutine prif_allocate(lcobounds, ucobounds, lbounds, ubounds, element_length, final_func, coarray_handle, allocated_memory, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_intmax_t), intent(in), dimension(:) :: lcobounds integer(kind=c_intmax_t), intent(in), dimension(:) :: ucobounds integer(kind=c_intmax_t), intent(in), dimension(:) :: lbounds integer(kind=c_intmax_t), intent(in), dimension(:) :: ubounds integer(kind=c_size_t), intent(in) :: element_length type(c_funptr), intent(in) :: final_func type( prif_coarray_handle ), intent(out) :: coarray_handle type(c_ptr), intent(out) :: allocated_memory integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_allocate_non_symmetric module module subroutine prif_allocate_non_symmetric(size_in_bytes, allocated_memory, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_size_t) :: size_in_bytes type(c_ptr), intent(out) :: allocated_memory integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_deallocate module module subroutine prif_deallocate(coarray_handles, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handles (:) integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_deallocate_non_symmetric module module subroutine prif_deallocate_non_symmetric(mem, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in) :: mem integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"module/allocation_s.html"},{"title":"image_queries_s – Caffeine","text":"Uses caffeine_h_m Ancestors: image_queries_m module~~image_queries_s~~UsesGraph module~image_queries_s image_queries_s module~caffeine_h_m caffeine_h_m module~image_queries_s->module~caffeine_h_m module~image_queries_m image_queries_m module~image_queries_s->module~image_queries_m iso_c_binding iso_c_binding module~caffeine_h_m->iso_c_binding module~image_queries_m->iso_c_binding module~teams_m teams_m module~image_queries_m->module~teams_m module~allocation_m allocation_m module~image_queries_m->module~allocation_m module~teams_m->iso_c_binding module~allocation_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures prif_failed_images prif_image_status prif_num_images prif_stopped_images prif_this_image_no_coarray prif_this_image_with_coarray prif_this_image_with_dim Module Procedures module procedure prif_failed_images module module subroutine prif_failed_images(team, failed_images) Interface → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in), optional :: team integer(kind=c_int), intent(out), allocatable :: failed_images (:) module procedure prif_image_status impure elemental module module subroutine prif_image_status(image, team, image_status) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image type( prif_team_type ), intent(in), optional :: team integer(kind=c_int), intent(out) :: image_status module procedure prif_num_images module module subroutine prif_num_images(team, team_number, image_count) Interface → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in), optional :: team integer(kind=c_intmax_t), intent(in), optional :: team_number integer(kind=c_int), intent(out) :: image_count module procedure prif_stopped_images module module subroutine prif_stopped_images(team, stopped_images) Interface → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in), optional :: team integer(kind=c_int), intent(out), allocatable :: stopped_images (:) module procedure prif_this_image_no_coarray module procedure prif_this_image_no_coarray() Arguments None module procedure prif_this_image_with_coarray module procedure prif_this_image_with_coarray() Arguments None module procedure prif_this_image_with_dim module procedure prif_this_image_with_dim() Arguments None","tags":"","loc":"module/image_queries_s.html"},{"title":"prif_queries_s – Caffeine","text":"Uses Ancestors: prif_queries_m module~~prif_queries_s~~UsesGraph module~prif_queries_s prif_queries_s module~prif_queries_m prif_queries_m module~prif_queries_s->module~prif_queries_m module~teams_m teams_m module~prif_queries_m->module~teams_m module~allocation_m allocation_m module~prif_queries_m->module~allocation_m iso_c_binding iso_c_binding module~prif_queries_m->iso_c_binding module~teams_m->iso_c_binding module~allocation_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures prif_base_pointer prif_get_context_data prif_local_data_size prif_set_context_data Module Procedures module procedure prif_base_pointer module module subroutine prif_base_pointer(coarray_handle, coindices, team, team_number, ptr) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_intmax_t), intent(in) :: coindices (:) type( prif_team_type ), intent(in), optional :: team integer(kind=c_intmax_t), intent(in), optional :: team_number integer(kind=c_intptr_t), intent(out) :: ptr module procedure prif_get_context_data module module subroutine prif_get_context_data(coarray_handle, context_data) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle type(c_ptr), intent(out) :: context_data module procedure prif_local_data_size module module subroutine prif_local_data_size(coarray_handle, data_size) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(out) :: data_size module procedure prif_set_context_data module module subroutine prif_set_context_data(coarray_handle, context_data) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle type(c_ptr), intent(in) :: context_data","tags":"","loc":"module/prif_queries_s.html"},{"title":"normal_termination_s – Caffeine","text":"Uses iso_c_binding caffeine_h_m iso_fortran_env Ancestors: normal_termination_m module~~normal_termination_s~~UsesGraph module~normal_termination_s normal_termination_s iso_c_binding iso_c_binding module~normal_termination_s->iso_c_binding iso_fortran_env iso_fortran_env module~normal_termination_s->iso_fortran_env module~caffeine_h_m caffeine_h_m module~normal_termination_s->module~caffeine_h_m module~normal_termination_m normal_termination_m module~normal_termination_s->module~normal_termination_m module~caffeine_h_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures prif_stop_character prif_stop_integer Module Procedures module procedure prif_stop_character module procedure prif_stop_character() Arguments None module procedure prif_stop_integer module procedure prif_stop_integer() Arguments None","tags":"","loc":"module/normal_termination_s.html"},{"title":"atomic_s – Caffeine","text":"Uses Ancestors: atomic_m module~~atomic_s~~UsesGraph module~atomic_s atomic_s module~atomic_m atomic_m module~atomic_s->module~atomic_m iso_fortran_env iso_fortran_env module~atomic_m->iso_fortran_env iso_c_binding iso_c_binding module~atomic_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures prif_atomic_add prif_atomic_and prif_atomic_cas_int prif_atomic_cas_logical prif_atomic_define_int prif_atomic_define_logical prif_atomic_fetch_add prif_atomic_fetch_and prif_atomic_fetch_or prif_atomic_fetch_xor prif_atomic_or prif_atomic_ref_int prif_atomic_ref_logical prif_atomic_xor Module Procedures module procedure prif_atomic_add module module subroutine prif_atomic_add(atom_remote_ptr, image_num, value, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat module procedure prif_atomic_and module module subroutine prif_atomic_and(atom_remote_ptr, image_num, value, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat module procedure prif_atomic_cas_int module module subroutine prif_atomic_cas_int(atom_remote_ptr, image_num, old, compare, new, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=atomic_int_kind), intent(out) :: old integer(kind=atomic_int_kind), intent(in) :: compare integer(kind=atomic_int_kind), intent(in) :: new integer(kind=c_int), intent(out), optional :: stat module procedure prif_atomic_cas_logical module module subroutine prif_atomic_cas_logical(atom_remote_ptr, image_num, old, compare, new, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num logical(kind=atomic_logical_kind), intent(out) :: old logical(kind=atomic_logical_kind), intent(in) :: compare logical(kind=atomic_logical_kind), intent(in) :: new integer(kind=c_int), intent(out), optional :: stat module procedure prif_atomic_define_int module module subroutine prif_atomic_define_int(atom_remote_ptr, image_num, value, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat module procedure prif_atomic_define_logical module module subroutine prif_atomic_define_logical(atom_remote_ptr, image_num, value, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num logical(kind=atomic_logical_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat module procedure prif_atomic_fetch_add module module subroutine prif_atomic_fetch_add(atom_remote_ptr, image_num, value, old, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=atomic_int_kind), intent(in) :: value integer(kind=atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat module procedure prif_atomic_fetch_and module module subroutine prif_atomic_fetch_and(atom_remote_ptr, image_num, value, old, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=atomic_int_kind), intent(in) :: value integer(kind=atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat module procedure prif_atomic_fetch_or module module subroutine prif_atomic_fetch_or(atom_remote_ptr, image_num, value, old, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=atomic_int_kind), intent(in) :: value integer(kind=atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat module procedure prif_atomic_fetch_xor module module subroutine prif_atomic_fetch_xor(atom_remote_ptr, image_num, value, old, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=atomic_int_kind), intent(in) :: value integer(kind=atomic_int_kind), intent(out) :: old integer(kind=c_int), intent(out), optional :: stat module procedure prif_atomic_or module module subroutine prif_atomic_or(atom_remote_ptr, image_num, value, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat module procedure prif_atomic_ref_int module module subroutine prif_atomic_ref_int(value, atom_remote_ptr, image_num, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=atomic_int_kind), intent(out) :: value integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=c_int), intent(out), optional :: stat module procedure prif_atomic_ref_logical module module subroutine prif_atomic_ref_logical(value, atom_remote_ptr, image_num, stat) Interface → Arguments Type Intent Optional Attributes Name logical(kind=atomic_logical_kind), intent(out) :: value integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=c_int), intent(out), optional :: stat module procedure prif_atomic_xor module module subroutine prif_atomic_xor(atom_remote_ptr, image_num, value, stat) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_intptr_t), intent(in) :: atom_remote_ptr integer(kind=c_int), intent(in) :: image_num integer(kind=atomic_int_kind), intent(in) :: value integer(kind=c_int), intent(out), optional :: stat","tags":"","loc":"module/atomic_s.html"},{"title":"program_startup_s – Caffeine","text":"Uses caffeine_h_m program_termination_m synchronization_m iso_c_binding Ancestors: program_startup_m module~~program_startup_s~~UsesGraph module~program_startup_s program_startup_s module~caffeine_h_m caffeine_h_m module~program_startup_s->module~caffeine_h_m module~synchronization_m synchronization_m module~program_startup_s->module~synchronization_m module~program_startup_m program_startup_m module~program_startup_s->module~program_startup_m iso_c_binding iso_c_binding module~program_startup_s->iso_c_binding module~program_termination_m program_termination_m module~program_startup_s->module~program_termination_m module~caffeine_h_m->iso_c_binding module~synchronization_m->iso_c_binding module~teams_m teams_m module~synchronization_m->module~teams_m module~program_startup_m->iso_c_binding module~program_startup_m->module~teams_m module~program_termination_m->iso_c_binding module~teams_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures prif_init Module Procedures module procedure prif_init module module subroutine prif_init(exit_code) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(out) :: exit_code","tags":"","loc":"module/program_startup_s.html"},{"title":"teams_s – Caffeine","text":"Uses Ancestors: teams_m module~~teams_s~~UsesGraph module~teams_s teams_s module~teams_m teams_m module~teams_s->module~teams_m iso_c_binding iso_c_binding module~teams_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures prif_change_team prif_end_team prif_form_team prif_get_team prif_team_number Module Procedures module procedure prif_change_team module module subroutine prif_change_team(team, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in) :: team integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_end_team module module subroutine prif_end_team(stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_form_team module module subroutine prif_form_team(team_number, team, new_index, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_intmax_t), intent(in) :: team_number type( prif_team_type ), intent(out) :: team integer(kind=c_int), intent(in), optional :: new_index integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_get_team module module subroutine prif_get_team(level, team) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in), optional :: level type( prif_team_type ), intent(out) :: team module procedure prif_team_number module module subroutine prif_team_number(team, team_number) Interface → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in), optional :: team integer(kind=c_intmax_t), intent(out) :: team_number","tags":"","loc":"module/teams_s.html"},{"title":"critical_s – Caffeine","text":"Uses Ancestors: critical_m module~~critical_s~~UsesGraph module~critical_s critical_s module~critical_m critical_m module~critical_s->module~critical_m module~locks_m locks_m module~critical_m->module~locks_m module~allocation_m allocation_m module~critical_m->module~allocation_m iso_c_binding iso_c_binding module~critical_m->iso_c_binding module~locks_m->iso_c_binding module~allocation_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures prif_critical prif_end_critical Module Procedures module procedure prif_critical module module subroutine prif_critical(critical_coarray, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: critical_coarray integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_end_critical module module subroutine prif_end_critical(critical_coarray) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: critical_coarray","tags":"","loc":"module/critical_s.html"},{"title":"coarray_access_s – Caffeine","text":"Uses Ancestors: coarray_access_m module~~coarray_access_s~~UsesGraph module~coarray_access_s coarray_access_s module~coarray_access_m coarray_access_m module~coarray_access_s->module~coarray_access_m module~teams_m teams_m module~coarray_access_m->module~teams_m module~allocation_m allocation_m module~coarray_access_m->module~allocation_m iso_c_binding iso_c_binding module~coarray_access_m->iso_c_binding module~teams_m->iso_c_binding module~allocation_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures prif_get prif_get_raw prif_get_raw_strided prif_put prif_put_raw prif_put_raw_strided Module Procedures module procedure prif_get module module subroutine prif_get(coarray_handle, coindices, first_element_addr, value, team, team_number, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_intmax_t), intent(in) :: coindices (:) type(c_ptr), intent(in) :: first_element_addr type(*), intent(inout), dimension(..), contiguous :: value type( prif_team_type ), intent(in), optional :: team integer(kind=c_intmax_t), intent(in), optional :: team_number integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_get_raw module module subroutine prif_get_raw(image_num, local_buffer, remote_ptr, size, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type(c_ptr), intent(in) :: local_buffer integer(kind=c_intptr_t), intent(in) :: remote_ptr integer(kind=c_size_t), intent(in) :: size integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_get_raw_strided module module subroutine prif_get_raw_strided(image_num, local_buffer, remote_ptr, element_size, extent, remote_ptr_stride, local_buffer_stride, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type(c_ptr), intent(in) :: local_buffer integer(kind=c_intptr_t), intent(in) :: remote_ptr integer(kind=c_size_t), intent(in) :: element_size integer(kind=c_size_t), intent(in) :: extent (:) integer(kind=c_ptrdiff_t), intent(in) :: remote_ptr_stride (:) integer(kind=c_ptrdiff_t), intent(in) :: local_buffer_stride (:) integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_put module module subroutine prif_put(coarray_handle, coindices, value, first_element_addr, team, team_number, notify_ptr, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_intmax_t), intent(in) :: coindices (:) type(*), intent(in), dimension(..), contiguous :: value type(c_ptr), intent(in) :: first_element_addr type( prif_team_type ), intent(in), optional :: team integer(kind=c_intmax_t), intent(in), optional :: team_number integer(kind=c_intptr_t), intent(in), optional :: notify_ptr integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_put_raw module module subroutine prif_put_raw(image_num, local_buffer, remote_ptr, notify_ptr, size, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type(c_ptr), intent(in) :: local_buffer integer(kind=c_intptr_t), intent(in) :: remote_ptr integer(kind=c_intptr_t), intent(in), optional :: notify_ptr integer(kind=c_size_t), intent(in) :: size integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_put_raw_strided module module subroutine prif_put_raw_strided(image_num, local_buffer, remote_ptr, element_size, extent, remote_ptr_stride, local_buffer_stride, notify_ptr, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num type(c_ptr), intent(in) :: local_buffer integer(kind=c_intptr_t), intent(in) :: remote_ptr integer(kind=c_size_t), intent(in) :: element_size integer(kind=c_size_t), intent(in) :: extent (:) integer(kind=c_ptrdiff_t), intent(in) :: remote_ptr_stride (:) integer(kind=c_ptrdiff_t), intent(in) :: local_buffer_stride (:) integer(kind=c_intptr_t), intent(in), optional :: notify_ptr integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"module/coarray_access_s.html"},{"title":"alias_s – Caffeine","text":"Uses Ancestors: alias_m module~~alias_s~~UsesGraph module~alias_s alias_s module~alias_m alias_m module~alias_s->module~alias_m module~allocation_m allocation_m module~alias_m->module~allocation_m iso_c_binding iso_c_binding module~alias_m->iso_c_binding module~allocation_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures prif_alias_create prif_alias_destroy Module Procedures module procedure prif_alias_create module module subroutine prif_alias_create(source_handle, alias_co_lbounds, alias_co_ubounds, alias_handle) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: source_handle integer(kind=c_intmax_t), intent(in) :: alias_co_lbounds (:) integer(kind=c_intmax_t), intent(in) :: alias_co_ubounds (:) type( prif_coarray_handle ), intent(out) :: alias_handle module procedure prif_alias_destroy module module subroutine prif_alias_destroy(alias_handle) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: alias_handle","tags":"","loc":"module/alias_s.html"},{"title":"locks_s – Caffeine","text":"Uses Ancestors: locks_m module~~locks_s~~UsesGraph module~locks_s locks_s module~locks_m locks_m module~locks_s->module~locks_m iso_c_binding iso_c_binding module~locks_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures prif_lock prif_unlock Module Procedures module procedure prif_lock module module subroutine prif_lock(image_num, lock_var_ptr, acquired_lock, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: lock_var_ptr logical(kind=c_bool), intent(out), optional :: acquired_lock integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_unlock module module subroutine prif_unlock(image_num, lock_var_ptr, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: lock_var_ptr integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"module/locks_s.html"},{"title":"events_s – Caffeine","text":"Uses Ancestors: events_m module~~events_s~~UsesGraph module~events_s events_s module~events_m events_m module~events_s->module~events_m iso_c_binding iso_c_binding module~events_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures prif_event_post prif_event_query prif_event_wait Module Procedures module procedure prif_event_post module module subroutine prif_event_post(image_num, event_var_ptr, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in) :: image_num integer(kind=c_intptr_t), intent(in) :: event_var_ptr integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_event_query module module subroutine prif_event_query(event_var_ptr, count, stat) Interface → Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in) :: event_var_ptr integer(kind=c_intmax_t), intent(out) :: count integer(kind=c_int), intent(out), optional :: stat module procedure prif_event_wait module module subroutine prif_event_wait(event_var_ptr, until_count, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in) :: event_var_ptr integer(kind=c_intmax_t), intent(in), optional :: until_count integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"module/events_s.html"},{"title":"notify_s – Caffeine","text":"Uses Ancestors: notify_m module~~notify_s~~UsesGraph module~notify_s notify_s module~notify_m notify_m module~notify_s->module~notify_m iso_c_binding iso_c_binding module~notify_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures prif_notify_wait Module Procedures module procedure prif_notify_wait module module subroutine prif_notify_wait(notify_var_ptr, until_count, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type(c_ptr), intent(in) :: notify_var_ptr integer(kind=c_intmax_t), intent(in), optional :: until_count integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"module/notify_s.html"},{"title":"coarray_queries_s – Caffeine","text":"Uses Ancestors: coarray_queries_m module~~coarray_queries_s~~UsesGraph module~coarray_queries_s coarray_queries_s module~coarray_queries_m coarray_queries_m module~coarray_queries_s->module~coarray_queries_m module~teams_m teams_m module~coarray_queries_m->module~teams_m module~allocation_m allocation_m module~coarray_queries_m->module~allocation_m iso_c_binding iso_c_binding module~coarray_queries_m->iso_c_binding module~teams_m->iso_c_binding module~allocation_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures prif_coshape prif_image_index prif_lcobound_no_dim prif_lcobound_with_dim prif_ucobound_no_dim prif_ucobound_with_dim Module Procedures module procedure prif_coshape module module subroutine prif_coshape(coarray_handle, sizes) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_size_t), intent(out) :: sizes (:) module procedure prif_image_index module module subroutine prif_image_index(coarray_handle, sub, team, team_number, image_index) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_intmax_t), intent(in) :: sub (:) type( prif_team_type ), intent(in), optional :: team integer(kind=c_int), intent(in), optional :: team_number integer(kind=c_int), intent(out) :: image_index module procedure prif_lcobound_no_dim module module subroutine prif_lcobound_no_dim(coarray_handle, lcobounds) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_intmax_t), intent(out) :: lcobounds (:) module procedure prif_lcobound_with_dim module module subroutine prif_lcobound_with_dim(coarray_handle, dim, lcobound) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_int), intent(in) :: dim integer(kind=c_intmax_t), intent(out) :: lcobound module procedure prif_ucobound_no_dim module module subroutine prif_ucobound_no_dim(coarray_handle, ucobounds) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_intmax_t), intent(out) :: ucobounds (:) module procedure prif_ucobound_with_dim module module subroutine prif_ucobound_with_dim(coarray_handle, dim, ucobound) Interface → Arguments Type Intent Optional Attributes Name type( prif_coarray_handle ), intent(in) :: coarray_handle integer(kind=c_int), intent(in) :: dim integer(kind=c_intmax_t), intent(out) :: ucobound","tags":"","loc":"module/coarray_queries_s.html"},{"title":"program_termination_s – Caffeine","text":"Uses iso_c_binding caffeine_h_m iso_fortran_env Ancestors: program_termination_m module~~program_termination_s~~UsesGraph module~program_termination_s program_termination_s iso_c_binding iso_c_binding module~program_termination_s->iso_c_binding iso_fortran_env iso_fortran_env module~program_termination_s->iso_fortran_env module~caffeine_h_m caffeine_h_m module~program_termination_s->module~caffeine_h_m module~program_termination_m program_termination_m module~program_termination_s->module~program_termination_m module~caffeine_h_m->iso_c_binding module~program_termination_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Functions c_f_string f_c_string Subroutines inner_caf_error_stop_character inner_caf_error_stop_integer prif_error_stop_character prif_error_stop_integer Module Procedures prif_error_stop prif_fail_image prif_stop Functions pure function c_f_string (c_string, length) result(f_string) Arguments Type Intent Optional Attributes Name character(kind=c_char,len=1), intent(in) :: c_string (length) integer(kind=c_int), intent(in) :: length Return Value character(len=length) pure function f_c_string (f_string) result(c_string) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: f_string Return Value character(kind=c_char,len=1)(len(f_string)) Subroutines subroutine inner_caf_error_stop_character (stop_code, length) bind(c, name = \"0\") Arguments Type Intent Optional Attributes Name character(kind=c_char,len=1), intent(in) :: stop_code (length) integer(kind=c_int), intent(in) :: length subroutine inner_caf_error_stop_integer (stop_code) bind(c, name = \"0\") Arguments Type Intent Optional Attributes Name integer, intent(in), optional :: stop_code pure subroutine prif_error_stop_character (stop_code) stop all images and provide the stop_code as the process exit status Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: stop_code pure subroutine prif_error_stop_integer (stop_code) stop all images and provide the stop_code, or 0 if not present, as the process exit status Arguments Type Intent Optional Attributes Name integer, intent(in), optional :: stop_code Module Procedures module procedure prif_error_stop pure module module subroutine prif_error_stop(quiet, stop_code_int, stop_code_char) Interface → Arguments Type Intent Optional Attributes Name logical(kind=c_bool), intent(in) :: quiet integer(kind=c_int), intent(in), optional :: stop_code_int character(len=*), intent(in), optional :: stop_code_char module procedure prif_fail_image module module subroutine prif_fail_image() Interface → Arguments None module procedure prif_stop module module subroutine prif_stop(quiet, stop_code_int, stop_code_char) Interface → Arguments Type Intent Optional Attributes Name logical(kind=c_bool), intent(in) :: quiet integer(kind=c_int), intent(in), optional :: stop_code_int character(len=*), intent(in), optional :: stop_code_char","tags":"","loc":"module/program_termination_s.html"},{"title":"sychronization_s – Caffeine","text":"Uses caffeine_h_m Ancestors: synchronization_m module~~sychronization_s~~UsesGraph module~sychronization_s sychronization_s module~caffeine_h_m caffeine_h_m module~sychronization_s->module~caffeine_h_m module~synchronization_m synchronization_m module~sychronization_s->module~synchronization_m iso_c_binding iso_c_binding module~caffeine_h_m->iso_c_binding module~synchronization_m->iso_c_binding module~teams_m teams_m module~synchronization_m->module~teams_m module~teams_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures prif_sync_all prif_sync_images prif_sync_memory prif_sync_team Module Procedures module procedure prif_sync_all module module subroutine prif_sync_all(stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_sync_images module module subroutine prif_sync_images(image_set, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(in), optional :: image_set (:) integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_sync_memory module module subroutine prif_sync_memory(stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc module procedure prif_sync_team module module subroutine prif_sync_team(team, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type( prif_team_type ), intent(in) :: team integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"module/sychronization_s.html"},{"title":"co_broadcast_s – Caffeine","text":"Uses caffeine_h_m utilities_m iso_c_binding Ancestors: collective_subroutines_m module~~co_broadcast_s~~UsesGraph module~co_broadcast_s co_broadcast_s module~caffeine_h_m caffeine_h_m module~co_broadcast_s->module~caffeine_h_m module~collective_subroutines_m collective_subroutines_m module~co_broadcast_s->module~collective_subroutines_m module~utilities_m utilities_m module~co_broadcast_s->module~utilities_m iso_c_binding iso_c_binding module~co_broadcast_s->iso_c_binding module~caffeine_h_m->iso_c_binding module~collective_subroutines_m->iso_c_binding module~utilities_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures prif_co_broadcast Module Procedures module procedure prif_co_broadcast module module subroutine prif_co_broadcast(a, source_image, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer(kind=c_int), intent(in) :: source_image integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"module/co_broadcast_s.html"},{"title":"co_reduce_s – Caffeine","text":"Uses utilities_m caffeine_assert_m program_termination_m iso_c_binding caffeine_h_m caffeine_intrinsic_array_m Ancestors: collective_subroutines_m module~~co_reduce_s~~UsesGraph module~co_reduce_s co_reduce_s module~caffeine_assert_m caffeine_assert_m module~co_reduce_s->module~caffeine_assert_m module~caffeine_h_m caffeine_h_m module~co_reduce_s->module~caffeine_h_m module~collective_subroutines_m collective_subroutines_m module~co_reduce_s->module~collective_subroutines_m iso_c_binding iso_c_binding module~co_reduce_s->iso_c_binding module~utilities_m utilities_m module~co_reduce_s->module~utilities_m module~program_termination_m program_termination_m module~co_reduce_s->module~program_termination_m module~caffeine_intrinsic_array_m caffeine_intrinsic_array_m module~co_reduce_s->module~caffeine_intrinsic_array_m module~caffeine_h_m->iso_c_binding module~collective_subroutines_m->iso_c_binding module~utilities_m->iso_c_binding module~program_termination_m->iso_c_binding module~caffeine_characterizable_m caffeine_characterizable_m module~caffeine_intrinsic_array_m->module~caffeine_characterizable_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables dummy Module Procedures prif_co_reduce Variables Type Visibility Attributes Name Initial character(kind=c_char,len=5), private, parameter :: dummy = \"     \" Module Procedures module procedure prif_co_reduce module module subroutine prif_co_reduce(a, operation, result_image, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) type(c_funptr), value :: operation integer(kind=c_int), intent(in), optional :: result_image integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"module/co_reduce_s.html"},{"title":"co_sum_s – Caffeine","text":"Uses caffeine_h_m utilities_m iso_c_binding Ancestors: collective_subroutines_m module~~co_sum_s~~UsesGraph module~co_sum_s co_sum_s module~caffeine_h_m caffeine_h_m module~co_sum_s->module~caffeine_h_m module~collective_subroutines_m collective_subroutines_m module~co_sum_s->module~collective_subroutines_m module~utilities_m utilities_m module~co_sum_s->module~utilities_m iso_c_binding iso_c_binding module~co_sum_s->iso_c_binding module~caffeine_h_m->iso_c_binding module~collective_subroutines_m->iso_c_binding module~utilities_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures prif_co_sum Module Procedures module procedure prif_co_sum module module subroutine prif_co_sum(a, result_image, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer(kind=c_int), intent(in), optional :: result_image integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"module/co_sum_s.html"},{"title":"co_max_s – Caffeine","text":"Uses utilities_m caffeine_assert_m program_termination_m iso_c_binding caffeine_h_m Ancestors: collective_subroutines_m module~~co_max_s~~UsesGraph module~co_max_s co_max_s module~caffeine_assert_m caffeine_assert_m module~co_max_s->module~caffeine_assert_m module~caffeine_h_m caffeine_h_m module~co_max_s->module~caffeine_h_m module~collective_subroutines_m collective_subroutines_m module~co_max_s->module~collective_subroutines_m iso_c_binding iso_c_binding module~co_max_s->iso_c_binding module~utilities_m utilities_m module~co_max_s->module~utilities_m module~program_termination_m program_termination_m module~co_max_s->module~program_termination_m module~caffeine_h_m->iso_c_binding module~collective_subroutines_m->iso_c_binding module~utilities_m->iso_c_binding module~program_termination_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures prif_co_max Module Procedures module procedure prif_co_max module module subroutine prif_co_max(a, result_image, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer(kind=c_int), intent(in), optional :: result_image integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"module/co_max_s.html"},{"title":"co_min_s – Caffeine","text":"Uses utilities_m caffeine_assert_m program_termination_m iso_c_binding caffeine_h_m Ancestors: collective_subroutines_m module~~co_min_s~~UsesGraph module~co_min_s co_min_s module~caffeine_assert_m caffeine_assert_m module~co_min_s->module~caffeine_assert_m module~caffeine_h_m caffeine_h_m module~co_min_s->module~caffeine_h_m module~collective_subroutines_m collective_subroutines_m module~co_min_s->module~collective_subroutines_m iso_c_binding iso_c_binding module~co_min_s->iso_c_binding module~utilities_m utilities_m module~co_min_s->module~utilities_m module~program_termination_m program_termination_m module~co_min_s->module~program_termination_m module~caffeine_h_m->iso_c_binding module~collective_subroutines_m->iso_c_binding module~utilities_m->iso_c_binding module~program_termination_m->iso_c_binding Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures prif_co_min Module Procedures module procedure prif_co_min module module subroutine prif_co_min(a, result_image, stat, errmsg, errmsg_alloc) Interface → Arguments Type Intent Optional Attributes Name type(*), intent(inout), contiguous, target :: a (..) integer(kind=c_int), intent(in), optional :: result_image integer(kind=c_int), intent(out), optional :: stat character(len=*), intent(inout), optional :: errmsg character(len=:), intent(inout), optional allocatable :: errmsg_alloc","tags":"","loc":"module/co_min_s.html"},{"title":"caffeine_assert_s – Caffeine","text":"Uses iso_c_binding Ancestors: caffeine_assert_m module~~caffeine_assert_s~~UsesGraph module~caffeine_assert_s caffeine_assert_s iso_c_binding iso_c_binding module~caffeine_assert_s->iso_c_binding module~caffeine_assert_m caffeine_assert_m module~caffeine_assert_s->module~caffeine_assert_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures assert Module Procedures module procedure assert module module subroutine assert(assertion, description, diagnostic_data) Interface → Arguments Type Intent Optional Attributes Name logical, intent(in) :: assertion Most assertions will be expressions such as i>0 character(len=*), intent(in) :: description A brief statement of what is being asserted such as \"i>0\" or \"positive i\" class(*), intent(in), optional :: diagnostic_data Data to include in an error ouptput: may be of an intrinsic type or a type that extends characterizable_t","tags":"","loc":"module/caffeine_assert_s.html"},{"title":"caffeine_intrinsic_array_s – Caffeine","text":"Uses program_termination_m iso_c_binding Ancestors: caffeine_intrinsic_array_m module~~caffeine_intrinsic_array_s~~UsesGraph module~caffeine_intrinsic_array_s caffeine_intrinsic_array_s module~program_termination_m program_termination_m module~caffeine_intrinsic_array_s->module~program_termination_m iso_c_binding iso_c_binding module~caffeine_intrinsic_array_s->iso_c_binding module~caffeine_intrinsic_array_m caffeine_intrinsic_array_m module~caffeine_intrinsic_array_s->module~caffeine_intrinsic_array_m module~program_termination_m->iso_c_binding module~caffeine_characterizable_m caffeine_characterizable_m module~caffeine_intrinsic_array_m->module~caffeine_characterizable_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures as_character construct Module Procedures module procedure as_character pure module module function as_character(self) result(character_self) Interface → Arguments Type Intent Optional Attributes Name class( intrinsic_array_t ), intent(in) :: self Return Value character(len=:),allocatable module procedure construct module procedure construct() Arguments None","tags":"","loc":"module/caffeine_intrinsic_array_s.html"},{"title":"prif.f90 – Caffeine","text":"This file depends on sourcefile~~prif.f90~~EfferentGraph sourcefile~prif.f90 prif.f90 sourcefile~allocation_m.f90 allocation_m.f90 sourcefile~prif.f90->sourcefile~allocation_m.f90 sourcefile~prif_queries_m.f90 prif_queries_m.f90 sourcefile~prif.f90->sourcefile~prif_queries_m.f90 sourcefile~teams_m.f90 teams_m.f90 sourcefile~prif.f90->sourcefile~teams_m.f90 sourcefile~synchronization_m.f90 synchronization_m.f90 sourcefile~prif.f90->sourcefile~synchronization_m.f90 sourcefile~alias_m.f90 alias_m.f90 sourcefile~prif.f90->sourcefile~alias_m.f90 sourcefile~critical_m.f90 critical_m.f90 sourcefile~prif.f90->sourcefile~critical_m.f90 sourcefile~notify_m.f90 notify_m.f90 sourcefile~prif.f90->sourcefile~notify_m.f90 sourcefile~program_startup_m.f90 program_startup_m.f90 sourcefile~prif.f90->sourcefile~program_startup_m.f90 sourcefile~coarray_access_m.f90 coarray_access_m.f90 sourcefile~prif.f90->sourcefile~coarray_access_m.f90 sourcefile~program_termination_m.f90 program_termination_m.f90 sourcefile~prif.f90->sourcefile~program_termination_m.f90 sourcefile~coarray_queries_m.f90 coarray_queries_m.f90 sourcefile~prif.f90->sourcefile~coarray_queries_m.f90 sourcefile~image_queries_m.f90 image_queries_m.f90 sourcefile~prif.f90->sourcefile~image_queries_m.f90 sourcefile~collective_subroutines_m.f90 collective_subroutines_m.f90 sourcefile~prif.f90->sourcefile~collective_subroutines_m.f90 sourcefile~locks_m.f90 locks_m.f90 sourcefile~prif.f90->sourcefile~locks_m.f90 sourcefile~events_m.f90 events_m.f90 sourcefile~prif.f90->sourcefile~events_m.f90 sourcefile~atomic_m.f90 atomic_m.f90 sourcefile~prif.f90->sourcefile~atomic_m.f90 sourcefile~prif_queries_m.f90->sourcefile~allocation_m.f90 sourcefile~prif_queries_m.f90->sourcefile~teams_m.f90 sourcefile~synchronization_m.f90->sourcefile~teams_m.f90 sourcefile~alias_m.f90->sourcefile~allocation_m.f90 sourcefile~critical_m.f90->sourcefile~allocation_m.f90 sourcefile~critical_m.f90->sourcefile~locks_m.f90 sourcefile~program_startup_m.f90->sourcefile~teams_m.f90 sourcefile~coarray_access_m.f90->sourcefile~allocation_m.f90 sourcefile~coarray_access_m.f90->sourcefile~teams_m.f90 sourcefile~coarray_queries_m.f90->sourcefile~allocation_m.f90 sourcefile~coarray_queries_m.f90->sourcefile~teams_m.f90 sourcefile~image_queries_m.f90->sourcefile~allocation_m.f90 sourcefile~image_queries_m.f90->sourcefile~teams_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules prif Source Code prif.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt module prif use program_startup_m , only : prif_init use program_termination_m , only : prif_stop , prif_error_stop , prif_fail_image use allocation_m , only : & prif_coarray_handle , prif_allocate , prif_allocate_non_symmetric , prif_deallocate , prif_deallocate_non_symmetric use coarray_access_m , only : & prif_put , prif_put_raw , prif_put_raw_strided , prif_get , prif_get_raw , prif_get_raw_strided use alias_m , only : prif_alias_create , prif_alias_destroy use coarray_queries_m , only : prif_lcobound , prif_ucobound , prif_coshape , prif_image_index use image_queries_m , only : prif_this_image , prif_num_images , prif_failed_images , prif_stopped_images , prif_image_status use prif_queries_m , only : prif_set_context_data , prif_get_context_data , prif_base_pointer , prif_local_data_size use collective_subroutines_m , only : prif_co_sum , prif_co_max , prif_co_min , prif_co_reduce , prif_co_broadcast use teams_m , only : prif_form_team , prif_change_team , prif_end_team , prif_team_type , prif_get_team , prif_team_number use synchronization_m , only : prif_sync_all , prif_sync_images , prif_sync_team , prif_sync_memory use locks_m , only : prif_lock_type , prif_lock , prif_unlock use critical_m , only : prif_critical_type , prif_critical , prif_end_critical use events_m , only : prif_event_post , prif_event_wait , prif_event_query use notify_m , only : prif_notify_type , prif_notify_wait use atomic_m , only : & prif_atomic_add , prif_atomic_and , prif_atomic_or , prif_atomic_xor , prif_atomic_cas , prif_atomic_fetch_add , & prif_atomic_fetch_and , prif_atomic_fetch_or , prif_atomic_fetch_xor , prif_atomic_define , prif_atomic_ref implicit none end module prif","tags":"","loc":"sourcefile/prif.f90.html"},{"title":"alias_m.f90 – Caffeine","text":"This file depends on sourcefile~~alias_m.f90~~EfferentGraph sourcefile~alias_m.f90 alias_m.f90 sourcefile~allocation_m.f90 allocation_m.f90 sourcefile~alias_m.f90->sourcefile~allocation_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Files dependent on this one sourcefile~~alias_m.f90~~AfferentGraph sourcefile~alias_m.f90 alias_m.f90 sourcefile~prif.f90 prif.f90 sourcefile~prif.f90->sourcefile~alias_m.f90 sourcefile~alias_s.f90 alias_s.f90 sourcefile~alias_s.f90->sourcefile~alias_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules alias_m Source Code alias_m.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt module alias_m use iso_c_binding , only : c_intmax_t use allocation_m , only : prif_coarray_handle implicit none private public :: prif_alias_create , prif_alias_destroy interface module subroutine prif_alias_create ( source_handle , alias_co_lbounds , alias_co_ubounds , alias_handle ) implicit none type ( prif_coarray_handle ), intent ( in ) :: source_handle integer ( c_intmax_t ), intent ( in ) :: alias_co_lbounds (:) integer ( c_intmax_t ), intent ( in ) :: alias_co_ubounds (:) type ( prif_coarray_handle ), intent ( out ) :: alias_handle end subroutine module subroutine prif_alias_destroy ( alias_handle ) implicit none type ( prif_coarray_handle ), intent ( in ) :: alias_handle end subroutine end interface end module alias_m","tags":"","loc":"sourcefile/alias_m.f90.html"},{"title":"image_queries_m.f90 – Caffeine","text":"This file depends on sourcefile~~image_queries_m.f90~~EfferentGraph sourcefile~image_queries_m.f90 image_queries_m.f90 sourcefile~teams_m.f90 teams_m.f90 sourcefile~image_queries_m.f90->sourcefile~teams_m.f90 sourcefile~allocation_m.f90 allocation_m.f90 sourcefile~image_queries_m.f90->sourcefile~allocation_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Files dependent on this one sourcefile~~image_queries_m.f90~~AfferentGraph sourcefile~image_queries_m.f90 image_queries_m.f90 sourcefile~prif.f90 prif.f90 sourcefile~prif.f90->sourcefile~image_queries_m.f90 sourcefile~image_queries_s.f90 image_queries_s.f90 sourcefile~image_queries_s.f90->sourcefile~image_queries_m.f90 sourcefile~assert_s.f90 assert_s.f90 sourcefile~assert_s.f90->sourcefile~image_queries_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules image_queries_m Source Code image_queries_m.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt module image_queries_m use iso_c_binding , only : c_int , c_intmax_t use teams_m , only : prif_team_type use allocation_m , only : prif_coarray_handle implicit none private public :: prif_num_images , prif_this_image , prif_failed_images , prif_stopped_images , prif_image_status interface module subroutine prif_num_images ( team , team_number , image_count ) implicit none type ( prif_team_type ), intent ( in ), optional :: team integer ( c_intmax_t ), intent ( in ), optional :: team_number integer ( c_int ), intent ( out ) :: image_count end subroutine module subroutine prif_failed_images ( team , failed_images ) implicit none type ( prif_team_type ), intent ( in ), optional :: team integer ( c_int ), allocatable , intent ( out ) :: failed_images (:) end subroutine module subroutine prif_stopped_images ( team , stopped_images ) implicit none type ( prif_team_type ), intent ( in ), optional :: team integer ( c_int ), allocatable , intent ( out ) :: stopped_images (:) end subroutine module impure elemental subroutine prif_image_status ( image , team , image_status ) implicit none integer ( c_int ), intent ( in ) :: image type ( prif_team_type ), intent ( in ), optional :: team integer ( c_int ), intent ( out ) :: image_status end subroutine end interface interface prif_this_image module subroutine prif_this_image_no_coarray ( team , image_index ) implicit none type ( prif_team_type ), intent ( in ), optional :: team integer ( c_int ), intent ( out ) :: image_index end subroutine module subroutine prif_this_image_with_coarray ( coarray_handle , team , cosubscripts ) implicit none type ( prif_coarray_handle ), intent ( in ) :: coarray_handle type ( prif_team_type ), intent ( in ), optional :: team integer ( c_intmax_t ), intent ( out ) :: cosubscripts (:) end subroutine module subroutine prif_this_image_with_dim ( coarray_handle , dim , team , cosubscript ) implicit none type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( c_int ), intent ( in ) :: dim type ( prif_team_type ), intent ( in ), optional :: team integer ( c_intmax_t ), intent ( out ) :: cosubscript end subroutine end interface end module image_queries_m","tags":"","loc":"sourcefile/image_queries_m.f90.html"},{"title":"critical_m.f90 – Caffeine","text":"This file depends on sourcefile~~critical_m.f90~~EfferentGraph sourcefile~critical_m.f90 critical_m.f90 sourcefile~allocation_m.f90 allocation_m.f90 sourcefile~critical_m.f90->sourcefile~allocation_m.f90 sourcefile~locks_m.f90 locks_m.f90 sourcefile~critical_m.f90->sourcefile~locks_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Files dependent on this one sourcefile~~critical_m.f90~~AfferentGraph sourcefile~critical_m.f90 critical_m.f90 sourcefile~prif.f90 prif.f90 sourcefile~prif.f90->sourcefile~critical_m.f90 sourcefile~critical_s.f90 critical_s.f90 sourcefile~critical_s.f90->sourcefile~critical_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules critical_m Source Code critical_m.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt module critical_m use allocation_m , only : prif_coarray_handle use iso_c_binding , only : c_int use locks_m , only : prif_critical_type => prif_lock_type implicit none private public :: prif_critical_type , prif_critical , prif_end_critical interface module subroutine prif_critical ( critical_coarray , stat , errmsg , errmsg_alloc ) implicit none type ( prif_coarray_handle ), intent ( in ) :: critical_coarray integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_end_critical ( critical_coarray ) implicit none type ( prif_coarray_handle ), intent ( in ) :: critical_coarray end subroutine end interface end module critical_m","tags":"","loc":"sourcefile/critical_m.f90.html"},{"title":"allocation_s.f90 – Caffeine","text":"This file depends on sourcefile~~allocation_s.f90~~EfferentGraph sourcefile~allocation_s.f90 allocation_s.f90 sourcefile~allocation_m.f90 allocation_m.f90 sourcefile~allocation_s.f90->sourcefile~allocation_m.f90 sourcefile~caffeine_h_m.f90 caffeine_h_m.f90 sourcefile~allocation_s.f90->sourcefile~caffeine_h_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules allocation_s Source Code allocation_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( allocation_m ) allocation_s implicit none contains module procedure prif_allocate use caffeine_h_m , only : caf_allocate allocated_memory = caf_allocate ( & product ( ubounds - lbounds + 1 ) * element_length , size ( ucobounds ), lcobounds , ucobounds , final_func , coarray_handle % ptr ) end procedure module procedure prif_allocate_non_symmetric end procedure module procedure prif_deallocate end procedure module procedure prif_deallocate_non_symmetric end procedure end submodule allocation_s","tags":"","loc":"sourcefile/allocation_s.f90.html"},{"title":"program_startup_m.f90 – Caffeine","text":"This file depends on sourcefile~~program_startup_m.f90~~EfferentGraph sourcefile~program_startup_m.f90 program_startup_m.f90 sourcefile~teams_m.f90 teams_m.f90 sourcefile~program_startup_m.f90->sourcefile~teams_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Files dependent on this one sourcefile~~program_startup_m.f90~~AfferentGraph sourcefile~program_startup_m.f90 program_startup_m.f90 sourcefile~prif.f90 prif.f90 sourcefile~prif.f90->sourcefile~program_startup_m.f90 sourcefile~program_startup_s.f90 program_startup_s.F90 sourcefile~program_startup_s.f90->sourcefile~program_startup_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules program_startup_m Source Code program_startup_m.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt module program_startup_m use iso_c_binding , only : c_int use teams_m , only : prif_team_type implicit none private public :: prif_init , default_team type ( prif_team_type ), target :: default_team interface module subroutine prif_init ( exit_code ) implicit none integer ( c_int ), intent ( out ) :: exit_code end subroutine end interface end module program_startup_m","tags":"","loc":"sourcefile/program_startup_m.f90.html"},{"title":"notify_m.f90 – Caffeine","text":"Files dependent on this one sourcefile~~notify_m.f90~~AfferentGraph sourcefile~notify_m.f90 notify_m.f90 sourcefile~prif.f90 prif.f90 sourcefile~prif.f90->sourcefile~notify_m.f90 sourcefile~notify_s.f90 notify_s.f90 sourcefile~notify_s.f90->sourcefile~notify_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules notify_m Source Code notify_m.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt module notify_m use iso_c_binding , only : c_intmax_t , c_int , c_ptr implicit none private public :: prif_notify_type , prif_notify_wait type :: prif_notify_type end type interface module subroutine prif_notify_wait ( notify_var_ptr , until_count , stat , errmsg , errmsg_alloc ) implicit none type ( c_ptr ), intent ( in ) :: notify_var_ptr integer ( c_intmax_t ), intent ( in ), optional :: until_count integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine end interface end module notify_m","tags":"","loc":"sourcefile/notify_m.f90.html"},{"title":"caffeine_h_m.f90 – Caffeine","text":"Files dependent on this one sourcefile~~caffeine_h_m.f90~~AfferentGraph sourcefile~caffeine_h_m.f90 caffeine_h_m.f90 sourcefile~allocation_s.f90 allocation_s.f90 sourcefile~allocation_s.f90->sourcefile~caffeine_h_m.f90 sourcefile~co_max_s.f90 co_max_s.f90 sourcefile~co_max_s.f90->sourcefile~caffeine_h_m.f90 sourcefile~co_reduce_s.f90 co_reduce_s.f90 sourcefile~co_reduce_s.f90->sourcefile~caffeine_h_m.f90 sourcefile~synchronization_s.f90 synchronization_s.f90 sourcefile~synchronization_s.f90->sourcefile~caffeine_h_m.f90 sourcefile~normal_termination_s.f90 normal_termination_s.f90 sourcefile~normal_termination_s.f90->sourcefile~caffeine_h_m.f90 sourcefile~image_queries_s.f90 image_queries_s.f90 sourcefile~image_queries_s.f90->sourcefile~caffeine_h_m.f90 sourcefile~program_termination_s.f90 program_termination_s.f90 sourcefile~program_termination_s.f90->sourcefile~caffeine_h_m.f90 sourcefile~program_startup_s.f90 program_startup_s.F90 sourcefile~program_startup_s.f90->sourcefile~caffeine_h_m.f90 sourcefile~co_broadcast_s.f90 co_broadcast_s.f90 sourcefile~co_broadcast_s.f90->sourcefile~caffeine_h_m.f90 sourcefile~co_sum_s.f90 co_sum_s.f90 sourcefile~co_sum_s.f90->sourcefile~caffeine_h_m.f90 sourcefile~co_min_s.f90 co_min_s.f90 sourcefile~co_min_s.f90->sourcefile~caffeine_h_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules caffeine_h_m Source Code caffeine_h_m.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt module caffeine_h_m ! Fortran module shadowing the caffeine.h header file use iso_c_binding , only : c_int , c_ptr , c_size_t , c_funptr , c_bool , c_size_t , c_intmax_t implicit none private public :: caf_caffeinate , caf_decaffeinate public :: caf_num_images , caf_this_image public :: caf_allocate public :: caf_sync_all public :: caf_co_broadcast , caf_co_sum , caf_co_min , caf_co_max , caf_co_reduce public :: caf_same_cfi_type , caf_elem_len , caf_numeric_type , caf_is_f_string interface ! ________ Program initiation and finalization ___________ subroutine caf_caffeinate ( argc , argv ) bind ( C ) !! void c_caffeinate(int argc, char *argv[]); import c_int , c_ptr implicit none integer ( c_int ), value :: argc type ( c_ptr ) argv ( * ) end subroutine subroutine caf_decaffeinate ( exit_code ) bind ( C ) !! void c_decaffeinate(); import c_int implicit none integer ( c_int ), value :: exit_code end subroutine ! _________________ Image enumeration ____________________ function caf_this_image () bind ( C ) !! int caf_this_image(); import c_int implicit none integer ( c_int ) caf_this_image end function pure function caf_num_images () bind ( C ) !! int caf_num_images(); import c_int implicit none integer ( c_int ) caf_num_images end function ! _________________ Memory allocation ____________________ function caf_allocate ( sz , corank , lcobounds , ucobounds , final_func , coarray_handle ) result ( ptr ) bind ( c ) import c_int , c_size_t , c_intmax_t , c_funptr , c_ptr implicit none integer ( kind = c_size_t ), intent ( in ), value :: sz integer ( kind = c_int ), intent ( in ), value :: corank integer ( kind = c_intmax_t ), dimension (:), intent ( in ) :: lcobounds , ucobounds type ( c_funptr ), intent ( in ), value :: final_func type ( c_ptr ), intent ( out ) :: coarray_handle type ( c_ptr ) :: ptr end function ! __________________ Synchronization _____________________ subroutine caf_sync_all () bind ( C ) !! void caf_sync_all(); import c_int implicit none end subroutine ! ______________ Collective Subroutines __________________ subroutine caf_co_broadcast ( a , source_image , stat , Nelem ) bind ( C ) !! void c_co_broadcast(CFI_cdesc_t * a_desc, int source_image, int* stat, int num_elements); import c_int , c_ptr implicit none type ( * ) a (..) type ( c_ptr ), value :: stat integer ( c_int ), value :: source_image , Nelem end subroutine subroutine caf_co_reduce ( a , result_image , c_loc_stat , c_loc_errmsg , num_elements , Coll_ReduceSub , client_data ) bind ( C ) !! void caf_co_reduce(CFI_cdesc_t* a_desc, int result_image, int* stat, char* errmsg, int num_elements, gex_Coll_ReduceFn_t* user_op, void* client_data) import c_int , c_ptr , c_size_t , c_funptr implicit none type ( * ) a (..) integer ( c_int ), value :: result_image type ( c_ptr ), value :: c_loc_stat , c_loc_errmsg , client_data type ( c_funptr ), value :: Coll_ReduceSub integer ( c_size_t ), value :: num_elements end subroutine subroutine caf_co_sum ( a , result_image , c_loc_stat , c_loc_errmsg , num_elements ) bind ( C ) !! void c_co_sum(CFI_cdesc_t* a_desc, int result_image, int* stat, char* errmsg, size_t num_elements); import c_int , c_ptr , c_size_t implicit none type ( * ) a (..) integer ( c_int ), value :: result_image type ( c_ptr ), value :: c_loc_stat , c_loc_errmsg integer ( c_size_t ), value :: num_elements end subroutine subroutine caf_co_min ( a , result_image , c_loc_stat , c_loc_errmsg , num_elements ) bind ( C ) !! void c_co_min(CFI_cdesc_t* a_desc, int result_image, int* stat, char* errmsg, size_t num_elements); import c_int , c_ptr , c_size_t implicit none type ( * ) a (..) integer ( c_int ), value :: result_image type ( c_ptr ), value :: c_loc_stat , c_loc_errmsg integer ( c_size_t ), value :: num_elements end subroutine subroutine caf_co_max ( a , result_image , c_loc_stat , c_loc_errmsg , num_elements ) bind ( C ) !! void c_co_max(CFI_cdesc_t* a_desc, int result_image, int* stat, char* errmsg, size_t num_elements); import c_int , c_ptr , c_size_t implicit none type ( * ) a (..) integer ( c_int ), value :: result_image type ( c_ptr ), value :: c_loc_stat , c_loc_errmsg integer ( c_size_t ), value :: num_elements end subroutine logical ( c_bool ) pure function caf_same_cfi_type ( a , b ) bind ( C ) !! bool caf_same_cfi_type(CFI_cdesc_t* a_desc, CFI_cdesc_t* a_desc); import c_bool type ( * ), intent ( in ) :: a (..), b (..) end function logical ( c_bool ) pure function caf_numeric_type ( a ) bind ( C ) !! bool caf_numeric_type(CFI_cdesc_t* a_desc); import c_bool type ( * ), intent ( in ) :: a (..) end function logical ( c_bool ) pure function caf_is_f_string ( a ) bind ( C ) !! bool caf_is_f_string(CFI_cdesc_t* a_desc); import c_bool type ( * ), intent ( in ) :: a (..) end function pure function caf_elem_len ( a ) result ( a_elem_len ) bind ( C ) !! size_t caf_elem_len(CFI_cdesc_t* a_desc); import c_size_t type ( * ), intent ( in ) :: a (..) integer ( c_size_t ), target :: a_elem_len end function end interface end module caffeine_h_m","tags":"","loc":"sourcefile/caffeine_h_m.f90.html"},{"title":"image_queries_s.f90 – Caffeine","text":"This file depends on sourcefile~~image_queries_s.f90~~EfferentGraph sourcefile~image_queries_s.f90 image_queries_s.f90 sourcefile~image_queries_m.f90 image_queries_m.f90 sourcefile~image_queries_s.f90->sourcefile~image_queries_m.f90 sourcefile~caffeine_h_m.f90 caffeine_h_m.f90 sourcefile~image_queries_s.f90->sourcefile~caffeine_h_m.f90 sourcefile~teams_m.f90 teams_m.f90 sourcefile~image_queries_m.f90->sourcefile~teams_m.f90 sourcefile~allocation_m.f90 allocation_m.f90 sourcefile~image_queries_m.f90->sourcefile~allocation_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules image_queries_s Source Code image_queries_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( image_queries_m ) image_queries_s use caffeine_h_m , only : caf_num_images , caf_this_image implicit none contains module procedure prif_num_images ! TODO: handle optional args `team` and `team_number` image_count = caf_num_images () end procedure module procedure prif_this_image_no_coarray ! TODO: handle optional arg `team` image_index = caf_this_image () end procedure module procedure prif_this_image_with_coarray end procedure module procedure prif_this_image_with_dim end procedure module procedure prif_failed_images end procedure module procedure prif_stopped_images end procedure module procedure prif_image_status end procedure end submodule image_queries_s","tags":"","loc":"sourcefile/image_queries_s.f90.html"},{"title":"prif_queries_s.f90 – Caffeine","text":"This file depends on sourcefile~~prif_queries_s.f90~~EfferentGraph sourcefile~prif_queries_s.f90 prif_queries_s.f90 sourcefile~prif_queries_m.f90 prif_queries_m.f90 sourcefile~prif_queries_s.f90->sourcefile~prif_queries_m.f90 sourcefile~allocation_m.f90 allocation_m.f90 sourcefile~prif_queries_m.f90->sourcefile~allocation_m.f90 sourcefile~teams_m.f90 teams_m.f90 sourcefile~prif_queries_m.f90->sourcefile~teams_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules prif_queries_s Source Code prif_queries_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( prif_queries_m ) prif_queries_s implicit none contains module procedure prif_set_context_data end procedure module procedure prif_get_context_data end procedure module procedure prif_base_pointer end procedure module procedure prif_local_data_size end procedure end submodule prif_queries_s","tags":"","loc":"sourcefile/prif_queries_s.f90.html"},{"title":"normal_termination_s.f90 – Caffeine","text":"This file depends on sourcefile~~normal_termination_s.f90~~EfferentGraph sourcefile~normal_termination_s.f90 normal_termination_s.f90 sourcefile~normal_termination_m.f90 normal_termination_m.f90 sourcefile~normal_termination_s.f90->sourcefile~normal_termination_m.f90 sourcefile~caffeine_h_m.f90 caffeine_h_m.f90 sourcefile~normal_termination_s.f90->sourcefile~caffeine_h_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules normal_termination_s Source Code normal_termination_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( normal_termination_m ) normal_termination_s use iso_fortran_env , only : output_unit use iso_c_binding , only : c_int use caffeine_h_m , only : caf_decaffeinate implicit none contains module procedure prif_stop_integer sync all write ( output_unit , * ) \"caf_stop: stop code '\" , stop_code , \"'\" flush output_unit if (. not . present ( stop_code )) call caf_decaffeinate ( exit_code = 0_c_int ) ! does not return call caf_decaffeinate ( stop_code ) end procedure module procedure prif_stop_character sync all write ( output_unit , * ) \"caf_stop: stop code '\" // stop_code // \"'\" flush output_unit call caf_decaffeinate ( exit_code = 0_c_int ) end procedure end submodule normal_termination_s","tags":"","loc":"sourcefile/normal_termination_s.f90.html"},{"title":"atomic_s.f90 – Caffeine","text":"This file depends on sourcefile~~atomic_s.f90~~EfferentGraph sourcefile~atomic_s.f90 atomic_s.f90 sourcefile~atomic_m.f90 atomic_m.f90 sourcefile~atomic_s.f90->sourcefile~atomic_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules atomic_s Source Code atomic_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( atomic_m ) atomic_s implicit none contains module procedure prif_atomic_add end procedure module procedure prif_atomic_and end procedure module procedure prif_atomic_or end procedure module procedure prif_atomic_xor end procedure module procedure prif_atomic_cas_int end procedure module procedure prif_atomic_cas_logical end procedure module procedure prif_atomic_fetch_add end procedure module procedure prif_atomic_fetch_and end procedure module procedure prif_atomic_fetch_or end procedure module procedure prif_atomic_fetch_xor end procedure module procedure prif_atomic_define_int end procedure module procedure prif_atomic_define_logical end procedure module procedure prif_atomic_ref_int end procedure module procedure prif_atomic_ref_logical end procedure end submodule atomic_s","tags":"","loc":"sourcefile/atomic_s.f90.html"},{"title":"allocation_m.f90 – Caffeine","text":"Files dependent on this one sourcefile~~allocation_m.f90~~AfferentGraph sourcefile~allocation_m.f90 allocation_m.f90 sourcefile~prif.f90 prif.f90 sourcefile~prif.f90->sourcefile~allocation_m.f90 sourcefile~prif_queries_m.f90 prif_queries_m.f90 sourcefile~prif.f90->sourcefile~prif_queries_m.f90 sourcefile~critical_m.f90 critical_m.f90 sourcefile~prif.f90->sourcefile~critical_m.f90 sourcefile~alias_m.f90 alias_m.f90 sourcefile~prif.f90->sourcefile~alias_m.f90 sourcefile~coarray_access_m.f90 coarray_access_m.f90 sourcefile~prif.f90->sourcefile~coarray_access_m.f90 sourcefile~image_queries_m.f90 image_queries_m.f90 sourcefile~prif.f90->sourcefile~image_queries_m.f90 sourcefile~coarray_queries_m.f90 coarray_queries_m.f90 sourcefile~prif.f90->sourcefile~coarray_queries_m.f90 sourcefile~prif_queries_m.f90->sourcefile~allocation_m.f90 sourcefile~critical_m.f90->sourcefile~allocation_m.f90 sourcefile~allocation_s.f90 allocation_s.f90 sourcefile~allocation_s.f90->sourcefile~allocation_m.f90 sourcefile~alias_m.f90->sourcefile~allocation_m.f90 sourcefile~coarray_access_m.f90->sourcefile~allocation_m.f90 sourcefile~image_queries_m.f90->sourcefile~allocation_m.f90 sourcefile~coarray_queries_m.f90->sourcefile~allocation_m.f90 sourcefile~prif_queries_s.f90 prif_queries_s.f90 sourcefile~prif_queries_s.f90->sourcefile~prif_queries_m.f90 sourcefile~alias_s.f90 alias_s.f90 sourcefile~alias_s.f90->sourcefile~alias_m.f90 sourcefile~coarray_queries_s.f90 coarray_queries_s.f90 sourcefile~coarray_queries_s.f90->sourcefile~coarray_queries_m.f90 sourcefile~image_queries_s.f90 image_queries_s.f90 sourcefile~image_queries_s.f90->sourcefile~image_queries_m.f90 sourcefile~coarray_access_s.f90 coarray_access_s.f90 sourcefile~coarray_access_s.f90->sourcefile~coarray_access_m.f90 sourcefile~critical_s.f90 critical_s.f90 sourcefile~critical_s.f90->sourcefile~critical_m.f90 sourcefile~assert_s.f90 assert_s.f90 sourcefile~assert_s.f90->sourcefile~image_queries_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules allocation_m Source Code allocation_m.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt module allocation_m use iso_c_binding , only : c_ptr , c_int , c_intmax_t , c_size_t , c_funptr implicit none private public :: prif_allocate , prif_allocate_non_symmetric , prif_deallocate , prif_deallocate_non_symmetric type , public :: prif_coarray_handle type ( c_ptr ) :: ptr end type interface module subroutine prif_allocate ( & lcobounds , ucobounds , lbounds , ubounds , element_length , final_func , coarray_handle , & allocated_memory , stat , errmsg , errmsg_alloc ) implicit none integer ( kind = c_intmax_t ), dimension (:), intent ( in ) :: lcobounds , ucobounds integer ( kind = c_intmax_t ), dimension (:), intent ( in ) :: lbounds , ubounds integer ( kind = c_size_t ), intent ( in ) :: element_length type ( c_funptr ), intent ( in ) :: final_func type ( prif_coarray_handle ), intent ( out ) :: coarray_handle type ( c_ptr ), intent ( out ) :: allocated_memory integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_allocate_non_symmetric ( size_in_bytes , allocated_memory , stat , errmsg , errmsg_alloc ) implicit none integer ( kind = c_size_t ) :: size_in_bytes type ( c_ptr ), intent ( out ) :: allocated_memory integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_deallocate ( coarray_handles , stat , errmsg , errmsg_alloc ) implicit none type ( prif_coarray_handle ), intent ( in ) :: coarray_handles (:) integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_deallocate_non_symmetric ( mem , stat , errmsg , errmsg_alloc ) implicit none type ( c_ptr ), intent ( in ) :: mem integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine end interface end module allocation_m","tags":"","loc":"sourcefile/allocation_m.f90.html"},{"title":"program_startup_s.F90 – Caffeine","text":"This file depends on sourcefile~~program_startup_s.f90~~EfferentGraph sourcefile~program_startup_s.f90 program_startup_s.F90 sourcefile~program_startup_m.f90 program_startup_m.f90 sourcefile~program_startup_s.f90->sourcefile~program_startup_m.f90 sourcefile~synchronization_m.f90 synchronization_m.f90 sourcefile~program_startup_s.f90->sourcefile~synchronization_m.f90 sourcefile~caffeine_h_m.f90 caffeine_h_m.f90 sourcefile~program_startup_s.f90->sourcefile~caffeine_h_m.f90 sourcefile~program_termination_m.f90 program_termination_m.f90 sourcefile~program_startup_s.f90->sourcefile~program_termination_m.f90 sourcefile~teams_m.f90 teams_m.f90 sourcefile~program_startup_m.f90->sourcefile~teams_m.f90 sourcefile~synchronization_m.f90->sourcefile~teams_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules program_startup_s Source Code program_startup_s.F90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( program_startup_m ) program_startup_s use iso_c_binding , only : c_loc , c_char , c_null_char , c_bool use synchronization_m , only : prif_sync_all use caffeine_h_m , only : caf_caffeinate , caf_decaffeinate use program_termination_m , only : prif_error_stop implicit none contains module procedure prif_init integer i integer , parameter :: max_arg_len = 1024 associate ( argc => int ( command_argument_count (), c_int )) associate ( argv => [( c_loc ( c_interop_arg ( i )), i = 0 , argc )]) call caf_caffeinate ( argc , argv ) end associate end associate ! TODO: establish non-allocatable coarrays call prif_sync_all exit_code = 0 contains function c_interop_arg ( argnum ) result ( arg ) integer , intent ( in ) :: argnum integer arglen #ifndef __GFORTRAN__ character ( kind = c_char , len = max_arg_len ), target :: arg #else character ( kind = c_char , len = max_arg_len ), target :: targ ! work around gfortran bug character ( kind = c_char , len = max_arg_len ), pointer :: arg arg => targ #endif call get_command_argument ( argnum , arg , arglen ) if ( arglen + 1 > max_arg_len ) call prif_error_stop (. false . _ c_bool , stop_code_char = \"maximum argument length exceeded\" ) arg ( arglen + 1 : arglen + 1 ) = c_null_char end function end procedure end submodule program_startup_s","tags":"","loc":"sourcefile/program_startup_s.f90.html"},{"title":"coarray_queries_m.f90 – Caffeine","text":"This file depends on sourcefile~~coarray_queries_m.f90~~EfferentGraph sourcefile~coarray_queries_m.f90 coarray_queries_m.f90 sourcefile~allocation_m.f90 allocation_m.f90 sourcefile~coarray_queries_m.f90->sourcefile~allocation_m.f90 sourcefile~teams_m.f90 teams_m.f90 sourcefile~coarray_queries_m.f90->sourcefile~teams_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Files dependent on this one sourcefile~~coarray_queries_m.f90~~AfferentGraph sourcefile~coarray_queries_m.f90 coarray_queries_m.f90 sourcefile~prif.f90 prif.f90 sourcefile~prif.f90->sourcefile~coarray_queries_m.f90 sourcefile~coarray_queries_s.f90 coarray_queries_s.f90 sourcefile~coarray_queries_s.f90->sourcefile~coarray_queries_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules coarray_queries_m Source Code coarray_queries_m.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt module coarray_queries_m use iso_c_binding , only : c_int , c_intmax_t , c_size_t use allocation_m , only : prif_coarray_handle use teams_m , only : prif_team_type implicit none private public :: prif_lcobound , prif_ucobound , prif_coshape , prif_image_index interface prif_lcobound module procedure prif_lcobound_with_dim module procedure prif_lcobound_no_dim end interface interface prif_ucobound module procedure prif_ucobound_with_dim module procedure prif_ucobound_no_dim end interface interface module subroutine prif_lcobound_with_dim ( coarray_handle , dim , lcobound ) type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( kind = c_int ), intent ( in ) :: dim integer ( kind = c_intmax_t ), intent ( out ) :: lcobound end subroutine module subroutine prif_lcobound_no_dim ( coarray_handle , lcobounds ) type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( kind = c_intmax_t ), intent ( out ) :: lcobounds (:) end subroutine module subroutine prif_ucobound_with_dim ( coarray_handle , dim , ucobound ) type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( kind = c_int ), intent ( in ) :: dim integer ( kind = c_intmax_t ), intent ( out ) :: ucobound end subroutine module subroutine prif_ucobound_no_dim ( coarray_handle , ucobounds ) type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( kind = c_intmax_t ), intent ( out ) :: ucobounds (:) end subroutine module subroutine prif_coshape ( coarray_handle , sizes ) implicit none type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( c_size_t ), intent ( out ) :: sizes (:) end subroutine module subroutine prif_image_index ( coarray_handle , sub , team , team_number , image_index ) implicit none type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( c_intmax_t ), intent ( in ) :: sub (:) type ( prif_team_type ), intent ( in ), optional :: team integer ( c_int ), intent ( in ), optional :: team_number integer ( c_int ), intent ( out ) :: image_index end subroutine end interface end module coarray_queries_m","tags":"","loc":"sourcefile/coarray_queries_m.f90.html"},{"title":"utilities_m.f90 – Caffeine","text":"Files dependent on this one sourcefile~~utilities_m.f90~~AfferentGraph sourcefile~utilities_m.f90 utilities_m.f90 sourcefile~co_max_s.f90 co_max_s.f90 sourcefile~co_max_s.f90->sourcefile~utilities_m.f90 sourcefile~co_reduce_s.f90 co_reduce_s.f90 sourcefile~co_reduce_s.f90->sourcefile~utilities_m.f90 sourcefile~co_min_s.f90 co_min_s.f90 sourcefile~co_min_s.f90->sourcefile~utilities_m.f90 sourcefile~co_broadcast_s.f90 co_broadcast_s.f90 sourcefile~co_broadcast_s.f90->sourcefile~utilities_m.f90 sourcefile~co_sum_s.f90 co_sum_s.f90 sourcefile~co_sum_s.f90->sourcefile~utilities_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules utilities_m Source Code utilities_m.f90 Source Code module utilities_m use iso_c_binding , only : c_ptr , c_null_ptr , c_int , c_loc implicit none public :: get_c_ptr , get_c_ptr_character , optional_value contains pure function get_c_ptr ( stat ) result ( ptr ) integer , intent ( in ), optional , target :: stat type ( c_ptr ) ptr if ( present ( stat )) then ptr = c_loc ( stat ) else ptr = c_null_ptr end if end function pure function get_c_ptr_character ( errmsg ) result ( ptr ) character ( len =* ), intent ( in ), optional , target :: errmsg type ( c_ptr ) ptr if ( present ( errmsg )) then ptr = c_loc ( errmsg ) else ptr = c_null_ptr end if end function pure function optional_value ( var ) result ( c_val ) integer , intent ( in ), optional :: var integer ( c_int ) c_val if ( present ( var )) then c_val = var else c_val = 0_c_int end if end function end module utilities_m","tags":"","loc":"sourcefile/utilities_m.f90.html"},{"title":"teams_s.f90 – Caffeine","text":"This file depends on sourcefile~~teams_s.f90~~EfferentGraph sourcefile~teams_s.f90 teams_s.f90 sourcefile~teams_m.f90 teams_m.f90 sourcefile~teams_s.f90->sourcefile~teams_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules teams_s Source Code teams_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( teams_m ) teams_s implicit none contains module procedure prif_change_team end procedure module procedure prif_end_team end procedure module procedure prif_form_team end procedure module procedure prif_get_team end procedure module procedure prif_team_number end procedure end submodule","tags":"","loc":"sourcefile/teams_s.f90.html"},{"title":"critical_s.f90 – Caffeine","text":"This file depends on sourcefile~~critical_s.f90~~EfferentGraph sourcefile~critical_s.f90 critical_s.f90 sourcefile~critical_m.f90 critical_m.f90 sourcefile~critical_s.f90->sourcefile~critical_m.f90 sourcefile~allocation_m.f90 allocation_m.f90 sourcefile~critical_m.f90->sourcefile~allocation_m.f90 sourcefile~locks_m.f90 locks_m.f90 sourcefile~critical_m.f90->sourcefile~locks_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules critical_s Source Code critical_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( critical_m ) critical_s implicit none contains module procedure prif_critical end procedure module procedure prif_end_critical end procedure end submodule critical_s","tags":"","loc":"sourcefile/critical_s.f90.html"},{"title":"collective_subroutines_m.f90 – Caffeine","text":"Files dependent on this one sourcefile~~collective_subroutines_m.f90~~AfferentGraph sourcefile~collective_subroutines_m.f90 collective_subroutines_m.f90 sourcefile~prif.f90 prif.f90 sourcefile~prif.f90->sourcefile~collective_subroutines_m.f90 sourcefile~co_max_s.f90 co_max_s.f90 sourcefile~co_max_s.f90->sourcefile~collective_subroutines_m.f90 sourcefile~co_reduce_s.f90 co_reduce_s.f90 sourcefile~co_reduce_s.f90->sourcefile~collective_subroutines_m.f90 sourcefile~co_broadcast_s.f90 co_broadcast_s.f90 sourcefile~co_broadcast_s.f90->sourcefile~collective_subroutines_m.f90 sourcefile~co_sum_s.f90 co_sum_s.f90 sourcefile~co_sum_s.f90->sourcefile~collective_subroutines_m.f90 sourcefile~co_min_s.f90 co_min_s.f90 sourcefile~co_min_s.f90->sourcefile~collective_subroutines_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules collective_subroutines_m Source Code collective_subroutines_m.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt module collective_subroutines_m use iso_c_binding , only : c_int , c_int32_t , c_int64_t , c_float , c_char , c_bool , c_funptr , c_double implicit none private public :: prif_co_sum public :: prif_co_max public :: prif_co_min public :: prif_co_reduce public :: prif_co_broadcast public :: c_int32_t_operation public :: c_int64_t_operation public :: c_float_operation public :: c_double_operation public :: c_bool_operation public :: c_char_operation public :: c_float_complex_operation public :: c_double_complex_operation abstract interface pure function c_int32_t_operation ( lhs , rhs ) result ( lhs_op_rhs ) import c_int32_t implicit none integer ( c_int32_t ), intent ( in ) :: lhs , rhs integer ( c_int32_t ) lhs_op_rhs end function pure function c_int64_t_operation ( lhs , rhs ) result ( lhs_op_rhs ) import c_int64_t implicit none integer ( c_int64_t ), intent ( in ) :: lhs , rhs integer ( c_int64_t ) lhs_op_rhs end function pure function c_float_operation ( lhs , rhs ) result ( lhs_op_rhs ) import c_float implicit none real ( c_float ), intent ( in ) :: lhs , rhs real ( c_float ) lhs_op_rhs end function pure function c_double_operation ( lhs , rhs ) result ( lhs_op_rhs ) import c_double implicit none real ( c_double ), intent ( in ) :: lhs , rhs real ( c_double ) lhs_op_rhs end function pure function c_bool_operation ( lhs , rhs ) result ( lhs_op_rhs ) import c_bool implicit none logical ( c_bool ), intent ( in ) :: lhs , rhs logical ( c_bool ) lhs_op_rhs end function function c_char_operation ( lhs , rhs ) result ( lhs_op_rhs ) import c_char implicit none character ( kind = c_char , len =* ), intent ( in ) :: lhs , rhs character ( kind = c_char , len = :), allocatable :: lhs_op_rhs end function pure function c_float_complex_operation ( lhs , rhs ) result ( lhs_op_rhs ) import c_float implicit none complex ( c_float ), intent ( in ) :: lhs , rhs complex ( c_float ) lhs_op_rhs end function pure function c_double_complex_operation ( lhs , rhs ) result ( lhs_op_rhs ) import c_double implicit none complex ( c_double ), intent ( in ) :: lhs , rhs complex ( c_double ) lhs_op_rhs end function end interface interface module subroutine prif_co_sum ( a , result_image , stat , errmsg , errmsg_alloc ) implicit none type ( * ), intent ( inout ), contiguous , target :: a (..) integer ( c_int ), intent ( in ), optional :: result_image integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_co_max ( a , result_image , stat , errmsg , errmsg_alloc ) implicit none type ( * ), intent ( inout ), contiguous , target :: a (..) integer ( c_int ), intent ( in ), optional :: result_image integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_co_min ( a , result_image , stat , errmsg , errmsg_alloc ) implicit none type ( * ), intent ( inout ), contiguous , target :: a (..) integer ( c_int ), intent ( in ), optional :: result_image integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_co_reduce ( a , operation , result_image , stat , errmsg , errmsg_alloc ) implicit none type ( * ), intent ( inout ), contiguous , target :: a (..) type ( c_funptr ), value :: operation integer ( c_int ), intent ( in ), optional :: result_image integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_co_broadcast ( a , source_image , stat , errmsg , errmsg_alloc ) implicit none type ( * ), intent ( inout ), contiguous , target :: a (..) integer ( c_int ), intent ( in ) :: source_image integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine end interface end module","tags":"","loc":"sourcefile/collective_subroutines_m.f90.html"},{"title":"coarray_access_s.f90 – Caffeine","text":"This file depends on sourcefile~~coarray_access_s.f90~~EfferentGraph sourcefile~coarray_access_s.f90 coarray_access_s.f90 sourcefile~coarray_access_m.f90 coarray_access_m.f90 sourcefile~coarray_access_s.f90->sourcefile~coarray_access_m.f90 sourcefile~allocation_m.f90 allocation_m.f90 sourcefile~coarray_access_m.f90->sourcefile~allocation_m.f90 sourcefile~teams_m.f90 teams_m.f90 sourcefile~coarray_access_m.f90->sourcefile~teams_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules coarray_access_s Source Code coarray_access_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( coarray_access_m ) coarray_access_s implicit none contains module procedure prif_put end procedure module procedure prif_put_raw end procedure module procedure prif_put_raw_strided end procedure module procedure prif_get end procedure module procedure prif_get_raw end procedure module procedure prif_get_raw_strided end procedure end submodule coarray_access_s","tags":"","loc":"sourcefile/coarray_access_s.f90.html"},{"title":"coarray_access_m.f90 – Caffeine","text":"This file depends on sourcefile~~coarray_access_m.f90~~EfferentGraph sourcefile~coarray_access_m.f90 coarray_access_m.f90 sourcefile~allocation_m.f90 allocation_m.f90 sourcefile~coarray_access_m.f90->sourcefile~allocation_m.f90 sourcefile~teams_m.f90 teams_m.f90 sourcefile~coarray_access_m.f90->sourcefile~teams_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Files dependent on this one sourcefile~~coarray_access_m.f90~~AfferentGraph sourcefile~coarray_access_m.f90 coarray_access_m.f90 sourcefile~prif.f90 prif.f90 sourcefile~prif.f90->sourcefile~coarray_access_m.f90 sourcefile~coarray_access_s.f90 coarray_access_s.f90 sourcefile~coarray_access_s.f90->sourcefile~coarray_access_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules coarray_access_m Source Code coarray_access_m.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt module coarray_access_m use iso_c_binding , only : c_intptr_t , c_int , c_intmax_t , c_size_t , c_ptr , c_ptrdiff_t use allocation_m , only : prif_coarray_handle use teams_m , only : prif_team_type implicit none private public :: prif_put , prif_put_raw , prif_put_raw_strided , prif_get , prif_get_raw , prif_get_raw_strided interface module subroutine prif_put ( & coarray_handle , coindices , value , first_element_addr , team , team_number , notify_ptr , stat , errmsg , errmsg_alloc ) implicit none type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( c_intmax_t ), intent ( in ) :: coindices (:) type ( * ), dimension (..), intent ( in ), contiguous :: value type ( c_ptr ), intent ( in ) :: first_element_addr type ( prif_team_type ), optional , intent ( in ) :: team integer ( c_intmax_t ), optional , intent ( in ) :: team_number integer ( c_intptr_t ), optional , intent ( in ) :: notify_ptr integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_put_raw ( image_num , local_buffer , remote_ptr , notify_ptr , size , stat , errmsg , errmsg_alloc ) implicit none integer ( c_int ), intent ( in ) :: image_num type ( c_ptr ), intent ( in ) :: local_buffer integer ( c_intptr_t ), intent ( in ) :: remote_ptr integer ( c_intptr_t ), optional , intent ( in ) :: notify_ptr integer ( c_size_t ), intent ( in ) :: size integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_put_raw_strided ( & image_num , local_buffer , remote_ptr , element_size , extent , remote_ptr_stride , & local_buffer_stride , notify_ptr , stat , errmsg , errmsg_alloc ) implicit none integer ( c_int ), intent ( in ) :: image_num type ( c_ptr ), intent ( in ) :: local_buffer integer ( c_intptr_t ), intent ( in ) :: remote_ptr integer ( c_size_t ), intent ( in ) :: element_size integer ( c_size_t ), intent ( in ) :: extent (:) integer ( c_ptrdiff_t ), intent ( in ) :: remote_ptr_stride (:) integer ( c_ptrdiff_t ), intent ( in ) :: local_buffer_stride (:) integer ( c_intptr_t ), optional , intent ( in ) :: notify_ptr integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_get ( & coarray_handle , coindices , first_element_addr , value , team , team_number , stat , errmsg , errmsg_alloc ) implicit none type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( c_intmax_t ), intent ( in ) :: coindices (:) type ( c_ptr ), intent ( in ) :: first_element_addr type ( * ), dimension (..), intent ( inout ), contiguous :: value type ( prif_team_type ), optional , intent ( in ) :: team integer ( c_intmax_t ), optional , intent ( in ) :: team_number integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_get_raw ( image_num , local_buffer , remote_ptr , size , stat , errmsg , errmsg_alloc ) implicit none integer ( c_int ), intent ( in ) :: image_num type ( c_ptr ), intent ( in ) :: local_buffer integer ( c_intptr_t ), intent ( in ) :: remote_ptr integer ( c_size_t ), intent ( in ) :: size integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_get_raw_strided ( & image_num , local_buffer , remote_ptr , element_size , extent , remote_ptr_stride , local_buffer_stride , & stat , errmsg , errmsg_alloc ) implicit none integer ( c_int ), intent ( in ) :: image_num type ( c_ptr ), intent ( in ) :: local_buffer integer ( c_intptr_t ), intent ( in ) :: remote_ptr integer ( c_size_t ), intent ( in ) :: element_size integer ( c_size_t ), intent ( in ) :: extent (:) integer ( c_ptrdiff_t ), intent ( in ) :: remote_ptr_stride (:) integer ( c_ptrdiff_t ), intent ( in ) :: local_buffer_stride (:) integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine end interface end module coarray_access_m","tags":"","loc":"sourcefile/coarray_access_m.f90.html"},{"title":"alias_s.f90 – Caffeine","text":"This file depends on sourcefile~~alias_s.f90~~EfferentGraph sourcefile~alias_s.f90 alias_s.f90 sourcefile~alias_m.f90 alias_m.f90 sourcefile~alias_s.f90->sourcefile~alias_m.f90 sourcefile~allocation_m.f90 allocation_m.f90 sourcefile~alias_m.f90->sourcefile~allocation_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules alias_s Source Code alias_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( alias_m ) alias_s implicit none contains module procedure prif_alias_create end procedure module procedure prif_alias_destroy end procedure end submodule alias_s","tags":"","loc":"sourcefile/alias_s.f90.html"},{"title":"locks_m.f90 – Caffeine","text":"Files dependent on this one sourcefile~~locks_m.f90~~AfferentGraph sourcefile~locks_m.f90 locks_m.f90 sourcefile~prif.f90 prif.f90 sourcefile~prif.f90->sourcefile~locks_m.f90 sourcefile~critical_m.f90 critical_m.f90 sourcefile~prif.f90->sourcefile~critical_m.f90 sourcefile~critical_m.f90->sourcefile~locks_m.f90 sourcefile~locks_s.f90 locks_s.f90 sourcefile~locks_s.f90->sourcefile~locks_m.f90 sourcefile~critical_s.f90 critical_s.f90 sourcefile~critical_s.f90->sourcefile~critical_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules locks_m Source Code locks_m.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt module locks_m use iso_c_binding , only : c_intptr_t , c_int , c_bool implicit none private public :: prif_lock_type , prif_lock , prif_unlock type :: prif_lock_type end type interface module subroutine prif_lock ( image_num , lock_var_ptr , acquired_lock , stat , errmsg , errmsg_alloc ) implicit none integer ( c_int ), intent ( in ) :: image_num integer ( c_intptr_t ), intent ( in ) :: lock_var_ptr logical ( c_bool ), intent ( out ), optional :: acquired_lock integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_unlock ( image_num , lock_var_ptr , stat , errmsg , errmsg_alloc ) implicit none integer ( c_int ), intent ( in ) :: image_num integer ( c_intptr_t ), intent ( in ) :: lock_var_ptr integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine end interface end module locks_m","tags":"","loc":"sourcefile/locks_m.f90.html"},{"title":"locks_s.f90 – Caffeine","text":"This file depends on sourcefile~~locks_s.f90~~EfferentGraph sourcefile~locks_s.f90 locks_s.f90 sourcefile~locks_m.f90 locks_m.f90 sourcefile~locks_s.f90->sourcefile~locks_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules locks_s Source Code locks_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( locks_m ) locks_s implicit none contains module procedure prif_lock end procedure module procedure prif_unlock end procedure end submodule locks_s","tags":"","loc":"sourcefile/locks_s.f90.html"},{"title":"synchronization_m.f90 – Caffeine","text":"This file depends on sourcefile~~synchronization_m.f90~~EfferentGraph sourcefile~synchronization_m.f90 synchronization_m.f90 sourcefile~teams_m.f90 teams_m.f90 sourcefile~synchronization_m.f90->sourcefile~teams_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Files dependent on this one sourcefile~~synchronization_m.f90~~AfferentGraph sourcefile~synchronization_m.f90 synchronization_m.f90 sourcefile~prif.f90 prif.f90 sourcefile~prif.f90->sourcefile~synchronization_m.f90 sourcefile~synchronization_s.f90 synchronization_s.f90 sourcefile~synchronization_s.f90->sourcefile~synchronization_m.f90 sourcefile~program_startup_s.f90 program_startup_s.F90 sourcefile~program_startup_s.f90->sourcefile~synchronization_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules synchronization_m Source Code synchronization_m.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt module synchronization_m use iso_c_binding , only : c_int use teams_m , only : prif_team_type implicit none private public :: prif_sync_all , prif_sync_images , prif_sync_team , prif_sync_memory interface module subroutine prif_sync_all ( stat , errmsg , errmsg_alloc ) implicit none integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_sync_images ( image_set , stat , errmsg , errmsg_alloc ) implicit none integer ( c_int ), intent ( in ), optional :: image_set (:) integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_sync_team ( team , stat , errmsg , errmsg_alloc ) implicit none type ( prif_team_type ), intent ( in ) :: team integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_sync_memory ( stat , errmsg , errmsg_alloc ) implicit none integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine end interface end module synchronization_m","tags":"","loc":"sourcefile/synchronization_m.f90.html"},{"title":"teams_m.f90 – Caffeine","text":"Files dependent on this one sourcefile~~teams_m.f90~~AfferentGraph sourcefile~teams_m.f90 teams_m.f90 sourcefile~prif_queries_m.f90 prif_queries_m.f90 sourcefile~prif_queries_m.f90->sourcefile~teams_m.f90 sourcefile~synchronization_m.f90 synchronization_m.f90 sourcefile~synchronization_m.f90->sourcefile~teams_m.f90 sourcefile~prif.f90 prif.f90 sourcefile~prif.f90->sourcefile~teams_m.f90 sourcefile~prif.f90->sourcefile~prif_queries_m.f90 sourcefile~prif.f90->sourcefile~synchronization_m.f90 sourcefile~program_startup_m.f90 program_startup_m.f90 sourcefile~prif.f90->sourcefile~program_startup_m.f90 sourcefile~coarray_access_m.f90 coarray_access_m.f90 sourcefile~prif.f90->sourcefile~coarray_access_m.f90 sourcefile~image_queries_m.f90 image_queries_m.f90 sourcefile~prif.f90->sourcefile~image_queries_m.f90 sourcefile~coarray_queries_m.f90 coarray_queries_m.f90 sourcefile~prif.f90->sourcefile~coarray_queries_m.f90 sourcefile~teams_s.f90 teams_s.f90 sourcefile~teams_s.f90->sourcefile~teams_m.f90 sourcefile~program_startup_m.f90->sourcefile~teams_m.f90 sourcefile~coarray_access_m.f90->sourcefile~teams_m.f90 sourcefile~image_queries_m.f90->sourcefile~teams_m.f90 sourcefile~coarray_queries_m.f90->sourcefile~teams_m.f90 sourcefile~prif_queries_s.f90 prif_queries_s.f90 sourcefile~prif_queries_s.f90->sourcefile~prif_queries_m.f90 sourcefile~synchronization_s.f90 synchronization_s.f90 sourcefile~synchronization_s.f90->sourcefile~synchronization_m.f90 sourcefile~coarray_queries_s.f90 coarray_queries_s.f90 sourcefile~coarray_queries_s.f90->sourcefile~coarray_queries_m.f90 sourcefile~image_queries_s.f90 image_queries_s.f90 sourcefile~image_queries_s.f90->sourcefile~image_queries_m.f90 sourcefile~coarray_access_s.f90 coarray_access_s.f90 sourcefile~coarray_access_s.f90->sourcefile~coarray_access_m.f90 sourcefile~program_startup_s.f90 program_startup_s.F90 sourcefile~program_startup_s.f90->sourcefile~synchronization_m.f90 sourcefile~program_startup_s.f90->sourcefile~program_startup_m.f90 sourcefile~assert_s.f90 assert_s.f90 sourcefile~assert_s.f90->sourcefile~image_queries_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules teams_m Source Code teams_m.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt module teams_m use iso_c_binding , only : c_ptr , c_int , c_intmax_t implicit none private public :: prif_team_type , prif_form_team , current_team , prif_end_team , prif_change_team , prif_get_team , prif_team_number type :: prif_team_type type ( c_ptr ) :: team_ptr end type type ( prif_team_type ), pointer :: current_team => null () interface module subroutine prif_form_team ( team_number , team , new_index , stat , errmsg , errmsg_alloc ) implicit none integer ( c_intmax_t ), intent ( in ) :: team_number type ( prif_team_type ), intent ( out ) :: team integer ( c_int ), intent ( in ), optional :: new_index integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_change_team ( team , stat , errmsg , errmsg_alloc ) implicit none type ( prif_team_type ), intent ( in ) :: team integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_end_team ( stat , errmsg , errmsg_alloc ) implicit none integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_get_team ( level , team ) implicit none integer ( c_int ), intent ( in ), optional :: level type ( prif_team_type ), intent ( out ) :: team end subroutine module subroutine prif_team_number ( team , team_number ) implicit none type ( prif_team_type ), intent ( in ), optional :: team integer ( c_intmax_t ), intent ( out ) :: team_number end subroutine end interface end module teams_m","tags":"","loc":"sourcefile/teams_m.f90.html"},{"title":"events_s.f90 – Caffeine","text":"This file depends on sourcefile~~events_s.f90~~EfferentGraph sourcefile~events_s.f90 events_s.f90 sourcefile~events_m.f90 events_m.f90 sourcefile~events_s.f90->sourcefile~events_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules events_s Source Code events_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( events_m ) events_s implicit none contains module procedure prif_event_post end procedure module procedure prif_event_wait end procedure module procedure prif_event_query end procedure end submodule events_s","tags":"","loc":"sourcefile/events_s.f90.html"},{"title":"notify_s.f90 – Caffeine","text":"This file depends on sourcefile~~notify_s.f90~~EfferentGraph sourcefile~notify_s.f90 notify_s.f90 sourcefile~notify_m.f90 notify_m.f90 sourcefile~notify_s.f90->sourcefile~notify_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules notify_s Source Code notify_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( notify_m ) notify_s implicit none contains module procedure prif_notify_wait end procedure end submodule notify_s","tags":"","loc":"sourcefile/notify_s.f90.html"},{"title":"program_termination_m.f90 – Caffeine","text":"Files dependent on this one sourcefile~~program_termination_m.f90~~AfferentGraph sourcefile~program_termination_m.f90 program_termination_m.f90 sourcefile~prif.f90 prif.f90 sourcefile~prif.f90->sourcefile~program_termination_m.f90 sourcefile~co_max_s.f90 co_max_s.f90 sourcefile~co_max_s.f90->sourcefile~program_termination_m.f90 sourcefile~co_reduce_s.f90 co_reduce_s.f90 sourcefile~co_reduce_s.f90->sourcefile~program_termination_m.f90 sourcefile~program_termination_s.f90 program_termination_s.f90 sourcefile~program_termination_s.f90->sourcefile~program_termination_m.f90 sourcefile~program_startup_s.f90 program_startup_s.F90 sourcefile~program_startup_s.f90->sourcefile~program_termination_m.f90 sourcefile~co_min_s.f90 co_min_s.f90 sourcefile~co_min_s.f90->sourcefile~program_termination_m.f90 sourcefile~assert_s.f90 assert_s.f90 sourcefile~assert_s.f90->sourcefile~program_termination_m.f90 sourcefile~intrinsic_array_s.f90 intrinsic_array_s.F90 sourcefile~intrinsic_array_s.f90->sourcefile~program_termination_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules program_termination_m Source Code program_termination_m.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt module program_termination_m use iso_c_binding , only : c_int , c_bool implicit none private public :: prif_stop , prif_error_stop , prif_fail_image interface module subroutine prif_stop ( quiet , stop_code_int , stop_code_char ) implicit none logical ( c_bool ), intent ( in ) :: quiet integer ( c_int ), intent ( in ), optional :: stop_code_int character ( len =* ), intent ( in ), optional :: stop_code_char end subroutine module pure subroutine prif_error_stop ( quiet , stop_code_int , stop_code_char ) logical ( c_bool ), intent ( in ) :: quiet integer ( c_int ), intent ( in ), optional :: stop_code_int character ( len =* ), intent ( in ), optional :: stop_code_char end subroutine module subroutine prif_fail_image () implicit none end subroutine end interface end module program_termination_m","tags":"","loc":"sourcefile/program_termination_m.f90.html"},{"title":"prif_queries_m.f90 – Caffeine","text":"This file depends on sourcefile~~prif_queries_m.f90~~EfferentGraph sourcefile~prif_queries_m.f90 prif_queries_m.f90 sourcefile~allocation_m.f90 allocation_m.f90 sourcefile~prif_queries_m.f90->sourcefile~allocation_m.f90 sourcefile~teams_m.f90 teams_m.f90 sourcefile~prif_queries_m.f90->sourcefile~teams_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Files dependent on this one sourcefile~~prif_queries_m.f90~~AfferentGraph sourcefile~prif_queries_m.f90 prif_queries_m.f90 sourcefile~prif.f90 prif.f90 sourcefile~prif.f90->sourcefile~prif_queries_m.f90 sourcefile~prif_queries_s.f90 prif_queries_s.f90 sourcefile~prif_queries_s.f90->sourcefile~prif_queries_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules prif_queries_m Source Code prif_queries_m.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt module prif_queries_m use iso_c_binding , only : c_ptr , c_intmax_t , c_intptr_t , c_size_t use allocation_m , only : prif_coarray_handle use teams_m , only : prif_team_type implicit none private public :: prif_set_context_data , prif_get_context_data , prif_base_pointer , prif_local_data_size interface module subroutine prif_set_context_data ( coarray_handle , context_data ) implicit none type ( prif_coarray_handle ), intent ( in ) :: coarray_handle type ( c_ptr ), intent ( in ) :: context_data end subroutine module subroutine prif_get_context_data ( coarray_handle , context_data ) implicit none type ( prif_coarray_handle ), intent ( in ) :: coarray_handle type ( c_ptr ), intent ( out ) :: context_data end subroutine module subroutine prif_base_pointer ( coarray_handle , coindices , team , team_number , ptr ) implicit none type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( c_intmax_t ), intent ( in ) :: coindices (:) type ( prif_team_type ), optional , intent ( in ) :: team integer ( c_intmax_t ), optional , intent ( in ) :: team_number integer ( c_intptr_t ), intent ( out ) :: ptr end subroutine module subroutine prif_local_data_size ( coarray_handle , data_size ) implicit none type ( prif_coarray_handle ), intent ( in ) :: coarray_handle integer ( c_size_t ), intent ( out ) :: data_size end subroutine end interface end module prif_queries_m","tags":"","loc":"sourcefile/prif_queries_m.f90.html"},{"title":"coarray_queries_s.f90 – Caffeine","text":"This file depends on sourcefile~~coarray_queries_s.f90~~EfferentGraph sourcefile~coarray_queries_s.f90 coarray_queries_s.f90 sourcefile~coarray_queries_m.f90 coarray_queries_m.f90 sourcefile~coarray_queries_s.f90->sourcefile~coarray_queries_m.f90 sourcefile~allocation_m.f90 allocation_m.f90 sourcefile~coarray_queries_m.f90->sourcefile~allocation_m.f90 sourcefile~teams_m.f90 teams_m.f90 sourcefile~coarray_queries_m.f90->sourcefile~teams_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules coarray_queries_s Source Code coarray_queries_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( coarray_queries_m ) coarray_queries_s implicit none contains module procedure prif_lcobound_with_dim end procedure module procedure prif_lcobound_no_dim end procedure module procedure prif_ucobound_with_dim end procedure module procedure prif_ucobound_no_dim end procedure prif_ucobound_no_dim module procedure prif_coshape end procedure module procedure prif_image_index end procedure end submodule coarray_queries_s","tags":"","loc":"sourcefile/coarray_queries_s.f90.html"},{"title":"events_m.f90 – Caffeine","text":"Files dependent on this one sourcefile~~events_m.f90~~AfferentGraph sourcefile~events_m.f90 events_m.f90 sourcefile~prif.f90 prif.f90 sourcefile~prif.f90->sourcefile~events_m.f90 sourcefile~events_s.f90 events_s.f90 sourcefile~events_s.f90->sourcefile~events_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules events_m Source Code events_m.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt module events_m use iso_c_binding , only : c_ptr , c_intptr_t , c_int , c_intmax_t implicit none private public :: prif_event_post , prif_event_wait , prif_event_query interface module subroutine prif_event_post ( image_num , event_var_ptr , stat , errmsg , errmsg_alloc ) implicit none integer ( c_int ), intent ( in ) :: image_num integer ( c_intptr_t ), intent ( in ) :: event_var_ptr integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_event_wait ( event_var_ptr , until_count , stat , errmsg , errmsg_alloc ) implicit none type ( c_ptr ), intent ( in ) :: event_var_ptr integer ( c_intmax_t ), intent ( in ), optional :: until_count integer ( c_int ), intent ( out ), optional :: stat character ( len =* ), intent ( inout ), optional :: errmsg character ( len = :), intent ( inout ), allocatable , optional :: errmsg_alloc end subroutine module subroutine prif_event_query ( event_var_ptr , count , stat ) implicit none type ( c_ptr ), intent ( in ) :: event_var_ptr integer ( c_intmax_t ), intent ( out ) :: count integer ( c_int ), intent ( out ), optional :: stat end subroutine end interface end module events_m","tags":"","loc":"sourcefile/events_m.f90.html"},{"title":"program_termination_s.f90 – Caffeine","text":"This file depends on sourcefile~~program_termination_s.f90~~EfferentGraph sourcefile~program_termination_s.f90 program_termination_s.f90 sourcefile~program_termination_m.f90 program_termination_m.f90 sourcefile~program_termination_s.f90->sourcefile~program_termination_m.f90 sourcefile~caffeine_h_m.f90 caffeine_h_m.f90 sourcefile~program_termination_s.f90->sourcefile~caffeine_h_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules program_termination_s Source Code program_termination_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( program_termination_m ) program_termination_s use iso_fortran_env , only : output_unit , error_unit use iso_c_binding , only : c_char use caffeine_h_m , only : caf_decaffeinate implicit none contains module procedure prif_stop !TODO: deal with argument `quiet` if ( present ( stop_code_char )) then call prif_stop_character ( stop_code_char ) else if ( present ( stop_code_int )) then call prif_stop_integer ( stop_code_int ) else call prif_stop_integer () end if contains subroutine prif_stop_integer ( stop_code ) !! synchronize, stop the executing image, and provide the stop_code, or 0 if not present, as the process exit status integer , intent ( in ), optional :: stop_code sync all !write(output_unit, *) \"caf_stop: stop code '\", stop_code, \"'\" write ( output_unit , * ) stop_code flush output_unit if (. not . present ( stop_code )) call caf_decaffeinate ( exit_code = 0_c_int ) ! does not return call caf_decaffeinate ( stop_code ) end subroutine prif_stop_integer subroutine prif_stop_character ( stop_code ) !! synchronize, stop the executing image, and provide the stop_code as the process exit status character ( len =* ), intent ( in ) :: stop_code sync all write ( output_unit , * ) \"caf_stop: stop code '\" // stop_code // \"'\" flush output_unit call caf_decaffeinate ( exit_code = 0_c_int ) ! does not return end subroutine prif_stop_character end procedure prif_stop module procedure prif_error_stop !TODO: deal with argument `quiet` if ( present ( stop_code_char )) then call prif_error_stop_character ( stop_code_char ) else if ( present ( stop_code_int )) then call prif_error_stop_integer ( stop_code_int ) else call prif_error_stop_integer () end if end procedure prif_error_stop pure subroutine prif_error_stop_character ( stop_code ) !! stop all images and provide the stop_code as the process exit status character ( len =* ), intent ( in ) :: stop_code interface pure subroutine caf_error_stop_character_c ( stop_code , length ) bind ( C , name = \"caf_error_stop_character_c\" ) use , intrinsic :: iso_c_binding , only : c_char , c_int implicit none integer ( c_int ), intent ( in ), value :: length character ( len = 1 , kind = c_char ), intent ( in ) :: stop_code ( length ) end subroutine end interface call caf_error_stop_character_c ( f_c_string ( stop_code ), len ( stop_code )) end subroutine subroutine inner_caf_error_stop_character ( stop_code , length ) bind ( C , name = \"inner_caf_error_stop_character\" ) integer ( c_int ), intent ( in ) :: length character ( len = 1 , kind = c_char ), intent ( in ) :: stop_code ( length ) integer ( c_int ), parameter :: error_occured = 1 write ( error_unit , * ) c_f_string ( stop_code , length ) flush error_unit call prif_error_stop_integer ( error_occured ) end subroutine pure subroutine prif_error_stop_integer ( stop_code ) !! stop all images and provide the stop_code, or 0 if not present, as the process exit status integer , intent ( in ), optional :: stop_code interface pure subroutine caf_error_stop_integer_c ( stop_code ) bind ( C , name = \"caf_error_stop_integer_c\" ) use , intrinsic :: iso_c_binding , only : c_int implicit none integer ( c_int ), intent ( in ) :: stop_code end subroutine end interface call caf_error_stop_integer_c ( stop_code ) end subroutine subroutine inner_caf_error_stop_integer ( stop_code ) bind ( C , name = \"inner_caf_error_stop_integer\" ) integer , intent ( in ), optional :: stop_code integer exit_code if (. not . present ( stop_code )) then call caf_decaffeinate ( exit_code = 1 ) else if ( stop_code == 0 ) then write ( error_unit ) stop_code flush error_unit exit_code = 1 else exit_code = stop_code end if call caf_decaffeinate ( exit_code ) ! does not return end subroutine pure function f_c_string ( f_string ) result ( c_string ) character ( len =* ), intent ( in ) :: f_string character ( len = 1 , kind = c_char ) :: c_string ( len ( f_string )) integer :: i do concurrent ( i = 1 : len ( f_string )) c_string ( i ) = f_string ( i : i ) end do end function pure function c_f_string ( c_string , length ) result ( f_string ) integer ( c_int ), intent ( in ) :: length character ( len = 1 , kind = c_char ), intent ( in ) :: c_string ( length ) character ( len = length ) :: f_string integer :: i do concurrent ( i = 1 : length ) f_string ( i : i ) = c_string ( i ) end do end function module procedure prif_fail_image end procedure end submodule program_termination_s","tags":"","loc":"sourcefile/program_termination_s.f90.html"},{"title":"normal_termination_m.f90 – Caffeine","text":"Files dependent on this one sourcefile~~normal_termination_m.f90~~AfferentGraph sourcefile~normal_termination_m.f90 normal_termination_m.f90 sourcefile~normal_termination_s.f90 normal_termination_s.f90 sourcefile~normal_termination_s.f90->sourcefile~normal_termination_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules normal_termination_m Source Code normal_termination_m.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt module normal_termination_m implicit none private public :: caf_stop interface caf_stop module subroutine caf_stop_integer ( stop_code ) !! synchronize, stop the executing image, and provide the stop_code (or 0 if not present) as the process exit status integer , intent ( in ), optional :: stop_code end subroutine module subroutine caf_stop_character ( stop_code ) !! synchronize, stop the executing image, and provide the stop_code as the process exit status character ( len =* ), intent ( in ) :: stop_code end subroutine end interface end module normal_termination_m","tags":"","loc":"sourcefile/normal_termination_m.f90.html"},{"title":"atomic_m.f90 – Caffeine","text":"Files dependent on this one sourcefile~~atomic_m.f90~~AfferentGraph sourcefile~atomic_m.f90 atomic_m.f90 sourcefile~prif.f90 prif.f90 sourcefile~prif.f90->sourcefile~atomic_m.f90 sourcefile~atomic_s.f90 atomic_s.f90 sourcefile~atomic_s.f90->sourcefile~atomic_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules atomic_m Source Code atomic_m.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt module atomic_m use iso_c_binding , only : c_intptr_t , c_int use iso_fortran_env , only : atomic_int_kind , atomic_logical_kind implicit none private public :: prif_atomic_add , prif_atomic_and , prif_atomic_or , prif_atomic_xor , prif_atomic_cas , prif_atomic_fetch_add public :: prif_atomic_fetch_and , prif_atomic_fetch_or , prif_atomic_fetch_xor , prif_atomic_define , prif_atomic_ref interface prif_atomic_cas module procedure prif_atomic_cas_int module procedure prif_atomic_cas_logical end interface interface prif_atomic_define module procedure prif_atomic_define_int module procedure prif_atomic_define_logical end interface interface prif_atomic_ref module procedure prif_atomic_ref_int module procedure prif_atomic_ref_logical end interface interface module subroutine prif_atomic_add ( atom_remote_ptr , image_num , value , stat ) implicit none integer ( c_intptr_t ), intent ( in ) :: atom_remote_ptr integer ( c_int ), intent ( in ) :: image_num integer ( atomic_int_kind ), intent ( in ) :: value integer ( c_int ), intent ( out ), optional :: stat end subroutine module subroutine prif_atomic_and ( atom_remote_ptr , image_num , value , stat ) implicit none integer ( c_intptr_t ), intent ( in ) :: atom_remote_ptr integer ( c_int ), intent ( in ) :: image_num integer ( atomic_int_kind ), intent ( in ) :: value integer ( c_int ), intent ( out ), optional :: stat end subroutine module subroutine prif_atomic_or ( atom_remote_ptr , image_num , value , stat ) implicit none integer ( c_intptr_t ), intent ( in ) :: atom_remote_ptr integer ( c_int ), intent ( in ) :: image_num integer ( atomic_int_kind ), intent ( in ) :: value integer ( c_int ), intent ( out ), optional :: stat end subroutine module subroutine prif_atomic_xor ( atom_remote_ptr , image_num , value , stat ) implicit none integer ( c_intptr_t ), intent ( in ) :: atom_remote_ptr integer ( c_int ), intent ( in ) :: image_num integer ( atomic_int_kind ), intent ( in ) :: value integer ( c_int ), intent ( out ), optional :: stat end subroutine module subroutine prif_atomic_cas_int ( atom_remote_ptr , image_num , old , compare , new , stat ) implicit none integer ( c_intptr_t ), intent ( in ) :: atom_remote_ptr integer ( c_int ), intent ( in ) :: image_num integer ( atomic_int_kind ), intent ( out ) :: old integer ( atomic_int_kind ), intent ( in ) :: compare integer ( atomic_int_kind ), intent ( in ) :: new integer ( c_int ), intent ( out ), optional :: stat end subroutine module subroutine prif_atomic_cas_logical ( atom_remote_ptr , image_num , old , compare , new , stat ) implicit none integer ( c_intptr_t ), intent ( in ) :: atom_remote_ptr integer ( c_int ), intent ( in ) :: image_num logical ( atomic_logical_kind ), intent ( out ) :: old logical ( atomic_logical_kind ), intent ( in ) :: compare logical ( atomic_logical_kind ), intent ( in ) :: new integer ( c_int ), intent ( out ), optional :: stat end subroutine module subroutine prif_atomic_fetch_add ( atom_remote_ptr , image_num , value , old , stat ) implicit none integer ( c_intptr_t ), intent ( in ) :: atom_remote_ptr integer ( c_int ), intent ( in ) :: image_num integer ( atomic_int_kind ), intent ( in ) :: value integer ( atomic_int_kind ), intent ( out ) :: old integer ( c_int ), intent ( out ), optional :: stat end subroutine module subroutine prif_atomic_fetch_and ( atom_remote_ptr , image_num , value , old , stat ) implicit none integer ( c_intptr_t ), intent ( in ) :: atom_remote_ptr integer ( c_int ), intent ( in ) :: image_num integer ( atomic_int_kind ), intent ( in ) :: value integer ( atomic_int_kind ), intent ( out ) :: old integer ( c_int ), intent ( out ), optional :: stat end subroutine module subroutine prif_atomic_fetch_or ( atom_remote_ptr , image_num , value , old , stat ) implicit none integer ( c_intptr_t ), intent ( in ) :: atom_remote_ptr integer ( c_int ), intent ( in ) :: image_num integer ( atomic_int_kind ), intent ( in ) :: value integer ( atomic_int_kind ), intent ( out ) :: old integer ( c_int ), intent ( out ), optional :: stat end subroutine module subroutine prif_atomic_fetch_xor ( atom_remote_ptr , image_num , value , old , stat ) implicit none integer ( c_intptr_t ), intent ( in ) :: atom_remote_ptr integer ( c_int ), intent ( in ) :: image_num integer ( atomic_int_kind ), intent ( in ) :: value integer ( atomic_int_kind ), intent ( out ) :: old integer ( c_int ), intent ( out ), optional :: stat end subroutine module subroutine prif_atomic_define_int ( atom_remote_ptr , image_num , value , stat ) implicit none integer ( c_intptr_t ), intent ( in ) :: atom_remote_ptr integer ( c_int ), intent ( in ) :: image_num integer ( atomic_int_kind ), intent ( in ) :: value integer ( c_int ), intent ( out ), optional :: stat end subroutine module subroutine prif_atomic_define_logical ( atom_remote_ptr , image_num , value , stat ) implicit none integer ( c_intptr_t ), intent ( in ) :: atom_remote_ptr integer ( c_int ), intent ( in ) :: image_num logical ( atomic_logical_kind ), intent ( in ) :: value integer ( c_int ), intent ( out ), optional :: stat end subroutine module subroutine prif_atomic_ref_int ( value , atom_remote_ptr , image_num , stat ) implicit none integer ( atomic_int_kind ), intent ( out ) :: value integer ( c_intptr_t ), intent ( in ) :: atom_remote_ptr integer ( c_int ), intent ( in ) :: image_num integer ( c_int ), intent ( out ), optional :: stat end subroutine module subroutine prif_atomic_ref_logical ( value , atom_remote_ptr , image_num , stat ) implicit none logical ( atomic_logical_kind ), intent ( out ) :: value integer ( c_intptr_t ), intent ( in ) :: atom_remote_ptr integer ( c_int ), intent ( in ) :: image_num integer ( c_int ), intent ( out ), optional :: stat end subroutine end interface end module atomic_m","tags":"","loc":"sourcefile/atomic_m.f90.html"},{"title":"synchronization_s.f90 – Caffeine","text":"This file depends on sourcefile~~synchronization_s.f90~~EfferentGraph sourcefile~synchronization_s.f90 synchronization_s.f90 sourcefile~synchronization_m.f90 synchronization_m.f90 sourcefile~synchronization_s.f90->sourcefile~synchronization_m.f90 sourcefile~caffeine_h_m.f90 caffeine_h_m.f90 sourcefile~synchronization_s.f90->sourcefile~caffeine_h_m.f90 sourcefile~teams_m.f90 teams_m.f90 sourcefile~synchronization_m.f90->sourcefile~teams_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules sychronization_s Source Code synchronization_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( synchronization_m ) sychronization_s use caffeine_h_m , only : caf_sync_all implicit none contains module procedure prif_sync_all !TODO: handle optional args stat, errmsg, errmsg_alloc call caf_sync_all end procedure module procedure prif_sync_images end procedure module procedure prif_sync_team end procedure module procedure prif_sync_memory end procedure end submodule","tags":"","loc":"sourcefile/synchronization_s.f90.html"},{"title":"co_broadcast_s.f90 – Caffeine","text":"This file depends on sourcefile~~co_broadcast_s.f90~~EfferentGraph sourcefile~co_broadcast_s.f90 co_broadcast_s.f90 sourcefile~collective_subroutines_m.f90 collective_subroutines_m.f90 sourcefile~co_broadcast_s.f90->sourcefile~collective_subroutines_m.f90 sourcefile~utilities_m.f90 utilities_m.f90 sourcefile~co_broadcast_s.f90->sourcefile~utilities_m.f90 sourcefile~caffeine_h_m.f90 caffeine_h_m.f90 sourcefile~co_broadcast_s.f90->sourcefile~caffeine_h_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules co_broadcast_s Source Code co_broadcast_s.f90 Source Code submodule ( collective_subroutines_m ) co_broadcast_s use iso_c_binding , only : c_ptr use utilities_m , only : get_c_ptr use caffeine_h_m , only : caf_co_broadcast implicit none contains module procedure prif_co_broadcast type ( c_ptr ) stat_ptr stat_ptr = get_c_ptr ( stat ) call caf_co_broadcast ( a , source_image , stat_ptr , product ( shape ( a ))) ! With a compliant Fortran 2018 compiler, pass in c_sizeof(a) as the final argument ! and eliminate the calculation of num_elements*sizeof(a) in caffeine.c. end procedure end submodule co_broadcast_s","tags":"","loc":"sourcefile/co_broadcast_s.f90.html"},{"title":"co_reduce_s.f90 – Caffeine","text":"This file depends on sourcefile~~co_reduce_s.f90~~EfferentGraph sourcefile~co_reduce_s.f90 co_reduce_s.f90 sourcefile~assert_m.f90 assert_m.F90 sourcefile~co_reduce_s.f90->sourcefile~assert_m.f90 sourcefile~caffeine_h_m.f90 caffeine_h_m.f90 sourcefile~co_reduce_s.f90->sourcefile~caffeine_h_m.f90 sourcefile~intrinsic_array_m.f90 intrinsic_array_m.F90 sourcefile~co_reduce_s.f90->sourcefile~intrinsic_array_m.f90 sourcefile~utilities_m.f90 utilities_m.f90 sourcefile~co_reduce_s.f90->sourcefile~utilities_m.f90 sourcefile~collective_subroutines_m.f90 collective_subroutines_m.f90 sourcefile~co_reduce_s.f90->sourcefile~collective_subroutines_m.f90 sourcefile~program_termination_m.f90 program_termination_m.f90 sourcefile~co_reduce_s.f90->sourcefile~program_termination_m.f90 sourcefile~characterizable_m.f90 characterizable_m.f90 sourcefile~intrinsic_array_m.f90->sourcefile~characterizable_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules co_reduce_s Source Code co_reduce_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( collective_subroutines_m ) co_reduce_s use iso_c_binding , only : & c_ptr , c_size_t , c_loc , c_null_ptr , c_funloc , c_associated , c_f_pointer , c_f_procpointer use caffeine_assert_m , only : assert use caffeine_intrinsic_array_m , only : intrinsic_array_t use utilities_m , only : get_c_ptr , get_c_ptr_character , optional_value use caffeine_h_m , only : caf_co_reduce , caf_same_cfi_type , caf_elem_len , caf_is_f_string use program_termination_m , only : prif_error_stop implicit none character ( kind = c_char , len = 5 ), parameter :: dummy = \"     \" contains module procedure prif_co_reduce type ( c_ptr ) :: stat_ptr = c_null_ptr , errmsg_ptr = c_null_ptr procedure ( c_int32_t_operation ), pointer :: int32_op => null () procedure ( c_int64_t_operation ), pointer :: int64_op => null () procedure ( c_float_operation ), pointer :: float_op => null () procedure ( c_double_operation ), pointer :: double_op => null () procedure ( c_bool_operation ), pointer :: bool_op => null () procedure ( c_char_operation ), pointer :: char_op => null () procedure ( c_float_complex_operation ), pointer :: float_complex_op => null () procedure ( c_double_complex_operation ), pointer :: double_complex_op => null () call assert ( c_associated ( operation ), \"caf_co_reduce: c_associated(operation)\" ) stat_ptr = get_c_ptr ( stat ) errmsg_ptr = get_c_ptr_character ( errmsg ) if ( caf_same_cfi_type ( a , 0 )) then call c_f_procpointer ( operation , int32_op ) call caf_co_reduce ( a , optional_value ( result_image ), stat_ptr , errmsg_ptr , & int ( product ( shape ( a )), c_size_t ), c_funloc ( Coll_ReduceSub_c_int32_t ), c_null_ptr ) else if ( caf_same_cfi_type ( a , 0_c_int64_t )) then call c_f_procpointer ( operation , int64_op ) call caf_co_reduce ( a , optional_value ( result_image ), stat_ptr , errmsg_ptr , & int ( product ( shape ( a )), c_size_t ), c_funloc ( Coll_ReduceSub_c_int64_t ), c_null_ptr ) else if ( caf_same_cfi_type ( a , 1._c_double )) then call c_f_procpointer ( operation , double_op ) call caf_co_reduce ( a , optional_value ( result_image ), stat_ptr , errmsg_ptr , & int ( product ( shape ( a )), c_size_t ), c_funloc ( Coll_ReduceSub_c_double ), c_null_ptr ) else if ( caf_same_cfi_type ( a , 1._c_float )) then call c_f_procpointer ( operation , float_op ) call caf_co_reduce ( a , optional_value ( result_image ), stat_ptr , errmsg_ptr , & int ( product ( shape ( a )), c_size_t ), c_funloc ( Coll_ReduceSub_c_float ), c_null_ptr ) else if ( caf_same_cfi_type ( a , . true . _ c_bool )) then call c_f_procpointer ( operation , bool_op ) call caf_co_reduce ( a , optional_value ( result_image ), stat_ptr , errmsg_ptr , & int ( product ( shape ( a )), c_size_t ), c_funloc ( Coll_ReduceSub_c_bool ), c_null_ptr ) else if ( caf_is_f_string ( a )) then block integer ( c_size_t ), target :: len_a len_a = caf_elem_len ( a ) call c_f_procpointer ( operation , char_op ) call caf_co_reduce ( a , optional_value ( result_image ), stat_ptr , errmsg_ptr , & int ( product ( shape ( a )), c_size_t ), c_funloc ( Coll_ReduceSub_c_char ), c_loc ( len_a )) end block else if ( caf_same_cfi_type ( a , ( 0._c_float , 0._c_float ))) then call c_f_procpointer ( operation , float_complex_op ) call caf_co_reduce ( a , optional_value ( result_image ), stat_ptr , errmsg_ptr , & int ( product ( shape ( a )), c_size_t ), c_funloc ( Coll_ReduceSub_c_float_complex ), c_null_ptr ) else if ( caf_same_cfi_type ( a , ( 0._c_double , 0._c_double ))) then call c_f_procpointer ( operation , double_complex_op ) call caf_co_reduce ( a , optional_value ( result_image ), stat_ptr , errmsg_ptr , & int ( product ( shape ( a )), c_size_t ), c_funloc ( Coll_ReduceSub_c_double_complex ), c_null_ptr ) else call prif_error_stop (. false . _ c_bool , stop_code_char = \"caf_co_reduce: unsupported type\" ) end if contains subroutine Coll_ReduceSub_c_int32_t ( arg1 , arg2_and_out , count , cdata ) bind ( C ) type ( c_ptr ), value :: arg1 !! \"Left\" operands type ( c_ptr ), value :: arg2_and_out !! \"Right\" operands and result integer ( c_size_t ), value :: count !! Operand count type ( c_ptr ), value :: cdata !! Client data integer ( c_int32_t ), pointer :: lhs (:) => null (), rhs_and_result (:) => null () integer ( c_size_t ) i call assert ( all ([ c_associated ( arg1 ), c_associated ( arg2_and_out )]), \"Coll_ReduceSub_c_int32_t: operands associated\" ) call c_f_pointer ( arg1 , lhs , [ count ]) call c_f_pointer ( arg2_and_out , rhs_and_result , [ count ]) do concurrent ( i = 1 : count ) rhs_and_result ( i ) = int32_op ( lhs ( i ), rhs_and_result ( i )) end do end subroutine subroutine Coll_ReduceSub_c_int64_t ( arg1 , arg2_and_out , count , cdata ) bind ( C ) type ( c_ptr ), value :: arg1 !! \"Left\" operands type ( c_ptr ), value :: arg2_and_out !! \"Right\" operands and result integer ( c_size_t ), value :: count !! Operand count type ( c_ptr ), value :: cdata !! Client data integer ( c_int64_t ), pointer :: lhs (:) => null (), rhs_and_result (:) => null () integer ( c_size_t ) i call assert ( all ([ c_associated ( arg1 ), c_associated ( arg2_and_out )]), \"Coll_ReduceSub_c_int64_t: operands associated\" ) call c_f_pointer ( arg1 , lhs , [ count ]) call c_f_pointer ( arg2_and_out , rhs_and_result , [ count ]) do concurrent ( i = 1 : count ) rhs_and_result ( i ) = int64_op ( lhs ( i ), rhs_and_result ( i )) end do end subroutine subroutine Coll_ReduceSub_c_double ( arg1 , arg2_and_out , count , cdata ) bind ( C ) type ( c_ptr ), value :: arg1 !! \"Left\" operands type ( c_ptr ), value :: arg2_and_out !! \"Right\" operands and result integer ( c_size_t ), value :: count !! Operand count type ( c_ptr ), value :: cdata !! Client data real ( c_double ), pointer :: lhs (:) => null (), rhs_and_result (:) => null () integer ( c_size_t ) i call assert ( all ([ c_associated ( arg1 ), c_associated ( arg2_and_out )]), \"Coll_ReduceSub_c_double: operands associated\" ) call c_f_pointer ( arg1 , lhs , [ count ]) call c_f_pointer ( arg2_and_out , rhs_and_result , [ count ]) do concurrent ( i = 1 : count ) rhs_and_result ( i ) = double_op ( lhs ( i ), rhs_and_result ( i )) end do end subroutine subroutine Coll_ReduceSub_c_float ( arg1 , arg2_and_out , count , cdata ) bind ( C ) type ( c_ptr ), value :: arg1 !! \"Left\" operands type ( c_ptr ), value :: arg2_and_out !! \"Right\" operands and result integer ( c_size_t ), value :: count !! Operand count type ( c_ptr ), value :: cdata !! Client data real ( c_float ), pointer :: lhs (:) => null (), rhs_and_result (:) => null () integer ( c_size_t ) i call assert ( all ([ c_associated ( arg1 ), c_associated ( arg2_and_out )]), \"Coll_ReduceSub_c_float: operands associated\" ) call c_f_pointer ( arg1 , lhs , [ count ]) call c_f_pointer ( arg2_and_out , rhs_and_result , [ count ]) do concurrent ( i = 1 : count ) rhs_and_result ( i ) = float_op ( lhs ( i ), rhs_and_result ( i )) end do end subroutine subroutine Coll_ReduceSub_c_double_complex ( arg1 , arg2_and_out , count , cdata ) bind ( C ) type ( c_ptr ), value :: arg1 !! \"Left\" operands type ( c_ptr ), value :: arg2_and_out !! \"Right\" operands and result integer ( c_size_t ), value :: count !! Operand count type ( c_ptr ), value :: cdata !! Client data complex ( c_double ), pointer :: lhs (:) => null (), rhs_and_result (:) => null () integer ( c_size_t ) i call assert ( all ([ c_associated ( arg1 ), c_associated ( arg2_and_out )]), \"Coll_ReduceSub_c_dobule_complex: operands associated\" ) call c_f_pointer ( arg1 , lhs , [ count ]) call c_f_pointer ( arg2_and_out , rhs_and_result , [ count ]) do concurrent ( i = 1 : count ) rhs_and_result ( i ) = double_complex_op ( lhs ( i ), rhs_and_result ( i )) end do end subroutine subroutine Coll_ReduceSub_c_float_complex ( arg1 , arg2_and_out , count , cdata ) bind ( C ) type ( c_ptr ), value :: arg1 !! \"Left\" operands type ( c_ptr ), value :: arg2_and_out !! \"Right\" operands and result integer ( c_size_t ), value :: count !! Operand count type ( c_ptr ), value :: cdata !! Client data complex ( c_float ), pointer :: lhs (:) => null (), rhs_and_result (:) => null () integer ( c_size_t ) i call assert ( all ([ c_associated ( arg1 ), c_associated ( arg2_and_out )]), \"Coll_ReduceSub_c_float_complex: operands associated\" ) call c_f_pointer ( arg1 , lhs , [ count ]) call c_f_pointer ( arg2_and_out , rhs_and_result , [ count ]) do concurrent ( i = 1 : count ) rhs_and_result ( i ) = float_complex_op ( lhs ( i ), rhs_and_result ( i )) end do end subroutine subroutine Coll_ReduceSub_c_bool ( arg1 , arg2_and_out , count , cdata ) bind ( C ) type ( c_ptr ), value :: arg1 !! \"Left\" operands type ( c_ptr ), value :: arg2_and_out !! \"Right\" operands and result integer ( c_size_t ), value :: count !! Operand count type ( c_ptr ), value :: cdata !! Client data logical ( c_bool ), pointer :: lhs (:) => null (), rhs_and_result (:) => null () integer ( c_size_t ) i call assert ( all ([ c_associated ( arg1 ), c_associated ( arg2_and_out )]), \"Coll_ReduceSub_c_bool: operands associated\" ) call c_f_pointer ( arg1 , lhs , [ count ]) call c_f_pointer ( arg2_and_out , rhs_and_result , [ count ]) do concurrent ( i = 1 : count ) rhs_and_result ( i ) = bool_op ( lhs ( i ), rhs_and_result ( i )) end do end subroutine subroutine Coll_ReduceSub_c_char ( arg1 , arg2_and_out , count , cdata ) bind ( C ) type ( c_ptr ), value :: arg1 !! \"Left\" operands type ( c_ptr ), value :: arg2_and_out !! \"Right\" operands and result integer ( c_size_t ), value :: count !! Operand count type ( c_ptr ), value :: cdata !! Client data character ( kind = c_char , len = :), allocatable , target :: prototype (:) character ( kind = c_char , len = :), pointer :: lhs (:) => null (), rhs_and_result (:) => null () integer ( c_int ), pointer :: arglen => null () associate ( c_associated_args => [ c_associated ( arg1 ), c_associated ( arg2_and_out ), c_associated ( cdata )]) call assert ( all ( c_associated_args ), \"Coll_ReduceSub_c_char: all(c_associated_args)\" , intrinsic_array_t ( c_associated_args )) end associate call c_f_pointer ( cdata , arglen ) allocate ( character ( kind = c_char , len = arglen ) :: prototype ( count )) lhs => prototype ! set string length rhs_and_result => prototype ! set string length call c_f_pointer ( arg1 , lhs , [ count ]) call c_f_pointer ( arg2_and_out , rhs_and_result , [ count ]) block integer ( c_size_t ) i do i = 1 , count rhs_and_result ( i ) = char_op ( lhs ( i ), rhs_and_result ( i )) end do end block end subroutine end procedure end submodule co_reduce_s","tags":"","loc":"sourcefile/co_reduce_s.f90.html"},{"title":"co_sum_s.f90 – Caffeine","text":"This file depends on sourcefile~~co_sum_s.f90~~EfferentGraph sourcefile~co_sum_s.f90 co_sum_s.f90 sourcefile~collective_subroutines_m.f90 collective_subroutines_m.f90 sourcefile~co_sum_s.f90->sourcefile~collective_subroutines_m.f90 sourcefile~utilities_m.f90 utilities_m.f90 sourcefile~co_sum_s.f90->sourcefile~utilities_m.f90 sourcefile~caffeine_h_m.f90 caffeine_h_m.f90 sourcefile~co_sum_s.f90->sourcefile~caffeine_h_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules co_sum_s Source Code co_sum_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( collective_subroutines_m ) co_sum_s use iso_c_binding , only : c_ptr , c_size_t , c_null_char , c_f_pointer use utilities_m , only : get_c_ptr , get_c_ptr_character , optional_value use caffeine_h_m , only : caf_co_sum implicit none contains module procedure prif_co_sum type ( c_ptr ) stat_c_ptr , errmsg_c_ptr character ( len = :), allocatable :: c_string character ( len = :), pointer :: errmsg_f_ptr stat_c_ptr = get_c_ptr ( stat ) c_string = errmsg // c_null_char errmsg_c_ptr = get_c_ptr_character ( c_string ) call caf_co_sum ( a , optional_value ( result_image ), stat_c_ptr , errmsg_c_ptr , int ( product ( shape ( a )), c_size_t )) call c_f_pointer ( errmsg_c_ptr , errmsg_f_ptr ) errmsg = errmsg_f_ptr end procedure end submodule co_sum_s","tags":"","loc":"sourcefile/co_sum_s.f90.html"},{"title":"co_max_s.f90 – Caffeine","text":"This file depends on sourcefile~~co_max_s.f90~~EfferentGraph sourcefile~co_max_s.f90 co_max_s.f90 sourcefile~assert_m.f90 assert_m.F90 sourcefile~co_max_s.f90->sourcefile~assert_m.f90 sourcefile~caffeine_h_m.f90 caffeine_h_m.f90 sourcefile~co_max_s.f90->sourcefile~caffeine_h_m.f90 sourcefile~utilities_m.f90 utilities_m.f90 sourcefile~co_max_s.f90->sourcefile~utilities_m.f90 sourcefile~collective_subroutines_m.f90 collective_subroutines_m.f90 sourcefile~co_max_s.f90->sourcefile~collective_subroutines_m.f90 sourcefile~program_termination_m.f90 program_termination_m.f90 sourcefile~co_max_s.f90->sourcefile~program_termination_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules co_max_s Source Code co_max_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( collective_subroutines_m ) co_max_s use iso_c_binding , only : c_ptr , c_size_t , c_null_char , c_f_pointer , c_funloc , c_null_ptr use utilities_m , only : get_c_ptr , get_c_ptr_character , optional_value use caffeine_h_m , only : caf_co_max , caf_same_cfi_type , caf_numeric_type , caf_is_f_string use caffeine_assert_m , only : assert use program_termination_m , only : prif_error_stop implicit none contains module procedure prif_co_max type ( c_ptr ) :: stat_c_ptr = c_null_ptr , errmsg_c_ptr = c_null_ptr character ( len = :), allocatable :: c_string character ( len = :), pointer :: errmsg_f_ptr if ( caf_numeric_type ( a )) then stat_c_ptr = get_c_ptr ( stat ) c_string = errmsg // c_null_char errmsg_c_ptr = get_c_ptr_character ( c_string ) call caf_co_max ( a , optional_value ( result_image ), stat_c_ptr , errmsg_c_ptr , int ( product ( shape ( a )), c_size_t )) call c_f_pointer ( errmsg_c_ptr , errmsg_f_ptr ) ! no need to do this for stat was passed by reference errmsg = errmsg_f_ptr ! copy the output back & truncate the null terminator else if ( caf_is_f_string ( a )) then call prif_co_reduce ( a , c_funloc ( reverse_alphabetize ), optional_value ( result_image ), stat , errmsg ) else call prif_error_stop (. false . _ c_bool , stop_code_char = \"caf_co_max: unsupported type\" ) end if contains function reverse_alphabetize ( lhs , rhs ) result ( last_alphabetically ) character ( len =* ), intent ( in ) :: lhs , rhs character ( len = :), allocatable :: last_alphabetically call assert ( len ( lhs ) == len ( rhs ), \"caf_co_max: LHS/RHS length match\" , lhs // \" , \" // rhs ) last_alphabetically = max ( lhs , rhs ) end function end procedure end submodule co_max_s","tags":"","loc":"sourcefile/co_max_s.f90.html"},{"title":"co_min_s.f90 – Caffeine","text":"This file depends on sourcefile~~co_min_s.f90~~EfferentGraph sourcefile~co_min_s.f90 co_min_s.f90 sourcefile~assert_m.f90 assert_m.F90 sourcefile~co_min_s.f90->sourcefile~assert_m.f90 sourcefile~caffeine_h_m.f90 caffeine_h_m.f90 sourcefile~co_min_s.f90->sourcefile~caffeine_h_m.f90 sourcefile~utilities_m.f90 utilities_m.f90 sourcefile~co_min_s.f90->sourcefile~utilities_m.f90 sourcefile~collective_subroutines_m.f90 collective_subroutines_m.f90 sourcefile~co_min_s.f90->sourcefile~collective_subroutines_m.f90 sourcefile~program_termination_m.f90 program_termination_m.f90 sourcefile~co_min_s.f90->sourcefile~program_termination_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules co_min_s Source Code co_min_s.f90 Source Code ! Copyright (c), The Regents of the University of California ! Terms of use are as specified in LICENSE.txt submodule ( collective_subroutines_m ) co_min_s use iso_c_binding , only : c_ptr , c_size_t , c_null_char , c_f_pointer , c_funloc , c_null_ptr use utilities_m , only : get_c_ptr , get_c_ptr_character , optional_value use caffeine_h_m , only : caf_co_min , caf_same_cfi_type , caf_numeric_type , caf_is_f_string use caffeine_assert_m , only : assert use program_termination_m , only : prif_error_stop implicit none contains module procedure prif_co_min type ( c_ptr ) :: stat_c_ptr = c_null_ptr , errmsg_c_ptr = c_null_ptr character ( len = :), allocatable :: c_string character ( len = :), pointer :: errmsg_f_ptr if ( caf_numeric_type ( a )) then stat_c_ptr = get_c_ptr ( stat ) c_string = errmsg // c_null_char errmsg_c_ptr = get_c_ptr_character ( c_string ) call caf_co_min ( a , optional_value ( result_image ), stat_c_ptr , errmsg_c_ptr , int ( product ( shape ( a )), c_size_t )) call c_f_pointer ( errmsg_c_ptr , errmsg_f_ptr ) ! no need to do this for stat was passed by reference errmsg = errmsg_f_ptr ! copy the output back & truncate the null terminator else if ( caf_is_f_string ( a )) then call prif_co_reduce ( a , c_funloc ( alphabetize ), optional_value ( result_image ), stat , errmsg ) else call prif_error_stop (. false . _ c_bool , stop_code_char = \"prif_co_min: unsupported type\" ) end if contains function alphabetize ( lhs , rhs ) result ( first_alphabetically ) character ( len =* ), intent ( in ) :: lhs , rhs character ( len = :), allocatable :: first_alphabetically call assert ( len ( lhs ) == len ( rhs ), \"prif_co_min: LHS/RHS length match\" , lhs // \" , \" // rhs ) first_alphabetically = min ( lhs , rhs ) end function end procedure end submodule co_min_s","tags":"","loc":"sourcefile/co_min_s.f90.html"},{"title":"assert_s.f90 – Caffeine","text":"This file depends on sourcefile~~assert_s.f90~~EfferentGraph sourcefile~assert_s.f90 assert_s.f90 sourcefile~assert_m.f90 assert_m.F90 sourcefile~assert_s.f90->sourcefile~assert_m.f90 sourcefile~image_queries_m.f90 image_queries_m.f90 sourcefile~assert_s.f90->sourcefile~image_queries_m.f90 sourcefile~characterizable_m.f90 characterizable_m.f90 sourcefile~assert_s.f90->sourcefile~characterizable_m.f90 sourcefile~program_termination_m.f90 program_termination_m.f90 sourcefile~assert_s.f90->sourcefile~program_termination_m.f90 sourcefile~teams_m.f90 teams_m.f90 sourcefile~image_queries_m.f90->sourcefile~teams_m.f90 sourcefile~allocation_m.f90 allocation_m.f90 sourcefile~image_queries_m.f90->sourcefile~allocation_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules caffeine_assert_s Source Code assert_s.f90 Source Code ! !     (c) 2019-2020 Guide Star Engineering, LLC !     This Software was developed for the US Nuclear Regulatory Commission (US NRC) under contract !     \"Multi-Dimensional Physics Implementation into Fuel Analysis under Steady-state and Transients (FAST)\", !     contract # NRC-HQ-60-17-C-0007 ! submodule ( caffeine_assert_m ) caffeine_assert_s use iso_c_binding , only : c_bool implicit none contains module procedure assert use caffeine_characterizable_m , only : characterizable_t use program_termination_m , only : prif_error_stop use image_queries_m , only : this_image => prif_this_image character ( len = :), allocatable :: header , trailer integer :: me toggle_assertions : & if ( enforce_assertions ) then check_assertion : & if (. not . assertion ) then call this_image ( image_index = me ) header = 'Assertion \"' // description // '\" failed on image ' // string ( me ) represent_diagnostics_as_string : & if (. not . present ( diagnostic_data )) then trailer = \"(none provided)\" else select type ( diagnostic_data ) type is ( character ( len =* )) trailer = diagnostic_data type is ( complex ) trailer = string ( diagnostic_data ) type is ( integer ) trailer = string ( diagnostic_data ) type is ( logical ) trailer = string ( diagnostic_data ) type is ( real ) trailer = string ( diagnostic_data ) class is ( characterizable_t ) trailer = diagnostic_data % as_character () class default trailer = \"of unsupported type.\" end select end if represent_diagnostics_as_string call prif_error_stop (. false . _ c_bool , stop_code_char = header // ' with diagnostic data \"' // trailer // '\"' ) end if check_assertion end if toggle_assertions contains pure function string ( numeric ) result ( number_as_string ) !! Result is a string represention of the numeric argument class ( * ), intent ( in ) :: numeric integer , parameter :: max_len = 128 character ( len = max_len ) :: untrimmed_string character ( len = :), allocatable :: number_as_string select type ( numeric ) type is ( complex ) write ( untrimmed_string , * ) numeric type is ( integer ) write ( untrimmed_string , * ) numeric type is ( logical ) write ( untrimmed_string , * ) numeric type is ( real ) write ( untrimmed_string , * ) numeric class default call prif_error_stop (. false . _ c_bool , & stop_code_char = \"Internal error in subroutine 'assert': unsupported type in function 'string'.\" ) end select number_as_string = trim ( adjustl ( untrimmed_string )) end function string end procedure end submodule","tags":"","loc":"sourcefile/assert_s.f90.html"},{"title":"intrinsic_array_m.F90 – Caffeine","text":"This file depends on sourcefile~~intrinsic_array_m.f90~~EfferentGraph sourcefile~intrinsic_array_m.f90 intrinsic_array_m.F90 sourcefile~characterizable_m.f90 characterizable_m.f90 sourcefile~intrinsic_array_m.f90->sourcefile~characterizable_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Files dependent on this one sourcefile~~intrinsic_array_m.f90~~AfferentGraph sourcefile~intrinsic_array_m.f90 intrinsic_array_m.F90 sourcefile~co_reduce_s.f90 co_reduce_s.f90 sourcefile~co_reduce_s.f90->sourcefile~intrinsic_array_m.f90 sourcefile~intrinsic_array_s.f90 intrinsic_array_s.F90 sourcefile~intrinsic_array_s.f90->sourcefile~intrinsic_array_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules caffeine_intrinsic_array_m Source Code intrinsic_array_m.F90 Source Code module caffeine_intrinsic_array_m !! Define an abstract class that supports object representation in character form use caffeine_characterizable_m , only : characterizable_t implicit none private public :: intrinsic_array_t type , extends ( characterizable_t ) :: intrinsic_array_t complex , allocatable :: complex_1D (:) complex ( kind ( 1.D0 )), allocatable :: complex_double_1D (:) integer , allocatable :: integer_1D (:) logical , allocatable :: logical_1D (:) real , allocatable :: real_1D (:) double precision , allocatable :: double_precision_1D (:) complex , allocatable :: complex_2D (:,:) complex ( kind ( 1.D0 )), allocatable :: complex_double_2D (:,:) integer , allocatable :: integer_2D (:,:) logical , allocatable :: logical_2D (:,:) real , allocatable :: real_2D (:,:) double precision , allocatable :: double_precision_2D (:,:) complex , allocatable :: complex_3D (:,:,:) complex ( kind ( 1.D0 )), allocatable :: complex_double_3D (:,:,:) integer , allocatable :: integer_3D (:,:,:) logical , allocatable :: logical_3D (:,:,:) real , allocatable :: real_3D (:,:,:) double precision , allocatable :: double_precision_3D (:,:,:) contains procedure :: as_character end type interface intrinsic_array_t pure module function construct ( array ) result ( intrinsic_array ) implicit none #ifndef NAGFOR class ( * ), intent ( in ) :: array (..) #else class ( * ), intent ( in ) :: array (:) #endif type ( intrinsic_array_t ) intrinsic_array end function end interface interface pure module function as_character ( self ) result ( character_self ) implicit none class ( intrinsic_array_t ), intent ( in ) :: self character ( len = :), allocatable :: character_self end function end interface end module","tags":"","loc":"sourcefile/intrinsic_array_m.f90.html"},{"title":"intrinsic_array_s.F90 – Caffeine","text":"This file depends on sourcefile~~intrinsic_array_s.f90~~EfferentGraph sourcefile~intrinsic_array_s.f90 intrinsic_array_s.F90 sourcefile~intrinsic_array_m.f90 intrinsic_array_m.F90 sourcefile~intrinsic_array_s.f90->sourcefile~intrinsic_array_m.f90 sourcefile~program_termination_m.f90 program_termination_m.f90 sourcefile~intrinsic_array_s.f90->sourcefile~program_termination_m.f90 sourcefile~characterizable_m.f90 characterizable_m.f90 sourcefile~intrinsic_array_m.f90->sourcefile~characterizable_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules caffeine_intrinsic_array_s Source Code intrinsic_array_s.F90 Source Code submodule ( caffeine_intrinsic_array_m ) caffeine_intrinsic_array_s use iso_c_binding , only : c_bool use program_termination_m , only : prif_error_stop implicit none contains module procedure construct #ifndef NAGFOR select rank ( array ) rank ( 1 ) #endif select type ( array ) type is ( complex ) intrinsic_array % complex_1D = array type is ( integer ) intrinsic_array % integer_1D = array type is ( logical ) intrinsic_array % logical_1D = array type is ( real ) intrinsic_array % real_1D = array type is ( double precision ) intrinsic_array % double_precision_1D = array class default call prif_error_stop (. false . _ c_bool , stop_code_char = \"intrinsic_array_t construct: unsupported rank-2 type\" ) end select #ifndef NAGFOR rank ( 2 ) select type ( array ) type is ( complex ) intrinsic_array % complex_2D = array type is ( integer ) intrinsic_array % integer_2D = array type is ( logical ) intrinsic_array % logical_2D = array type is ( real ) intrinsic_array % real_2D = array type is ( double precision ) intrinsic_array % double_precision_2D = array class default call prif_error_stop (. false . _ c_bool , stop_code_char = \"intrinsic_array_t construct: unsupported rank-2 type\" ) end select rank ( 3 ) select type ( array ) type is ( complex ) intrinsic_array % complex_3D = array type is ( integer ) intrinsic_array % integer_3D = array type is ( logical ) intrinsic_array % logical_3D = array type is ( real ) intrinsic_array % real_3D = array type is ( double precision ) intrinsic_array % double_precision_3D = array class default call prif_error_stop (. false . _ c_bool , stop_code_char = \"intrinsic_array_t construct: unsupported rank-3 type\" ) end select rank default call prif_error_stop (. false . _ c_bool , stop_code_char = \"intrinsic_array_t construct: unsupported rank\" ) end select #endif end procedure module procedure as_character integer , parameter :: single_number_width = 32 if ( 1 /= count ( & [ allocated ( self % complex_1D ), allocated ( self % complex_double_1D ), allocated ( self % integer_1D ), & allocated ( self % logical_1D ), allocated ( self % real_1D ), & allocated ( self % complex_2D ), allocated ( self % complex_double_2D ), allocated ( self % integer_2D ), & allocated ( self % logical_2D ), allocated ( self % real_2D ), & allocated ( self % complex_3D ), allocated ( self % complex_double_3D ), allocated ( self % integer_3D ), & allocated ( self % logical_3D ), allocated ( self % real_3D ) & ])) call prif_error_stop (. false . _ c_bool , & stop_code_char = \"intrinsic_array_t as_character: ambiguous component allocation status.\" ) if ( allocated ( self % complex_1D )) then character_self = repeat ( \" \" , ncopies = single_number_width * size ( self % complex_1D )) write ( character_self , * ) self % complex_1D else if ( allocated ( self % complex_double_1D )) then character_self = repeat ( \" \" , ncopies = single_number_width * size ( self % complex_double_1D )) write ( character_self , * ) self % complex_double_1D else if ( allocated ( self % integer_1D )) then character_self = repeat ( \" \" , ncopies = single_number_width * size ( self % integer_1D )) write ( character_self , * ) self % integer_1D else if ( allocated ( self % logical_1D )) then character_self = repeat ( \" \" , ncopies = single_number_width * size ( self % logical_1D )) write ( character_self , * ) self % logical_1D else if ( allocated ( self % real_1D )) then character_self = repeat ( \" \" , ncopies = single_number_width * size ( self % real_1D )) write ( character_self , * ) self % real_1D else if ( allocated ( self % double_precision_1D )) then character_self = repeat ( \" \" , ncopies = single_number_width * size ( self % double_precision_1D )) write ( character_self , * ) self % double_precision_1D else if ( allocated ( self % complex_2D )) then character_self = repeat ( \" \" , ncopies = single_number_width * size ( self % complex_2D )) write ( character_self , * ) self % complex_2D else if ( allocated ( self % complex_double_2D )) then character_self = repeat ( \" \" , ncopies = single_number_width * size ( self % complex_double_2D )) write ( character_self , * ) self % complex_double_2D else if ( allocated ( self % integer_2D )) then character_self = repeat ( \" \" , ncopies = single_number_width * size ( self % integer_2D )) write ( character_self , * ) self % integer_2D else if ( allocated ( self % logical_2D )) then character_self = repeat ( \" \" , ncopies = single_number_width * size ( self % logical_1D )) write ( character_self , * ) self % logical_2D else if ( allocated ( self % real_2D )) then character_self = repeat ( \" \" , ncopies = single_number_width * size ( self % real_2D )) write ( character_self , * ) self % real_2D else if ( allocated ( self % double_precision_2D )) then character_self = repeat ( \" \" , ncopies = single_number_width * size ( self % double_precision_2D )) write ( character_self , * ) self % double_precision_2D else if ( allocated ( self % complex_3D )) then character_self = repeat ( \" \" , ncopies = single_number_width * size ( self % complex_3D )) write ( character_self , * ) self % complex_3D else if ( allocated ( self % complex_double_3D )) then character_self = repeat ( \" \" , ncopies = single_number_width * size ( self % complex_double_3D )) write ( character_self , * ) self % complex_double_3D else if ( allocated ( self % integer_3D )) then character_self = repeat ( \" \" , ncopies = single_number_width * size ( self % integer_3D )) write ( character_self , * ) self % integer_3D else if ( allocated ( self % logical_3D )) then character_self = repeat ( \" \" , ncopies = single_number_width * size ( self % logical_1D )) write ( character_self , * ) self % logical_3D else if ( allocated ( self % real_3D )) then character_self = repeat ( \" \" , ncopies = single_number_width * size ( self % real_3D )) write ( character_self , * ) self % real_3D else if ( allocated ( self % double_precision_3D )) then character_self = repeat ( \" \" , ncopies = single_number_width * size ( self % double_precision_3D )) write ( character_self , * ) self % double_precision_3D end if character_self = trim ( adjustl ( character_self )) end procedure end submodule","tags":"","loc":"sourcefile/intrinsic_array_s.f90.html"},{"title":"assert_m.F90 – Caffeine","text":"Files dependent on this one sourcefile~~assert_m.f90~~AfferentGraph sourcefile~assert_m.f90 assert_m.F90 sourcefile~co_reduce_s.f90 co_reduce_s.f90 sourcefile~co_reduce_s.f90->sourcefile~assert_m.f90 sourcefile~co_max_s.f90 co_max_s.f90 sourcefile~co_max_s.f90->sourcefile~assert_m.f90 sourcefile~co_min_s.f90 co_min_s.f90 sourcefile~co_min_s.f90->sourcefile~assert_m.f90 sourcefile~assert_s.f90 assert_s.f90 sourcefile~assert_s.f90->sourcefile~assert_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules caffeine_assert_m Source Code assert_m.F90 Source Code ! !     (c) 2019-2020 Guide Star Engineering, LLC !     This Software was developed for the US Nuclear Regulatory Commission (US NRC) under contract !     \"Multi-Dimensional Physics Implementation into Fuel Analysis under Steady-state and Transients (FAST)\", !     contract # NRC-HQ-60-17-C-0007 ! module caffeine_assert_m !! summary: Utility for runtime checking of logical assertions. !! usage: error-terminate if the assertion fails: !! !!    use assertions_m, only : assert !!    call assert( 2 > 1, \"2 > 1\") !! !! Turn off assertions in production code by setting USE_ASSERTIONS to .false. via the preprocessor. !! This file's capitalized .F90 extension causes most Fortran compilers to preprocess this file so !! that building as follows turns off assertion enforcement: !! !!    fpm build --flag \"-DUSE_ASSERTIONS=.false.\" !! !! Doing so may eliminate any associated runtime overhead by enabling optimizing compilers to ignore !! the assertion procedure body during a dead-code-removal phase of optimization. implicit none private public :: assert #ifndef USE_ASSERTIONS # define USE_ASSERTIONS .true. #endif logical , parameter :: enforce_assertions = USE_ASSERTIONS !! Turn off assertions as follows: fpm build --flag \"-DUSE_ASSERTIONS=.false.\" interface module subroutine assert ( assertion , description , diagnostic_data ) !! If assertion is .false., error-terminate with a character stop code that contains diagnostic_data if present implicit none logical , intent ( in ) :: assertion !! Most assertions will be expressions such as i>0 character ( len =* ), intent ( in ) :: description !! A brief statement of what is being asserted such as \"i>0\" or \"positive i\" class ( * ), intent ( in ), optional :: diagnostic_data !! Data to include in an error ouptput: may be of an intrinsic type or a type that extends characterizable_t end subroutine end interface end module","tags":"","loc":"sourcefile/assert_m.f90.html"},{"title":"characterizable_m.f90 – Caffeine","text":"Files dependent on this one sourcefile~~characterizable_m.f90~~AfferentGraph sourcefile~characterizable_m.f90 characterizable_m.f90 sourcefile~intrinsic_array_m.f90 intrinsic_array_m.F90 sourcefile~intrinsic_array_m.f90->sourcefile~characterizable_m.f90 sourcefile~assert_s.f90 assert_s.f90 sourcefile~assert_s.f90->sourcefile~characterizable_m.f90 sourcefile~co_reduce_s.f90 co_reduce_s.f90 sourcefile~co_reduce_s.f90->sourcefile~intrinsic_array_m.f90 sourcefile~intrinsic_array_s.f90 intrinsic_array_s.F90 sourcefile~intrinsic_array_s.f90->sourcefile~intrinsic_array_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules caffeine_characterizable_m Source Code characterizable_m.f90 Source Code module caffeine_characterizable_m !! Define an abstract class that supports object representation in character form implicit none private public :: characterizable_t type , abstract :: characterizable_t contains procedure ( as_character_i ), deferred :: as_character end type abstract interface pure function as_character_i ( self ) result ( character_self ) import characterizable_t implicit none class ( characterizable_t ), intent ( in ) :: self character ( len = :), allocatable :: character_self end function end interface end module","tags":"","loc":"sourcefile/characterizable_m.f90.html"}]}